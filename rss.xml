<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link href="https://&lt;your-domain-here&gt;/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Weekly Podcast Updates</title>
    <link>https://&lt;your-project-link-here&gt;</link>
    <language>en-us</language>
    <description>Weekly digest of podcast episodes from week 23, starting 2025-06-02.</description>
    <lastBuildDate>Mon, 09 Jun 2025 00:14:49 GMT</lastBuildDate>
    <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
    <item>
      <title>Stop Fixing Things That Aren't Broken</title>
      <link>https://art19.com/shows/whiskey-web-and-whatnot</link>
      <description>This week, Robbie and Chuck talk about the unintended chaos of “move fast and break things” in both software and startups. From Riverside glitches to Tesla’s overengineered wipers, they explore how updates can derail otherwise stable experiences. They unpack the economics of getting laid off, the pressure to build a personal brand in tech, and the strange fate of dev tools. Plus, Robbie shares his latest app ideas.
In this episode:

(00:00) - Intro
(00:36) - When updates break what worked
(07:30) - Are devs prioritizing personal brands?
(10:22) - The strange economics of getting laid off
(15:48) - Is GitLab trash?
(17:34) - Robbie's ADHD app and vibe coding plans
(21:14) - Debt, 401k, and emergency funds
(22:39) - Prepping for Big Sky Dev Con
(25:35) - UPS shipping woes
(31:19) - React Miami and difficulties taking a podcast on the road
(36:07) - Whiskey + Girl Scout cookies (and other pairings)
(41:14) - Should open source have a franchise model?
(42:37) - Work, paternity leave, and the IBM acquisition
(44:24) - Tesla shopping for a family of five
(48:17) - Movies and TV

Links

Riverside: https://riverside.fm/
Tesla: https://www.tesla.com/
Arc: https://arc.net/
Silicon Valley: https://en.wikipedia.org/wiki/Silicon_Valley_(TV_series)
Chrome: https://www.google.com/chrome/
Shark Tank: https://en.wikipedia.org/wiki/Shark_Tank
GitHub: https://github.com
Microsoft: https://www.microsoft.com/
Typescript: https://www.typescriptlang.org/
Rust: https://www.rust-lang.org/
VS Code: https://code.visualstudio.com/
OpenAI: https://openai.com
Cursor: https://www.cursor.com/
Windsurf: https://windsurf.ai/
Copilot: https://github.com/features/copilot
Deno: https://deno.com/
Node: https://nodejs.org/
GitLab: https://gitlab.com/
Bitbucket: https://bitbucket.org/
Fresca: https://www.coca-cola.com/us/en/brands/fresca-sparkling-soda
Shepherd: https://www.shepherdjs.dev/
ChatGPT: https://chatgpt.com/
Claude: https://claude.ai
Warp: https://www.warp.dev/
Big Sky Dev Con: https://bigskydevcon.com/
Adam Argyle: https://x.com/argyleink/
HTMX: https://htmx.org/
Carson Gross: https://x.com/htmx_org/
Ruby: https://www.ruby-lang.org/
UPS: https://www.ups.com
Amazon: https://amazon.com
React Miami: https://www.reactmiami.com/
Typecraft: https://typecraft.dev/
Jason Lengstorf: https://x.com/jlengstorf
Web Dev Challenge: https://www.youtube.com/playlist?list=PLz8Iz-Fnk_eTkZvSNWXW_TKZ2UwVirT2M
Mux: https://www.mux.com/
Aaron Francis: https://x.com/aarondfrancis
Terminal Coffee: https://www.terminal.shop/
Syntax: https://syntax.fm
Sentry: https://Sentry.io/
David Cramer: https://x.com/zeeg
Girl Scouts: https://www.girlscouts.org/
Carlyle House: https://en.wikipedia.org/wiki/Carlyle_House
Ken Wheeler: https://x.com/ken_wheeler/
Whiskey Library: https://mwlpdx.com/
Jack Rose: https://www.jackrosediningsaloon.com/
Gumroad: https://gumroad.com
Supabase: https://supabase.com/
McDonald's: https://www.mcdonalds.com/
HashiCorp: https://www.hashicorp.com/
IBM: https://www.ibm.com/
Model X: https://www.tesla.com/modelx
Elon Musk: https://x.com/elonmusk
Rivian: https://rivian.com/
Why Women Kill: https://en.wikipedia.org/wiki/Why_Women_Kill
Lucy Liu: https://en.wikipedia.org/wiki/Lucy_Liu
American Psycho: https://en.wikipedia.org/wiki/American_Psycho_(film)
Paramount Plus: https://www.paramountplus.com/
Yellowstone: https://en.wikipedia.org/wiki/Yellowstone_(American_TV_series)
1883: https://en.wikipedia.org/wiki/1883_(TV_series)
Faith Hill: https://en.wikipedia.org/wiki/Faith_Hill
Tim McGraw: https://en.wikipedia.org/wiki/Tim_McGraw
Game of Thrones: https://www.hbo.com/game-of-thrones

Connect with Chuck and Robbie

Robbie Wagner: https://x.com/RobbieTheWagner
Chuck Carpenter: https://x.com/CharlesWthe3rd

Subscribe and stay in touch

Website: https://whiskey.fm
Apple Podcasts: https://podcasts.apple.com/us/podcast/whiskey-web-and-whatnot/id1552776603
Spotify: https://open.spotify.com/show/19jiuHAqzeKnkleQUpZxDf
Overcast: https://overcast.fm/itunes1552776603
YouTube: https://www.youtube.com/@WhiskeyWebAndWhatnot

Whiskey Web and Whatnot Merch
Enjoying the podcast and want us to make more? Help support us by picking up some of our fresh merch at https://whiskey.fund.
See Privacy Policy at https://art19.com/privacy and California Privacy Notice at https://art19.com/privacy#do-not-sell-my-info.</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://art19.com/shows/whiskey-web-and-whatnot</guid>
      <enclosure url="https://rss.art19.com/episodes/9c513363-4c77-482e-898b-270fd8d986b8.mp3?rss_browser=BAhJIg9yc3MtcGFyc2VyBjoGRVQ%3D--42d668516e215326a0c0e36404173d504b339a70" type="audio/mpeg" length="0"/>
      <itunes:author>Whiskey Web and Whatnot: Web Development, Neat</itunes:author>
      <itunes:summary>This week, Robbie and Chuck talk about the unintended chaos of “move fast and break things” in both software and startups. From Riverside glitches to Tesla’s overengineered wipers, they explore how updates can derail otherwise stable experiences. They unpack the economics of getting laid off, the pressure to build a personal brand in tech, and the strange fate of dev tools. Plus, Robbie shares his latest app ideas.
In this episode:

(00:00) - Intro
(00:36) - When updates break what worked
(07:30) - Are devs prioritizing personal brands?
(10:22) - The strange economics of getting laid off
(15:48) - Is GitLab trash?
(17:34) - Robbie's ADHD app and vibe coding plans
(21:14) - Debt, 401k, and emergency funds
(22:39) - Prepping for Big Sky Dev Con
(25:35) - UPS shipping woes
(31:19) - React Miami and difficulties taking a podcast on the road
(36:07) - Whiskey + Girl Scout cookies (and other pairings)
(41:14) - Should open source have a franchise model?
(42:37) - Work, paternity leave, and the IBM acquisition
(44:24) - Tesla shopping for a family of five
(48:17) - Movies and TV

Links

Riverside: https://riverside.fm/
Tesla: https://www.tesla.com/
Arc: https://arc.net/
Silicon Valley: https://en.wikipedia.org/wiki/Silicon_Valley_(TV_series)
Chrome: https://www.google.com/chrome/
Shark Tank: https://en.wikipedia.org/wiki/Shark_Tank
GitHub: https://github.com
Microsoft: https://www.microsoft.com/
Typescript: https://www.typescriptlang.org/
Rust: https://www.rust-lang.org/
VS Code: https://code.visualstudio.com/
OpenAI: https://openai.com
Cursor: https://www.cursor.com/
Windsurf: https://windsurf.ai/
Copilot: https://github.com/features/copilot
Deno: https://deno.com/
Node: https://nodejs.org/
GitLab: https://gitlab.com/
Bitbucket: https://bitbucket.org/
Fresca: https://www.coca-cola.com/us/en/brands/fresca-sparkling-soda
Shepherd: https://www.shepherdjs.dev/
ChatGPT: https://chatgpt.com/
Claude: https://claude.ai
Warp: https://www.warp.dev/
Big Sky Dev Con: https://bigskydevcon.com/
Adam Argyle: https://x.com/argyleink/
HTMX: https://htmx.org/
Carson Gross: https://x.com/htmx_org/
Ruby: https://www.ruby-lang.org/
UPS: https://www.ups.com
Amazon: https://amazon.com
React Miami: https://www.reactmiami.com/
Typecraft: https://typecraft.dev/
Jason Lengstorf: https://x.com/jlengstorf
Web Dev Challenge: https://www.youtube.com/playlist?list=PLz8Iz-Fnk_eTkZvSNWXW_TKZ2UwVirT2M
Mux: https://www.mux.com/
Aaron Francis: https://x.com/aarondfrancis
Terminal Coffee: https://www.terminal.shop/
Syntax: https://syntax.fm
Sentry: https://Sentry.io/
David Cramer: https://x.com/zeeg
Girl Scouts: https://www.girlscouts.org/
Carlyle House: https://en.wikipedia.org/wiki/Carlyle_House
Ken Wheeler: https://x.com/ken_wheeler/
Whiskey Library: https://mwlpdx.com/
Jack Rose: https://www.jackrosediningsaloon.com/
Gumroad: https://gumroad.com
Supabase: https://supabase.com/
McDonald's: https://www.mcdonalds.com/
HashiCorp: https://www.hashicorp.com/
IBM: https://www.ibm.com/
Model X: https://www.tesla.com/modelx
Elon Musk: https://x.com/elonmusk
Rivian: https://rivian.com/
Why Women Kill: https://en.wikipedia.org/wiki/Why_Women_Kill
Lucy Liu: https://en.wikipedia.org/wiki/Lucy_Liu
American Psycho: https://en.wikipedia.org/wiki/American_Psycho_(film)
Paramount Plus: https://www.paramountplus.com/
Yellowstone: https://en.wikipedia.org/wiki/Yellowstone_(American_TV_series)
1883: https://en.wikipedia.org/wiki/1883_(TV_series)
Faith Hill: https://en.wikipedia.org/wiki/Faith_Hill
Tim McGraw: https://en.wikipedia.org/wiki/Tim_McGraw
Game of Thrones: https://www.hbo.com/game-of-thrones

Connect with Chuck and Robbie

Robbie Wagner: https://x.com/RobbieTheWagner
Chuck Carpenter: https://x.com/CharlesWthe3rd

Subscribe and stay in touch

Website: https://whiskey.fm
Apple Podcasts: https://podcasts.apple.com/us/podcast/whiskey-web-and-whatnot/id1552776603
Spotify: https://open.spotify.com/show/19jiuHAqzeKnkleQUpZxDf
Overcast: https://overcast.fm/itunes1552776603
YouTube: https://www.youtube.com/@WhiskeyWebAndWhatnot

Whiskey Web and Whatnot Merch
Enjoying the podcast and want us to make more? Help support us by picking up some of our fresh merch at https://whiskey.fund.
See Privacy Policy at https://art19.com/privacy and California Privacy Notice at https://art19.com/privacy#do-not-sell-my-info.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>What Sets the Best Autonomous Coding Agents Apart?</title>
      <link>https://www.thisdot.co/blog/what-sets-the-best-autonomous-coding-agents-apart</link>
      <description>Must-have Features of Coding Agents
Autonomous coding agents are no longer experimental, they are becoming an integral part of modern development workflows, redefining how software is built and maintained.  As models become more capable, agents have become easier to produce, leading to an explosion of options with varying depth and utility. Drawing insights from our experience using many agents, let's delve into the features that you'll absolutely want to get the best results.
1. Customizable System Prompts
Custom agent modes, or roles, allow engineers to tailor the outputs to the desired results of their task. For instance, an agent can be set to operate in a &quot;planning mode&quot; focused on outlining development steps and gathering requirements, a &quot;coding mode&quot; optimized for generating and testing code, or a &quot;documentation mode&quot; emphasizing clarity and completeness of written artifacts. You might start with the off-the-shelf planning prompt, but you'll quickly want your own tailored version. Regardless of which modes are included out of the box, the ability to customize and extend them is critical. Agents must adapt to your unique workflows and prioritize what's important to your project. Without this flexibility, even well-designed defaults can fall short in real-world use.
Engineers have preferences, and projects contain existing work. The best agents offer ways to communicate these preferences and decisions effectively. For example, 'pnpm' instead of 'npm' for package management, requiring the agent to seek root causes rather than offer temporary workarounds, or mandating that tests and linting must pass before a task is marked complete. Rules are a layer of control to accomplish this. Rules reinforce technical standards but also shape agent behavior to reflect project priorities and cultural norms. They inform the agent across contexts, think constraints, preferences, or directives that apply regardless of the task. Rules can encode things like style guidelines, risk tolerances, or communication boundaries. By shaping how the agent reasons and responds, rules ensure consistent alignment with desired outcomes. 
Roo code is an agent that makes great use of custom modes, and rules are ubiquitous across coding agents. These features form a meta-agent framework that allows engineers to construct the most effective agent for their unique project and workflow details.
2. Usage-based Pricing
The best agents provide as much relevant information as possible to the model. They give transparency and control over what information is sent. This allows engineers to leverage their knowledge of the project to improve results. Being liberal with relevant information to the models is more expensive however, it also significantly improves results. 
The pricing model of some agents prioritizes fixed, predictable costs that include model fees. This creates an incentive to minimize the amount of information sent to the model in order to control costs. To get the most out of these tools, you’ve got to get the most out of models, which typically implies usage-based pricing. 
3. Autonomous Workflows
The way we accomplish work has phases. For example, creating tests and then making them pass, creating diagrams or plans, or reviewing work before submitting PRs. The best agents have mechanisms to facilitate these phases in an autonomous way. For the best results, each phase should have full use of a context window without watering down the main session's context. This should leverage your custom modes, which excel at each phase of your workflow.
4. Working in the Background
The best agents are more effective at producing desired results and thus are able to be more autonomous. As agents become more autonomous, the ability to work in the background or work on multiple tasks at once becomes increasingly necessary to unlock their full potential. Agents that leverage local or cloud containers to perform work independently of IDEs or working copies on an engineer's machine further increase their utility. This allows engineers to focus on drafting plans and reviewing proposed changes, ultimately to work toward managing multiple tasks at once, overseeing their agent-powered workflows as if guiding a team.
5. Integrations with your Tools
The Model Context Protocol (MCP) serves as a standardized interface, allowing agents to interact with your tools and data sources. The best agents seamlessly integrate with the platforms that engineers rely on, such as Confluence for documentation, Jira for tasks, and GitHub for source control and pull requests.
These integrations ensure the agent can participate meaningfully across the full software development lifecycle.
6. Support for Multiple Model Providers
Reliance on a single AI provider can be limiting. Top-tier agents support multiple providers, allowing teams to choose the best models for specific tasks. This flexibility enhances performance, the ability to use the latest and greatest, and also safeguards against potential downtimes or vendor-specific issues.
Final Thoughts
Selecting the right autonomous coding agent is a strategic decision. By prioritizing the features mentioned, technology leaders can adopt agents that can be tuned for their team's success. Tuning agents to projects and teams takes time, as does configuring the plumbing to integrate well with other systems. However, unlocking massive productivity gains is worth the squeeze. Models will become better and better, and the best agents capitalize on these improvements with little to no added effort. Set your organization and teams up to tap into the power of AI-enhanced engineering, and be more effective and more competitive.</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://www.thisdot.co/blog/what-sets-the-best-autonomous-coding-agents-apart</guid>
      <itunes:author>This Dot Labs RSS feed</itunes:author>
      <itunes:summary>Must-have Features of Coding Agents
Autonomous coding agents are no longer experimental, they are becoming an integral part of modern development workflows, redefining how software is built and maintained.  As models become more capable, agents have become easier to produce, leading to an explosion of options with varying depth and utility. Drawing insights from our experience using many agents, let's delve into the features that you'll absolutely want to get the best results.
1. Customizable System Prompts
Custom agent modes, or roles, allow engineers to tailor the outputs to the desired results of their task. For instance, an agent can be set to operate in a &quot;planning mode&quot; focused on outlining development steps and gathering requirements, a &quot;coding mode&quot; optimized for generating and testing code, or a &quot;documentation mode&quot; emphasizing clarity and completeness of written artifacts. You might start with the off-the-shelf planning prompt, but you'll quickly want your own tailored version. Regardless of which modes are included out of the box, the ability to customize and extend them is critical. Agents must adapt to your unique workflows and prioritize what's important to your project. Without this flexibility, even well-designed defaults can fall short in real-world use.
Engineers have preferences, and projects contain existing work. The best agents offer ways to communicate these preferences and decisions effectively. For example, 'pnpm' instead of 'npm' for package management, requiring the agent to seek root causes rather than offer temporary workarounds, or mandating that tests and linting must pass before a task is marked complete. Rules are a layer of control to accomplish this. Rules reinforce technical standards but also shape agent behavior to reflect project priorities and cultural norms. They inform the agent across contexts, think constraints, preferences, or directives that apply regardless of the task. Rules can encode things like style guidelines, risk tolerances, or communication boundaries. By shaping how the agent reasons and responds, rules ensure consistent alignment with desired outcomes. 
Roo code is an agent that makes great use of custom modes, and rules are ubiquitous across coding agents. These features form a meta-agent framework that allows engineers to construct the most effective agent for their unique project and workflow details.
2. Usage-based Pricing
The best agents provide as much relevant information as possible to the model. They give transparency and control over what information is sent. This allows engineers to leverage their knowledge of the project to improve results. Being liberal with relevant information to the models is more expensive however, it also significantly improves results. 
The pricing model of some agents prioritizes fixed, predictable costs that include model fees. This creates an incentive to minimize the amount of information sent to the model in order to control costs. To get the most out of these tools, you’ve got to get the most out of models, which typically implies usage-based pricing. 
3. Autonomous Workflows
The way we accomplish work has phases. For example, creating tests and then making them pass, creating diagrams or plans, or reviewing work before submitting PRs. The best agents have mechanisms to facilitate these phases in an autonomous way. For the best results, each phase should have full use of a context window without watering down the main session's context. This should leverage your custom modes, which excel at each phase of your workflow.
4. Working in the Background
The best agents are more effective at producing desired results and thus are able to be more autonomous. As agents become more autonomous, the ability to work in the background or work on multiple tasks at once becomes increasingly necessary to unlock their full potential. Agents that leverage local or cloud containers to perform work independently of IDEs or working copies on an engineer's machine further increase their utility. This allows engineers to focus on drafting plans and reviewing proposed changes, ultimately to work toward managing multiple tasks at once, overseeing their agent-powered workflows as if guiding a team.
5. Integrations with your Tools
The Model Context Protocol (MCP) serves as a standardized interface, allowing agents to interact with your tools and data sources. The best agents seamlessly integrate with the platforms that engineers rely on, such as Confluence for documentation, Jira for tasks, and GitHub for source control and pull requests.
These integrations ensure the agent can participate meaningfully across the full software development lifecycle.
6. Support for Multiple Model Providers
Reliance on a single AI provider can be limiting. Top-tier agents support multiple providers, allowing teams to choose the best models for specific tasks. This flexibility enhances performance, the ability to use the latest and greatest, and also safeguards against potential downtimes or vendor-specific issues.
Final Thoughts
Selecting the right autonomous coding agent is a strategic decision. By prioritizing the features mentioned, technology leaders can adopt agents that can be tuned for their team's success. Tuning agents to projects and teams takes time, as does configuring the plumbing to integrate well with other systems. However, unlocking massive productivity gains is worth the squeeze. Models will become better and better, and the best agents capitalize on these improvements with little to no added effort. Set your organization and teams up to tap into the power of AI-enhanced engineering, and be more effective and more competitive.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>667: Jen Simmons on Declarative Web Push, Form Control Styling, &amp; More</title>
      <link>https://shoptalkshow.com/667/</link>
      <description>Show Description
Jen Simmons stops by to talk about new CSS and Safari features like Form Control Styling, Declarative Web Push, Typography, contrast-color(), and more.
Listen on Website →
Guests
Jen Simmons
Guest's Main URL • Guest's Social

Safari &amp; WebKit Evangelist. Member of the CSS Working Group. Webmaster since 1996.
Links

webkit.org
Safari Release Notes
WCAG 2.0
contrast-color() function
APCA Color Contrast Tool
Color.js Release
Lea Verou’s page on color contrast
Declarative Web Push
Web Push for Web Apps on iOS and iPadOS
CSS Forms Level 1 Specification in Progress
&lt;input type=&quot;color&quot; colorspace=&quot;display-p3&quot; alpha&gt;
line-height units
Home | Open UI
text-wrap: pretty
margin-trim
CSS shape() function
Two Lines of Cross-Document View Transitions Code
Sponsors</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://shoptalkshow.com/667/</guid>
      <enclosure url="https://shoptalkshow.com/podcast-download/8236/667.mp3?nocache" type="audio/mpeg" length="0"/>
      <itunes:author>ShopTalk</itunes:author>
      <itunes:summary>Show Description
Jen Simmons stops by to talk about new CSS and Safari features like Form Control Styling, Declarative Web Push, Typography, contrast-color(), and more.
Listen on Website →
Guests
Jen Simmons
Guest's Main URL • Guest's Social

Safari &amp; WebKit Evangelist. Member of the CSS Working Group. Webmaster since 1996.
Links

webkit.org
Safari Release Notes
WCAG 2.0
contrast-color() function
APCA Color Contrast Tool
Color.js Release
Lea Verou’s page on color contrast
Declarative Web Push
Web Push for Web Apps on iOS and iPadOS
CSS Forms Level 1 Specification in Progress
&lt;input type=&quot;color&quot; colorspace=&quot;display-p3&quot; alpha&gt;
line-height units
Home | Open UI
text-wrap: pretty
margin-trim
CSS shape() function
Two Lines of Cross-Document View Transitions Code
Sponsors</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Episode 463: CTO w/ weak resume and I tried management and it was TERRIBLE</title>
      <link>https://softskills.audio/2025/06/02/episode-463-cto-w-weak-resume-and-i-tried-management-and-it-was-terrible/</link>
      <description>In this episode, Dave and Jamison answer these questions:
Albert Nonymous asks,
I am the CTO at a small (5 engineers) tech start-up with non-technical founders. I was their first full-time employee and as such have been able to fully form this company the way I want. I’ve worked here for 9 years now and own 10% of the company. I enjoy the tech and the job itself. The pay is ok, not crazy Silicon Valley numbers but pretty good for a country with free health care.
However, I started here while still in university. This is still the only job I’ve ever had. I am afraid that my resume will become less valuable the longer I stay here. I still keep up with current trends with hobby projects, but I’m worried that my resume will become less valuable if I ever need to look for another job.
Also, I don’t believe this company will succeed in the long run. I am still the only person on the board who knows how our tech even works and I have found myself slacking off quite a bit during the last year since having my first child. In the meantime, I also feel like I can’t just quit this job since that will almost certainly spell the end for this company and all its employees (some of which I count among my friends after all these years). What do I do? Am I overthinking things? Can I just keep working here until it eventually goes under? Or do I absolutely need to bite the bullet and pull the Jamison and Dave Time-Honoured Special™ and quit my job before I become totally un-hirable?
For much of my 9 years as a software engineer, I wanted to be a leader.  I just really enjoyed mentoring, training, improving workflows, working with stakeholders and co-ordinating on projects. Leadership seemed like a natural fit and so I was super psyched to be finally made a team leader last year.
It has been hell.
It has been like falling backwards out of a tree and hitting every branch on the way down, meanwhile it’s literally raining anvils and sabre toothed tigers. The constant pressure to have work lined up for the team and be able to report on the activities of the team at a moment’s notice is unbearable. I can’t stand being responsible for the delivery of other people’s work, writing up reports that no one reads or painstakingly de-noising pointless metrics. I dread having to pull eager young developers out of refactoring rabbit holes.
Fortunately, as I took this ‘promotion’ with no raise, I’ve easily been able to get myself busted back down to IC. Happy days 😎
The problem now is that I have no idea what to do with my career. My core experience is with dot net as a mid level engineer but honestly I’m what I would call a ‘hyphen’ shaped developer - I’ve seen and done a lot things but not to an expert level. Front end, back end, BI, and everything in between. That felt ok when I was aiming for leadership but now I feel lost. I honestly feel ready to go full goose farmer 🪿.
What do I do next?</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://softskills.audio/2025/06/02/episode-463-cto-w-weak-resume-and-i-tried-management-and-it-was-terrible/</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/download.softskills.audio/sse-463.mp3?source=rss" type="audio/mpeg" length="0"/>
      <itunes:author>Soft Skills Engineering</itunes:author>
      <itunes:summary>In this episode, Dave and Jamison answer these questions:
Albert Nonymous asks,
I am the CTO at a small (5 engineers) tech start-up with non-technical founders. I was their first full-time employee and as such have been able to fully form this company the way I want. I’ve worked here for 9 years now and own 10% of the company. I enjoy the tech and the job itself. The pay is ok, not crazy Silicon Valley numbers but pretty good for a country with free health care.
However, I started here while still in university. This is still the only job I’ve ever had. I am afraid that my resume will become less valuable the longer I stay here. I still keep up with current trends with hobby projects, but I’m worried that my resume will become less valuable if I ever need to look for another job.
Also, I don’t believe this company will succeed in the long run. I am still the only person on the board who knows how our tech even works and I have found myself slacking off quite a bit during the last year since having my first child. In the meantime, I also feel like I can’t just quit this job since that will almost certainly spell the end for this company and all its employees (some of which I count among my friends after all these years). What do I do? Am I overthinking things? Can I just keep working here until it eventually goes under? Or do I absolutely need to bite the bullet and pull the Jamison and Dave Time-Honoured Special™ and quit my job before I become totally un-hirable?
For much of my 9 years as a software engineer, I wanted to be a leader.  I just really enjoyed mentoring, training, improving workflows, working with stakeholders and co-ordinating on projects. Leadership seemed like a natural fit and so I was super psyched to be finally made a team leader last year.
It has been hell.
It has been like falling backwards out of a tree and hitting every branch on the way down, meanwhile it’s literally raining anvils and sabre toothed tigers. The constant pressure to have work lined up for the team and be able to report on the activities of the team at a moment’s notice is unbearable. I can’t stand being responsible for the delivery of other people’s work, writing up reports that no one reads or painstakingly de-noising pointless metrics. I dread having to pull eager young developers out of refactoring rabbit holes.
Fortunately, as I took this ‘promotion’ with no raise, I’ve easily been able to get myself busted back down to IC. Happy days 😎
The problem now is that I have no idea what to do with my career. My core experience is with dot net as a mid level engineer but honestly I’m what I would call a ‘hyphen’ shaped developer - I’ve seen and done a lot things but not to an expert level. Front end, back end, BI, and everything in between. That felt ok when I was aiming for leadership but now I feel lost. I honestly feel ready to go full goose farmer 🪿.
What do I do next?</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Zod v4: Prettier, Better, Faster, Smaller</title>
      <link>https://www.buzzsprout.com/2226499</link>
      <description>It’s been 4 years since TypeScript schema validation library Zod released v3, but the new v4 release makes it worth the wait. Expect faster parsing times across the board, built in error pretty-printing, and even a tree-shakeable API called Zod Mini for constrained environments like edge runtimes.
There’s a new npm-based CLI tool for managing and sharing AI rules across different editors and tools called vibe-rules. In addition to saving favorite prompts so they can be applied to any supported editor, vibe-rules can also automatically install prompts shared in a project’s NPM packages into an editor’s configuration. It’s early days yet, but a great idea to make prompts easier for anyone to use.
Angular v20 is out with some much anticipated highlights. Stabilized signal-based APIs, incremental hydration, custom Angular reporting directly in Chrome DevTools, GenAI development advancements, and, last but not least, a RFC for an official Angular mascot. Not to bias you, but we favor the pink, dice-shaped mascot around here.
In this episode:

1:10 - Zod v4
5:50 - vibe-rules
15:12 - Angular 20
27:03 - Remix v3
31:32 - Stack Overflow’s Annual Dev Survey
38:02 - Firefox and Temporal
39:15 - Bolt’s hackathon status

News:

Paige - Zod v4
Jack - vibe-rules
TJ - Angular 20

Lightning News:

Remix v3 updates
Firefox is the first browser to support Temporal (Temporal on MDN)
StackOverflow’s Annual Dev Survey is out now
Bolt’s hackathon starts

What Makes Us Happy this Week:

Paige - Annual Gloucestershire cheese rolling race and Wiki history
Jack - The Portland Pickles baseball game
TJ - StoryGraph and The God of the Woods

Thanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.

Front-end Fire website
Blue Collar Coder on YouTube
Blue Collar Coder on Discord
Reach out via email
Tweet at us on X @front_end_fire
Follow us on Bluesky @front-end-fire.com
Subscribe to our YouTube channel @Front-EndFirePodcast</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://www.buzzsprout.com/2226499</guid>
      <enclosure url="https://www.buzzsprout.com/2226499/episodes/17264441-zod-v4-prettier-better-faster-smaller.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Front-End Fire</itunes:author>
      <itunes:summary>It’s been 4 years since TypeScript schema validation library Zod released v3, but the new v4 release makes it worth the wait. Expect faster parsing times across the board, built in error pretty-printing, and even a tree-shakeable API called Zod Mini for constrained environments like edge runtimes.
There’s a new npm-based CLI tool for managing and sharing AI rules across different editors and tools called vibe-rules. In addition to saving favorite prompts so they can be applied to any supported editor, vibe-rules can also automatically install prompts shared in a project’s NPM packages into an editor’s configuration. It’s early days yet, but a great idea to make prompts easier for anyone to use.
Angular v20 is out with some much anticipated highlights. Stabilized signal-based APIs, incremental hydration, custom Angular reporting directly in Chrome DevTools, GenAI development advancements, and, last but not least, a RFC for an official Angular mascot. Not to bias you, but we favor the pink, dice-shaped mascot around here.
In this episode:

1:10 - Zod v4
5:50 - vibe-rules
15:12 - Angular 20
27:03 - Remix v3
31:32 - Stack Overflow’s Annual Dev Survey
38:02 - Firefox and Temporal
39:15 - Bolt’s hackathon status

News:

Paige - Zod v4
Jack - vibe-rules
TJ - Angular 20

Lightning News:

Remix v3 updates
Firefox is the first browser to support Temporal (Temporal on MDN)
StackOverflow’s Annual Dev Survey is out now
Bolt’s hackathon starts

What Makes Us Happy this Week:

Paige - Annual Gloucestershire cheese rolling race and Wiki history
Jack - The Portland Pickles baseball game
TJ - StoryGraph and The God of the Woods

Thanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.

Front-end Fire website
Blue Collar Coder on YouTube
Blue Collar Coder on Discord
Reach out via email
Tweet at us on X @front_end_fire
Follow us on Bluesky @front-end-fire.com
Subscribe to our YouTube channel @Front-EndFirePodcast</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Building AI Agents That Build AI Agents: Inside Chai.new</title>
      <link>https://podcasters.spotify.com/pod/show/modern-web/episodes/Building-AI-Agents-That-Build-AI-Agents-Inside-Chai-new-e33pvcm</link>
      <description>In this episode of the Modern Web Podcast, Rob Ocel, Danny Thompson, and Adam Rackis sit down with Ahmad Awais, CEO and founder of LangBase, to talk about agents, context, and the future of AI-assisted software development. Ahmad shares the origin story of Chai.new, an agent that builds agents, and why he believes context, not code, is the true value layer in the AI era. The group unpacks how &quot;vibe coding&quot; is reshaping who can build software, why Chai isn’t just another AI assistant, and how agents might evolve into personalized, production-grade tools for everyone, technical or not. Plus: Tailwind analogies, Stanford lectures, sports nutrition agents, and a CLI that went viral in a hospital.Key points from this episode:- Ahmad Awais explains that AI agents aren't magic; they're just a new paradigm for writing software. What makes them powerful is their ability to act autonomously with relevant context, not just generate text.- Chai.new helps developers (and non-developers) create purpose-built agents without needing deep ML expertise. It abstracts complex concepts like memory, retrieval, and orchestration into an approachable interface.- Ahmad emphasizes that the real opportunity lies in agents tailored to individual users and use cases. Personal agents with custom context outperform generic ones, much like small teams beat massive frameworks for specific problems.- Chai and LangBase aim to bring AI development to the millions of engineers who aren't AI researchers. With tools like Chai, you don’t need a PhD to build powerful, production-ready AI agents.Follow Ahmad Awais on Social MediaTwitter: https://x.com/MrAhmadAwaisLinkedin: https://www.linkedin.com/in/mrahmadawais/Sponsored by This Dot: thisdot.co</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/modern-web/episodes/Building-AI-Agents-That-Build-AI-Agents-Inside-Chai-new-e33pvcm</guid>
      <enclosure url="https://anchor.fm/s/f9191780/podcast/play/103660374/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-5-4%2F401575062-44100-2-8ada640559a51.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Modern Web</itunes:author>
      <itunes:summary>In this episode of the Modern Web Podcast, Rob Ocel, Danny Thompson, and Adam Rackis sit down with Ahmad Awais, CEO and founder of LangBase, to talk about agents, context, and the future of AI-assisted software development. Ahmad shares the origin story of Chai.new, an agent that builds agents, and why he believes context, not code, is the true value layer in the AI era. The group unpacks how &quot;vibe coding&quot; is reshaping who can build software, why Chai isn’t just another AI assistant, and how agents might evolve into personalized, production-grade tools for everyone, technical or not. Plus: Tailwind analogies, Stanford lectures, sports nutrition agents, and a CLI that went viral in a hospital.Key points from this episode:- Ahmad Awais explains that AI agents aren't magic; they're just a new paradigm for writing software. What makes them powerful is their ability to act autonomously with relevant context, not just generate text.- Chai.new helps developers (and non-developers) create purpose-built agents without needing deep ML expertise. It abstracts complex concepts like memory, retrieval, and orchestration into an approachable interface.- Ahmad emphasizes that the real opportunity lies in agents tailored to individual users and use cases. Personal agents with custom context outperform generic ones, much like small teams beat massive frameworks for specific problems.- Chai and LangBase aim to bring AI development to the millions of engineers who aren't AI researchers. With tools like Chai, you don’t need a PhD to build powerful, production-ready AI agents.Follow Ahmad Awais on Social MediaTwitter: https://x.com/MrAhmadAwaisLinkedin: https://www.linkedin.com/in/mrahmadawais/Sponsored by This Dot: thisdot.co</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Why you should build a sweaty startup instead of an indie SaaS - Flo Schirmer</title>
      <link>https://indiebites.com/129</link>
      <description>Today I’m talking with Flo Schirmer about &quot;sweaty startups&quot;, a term for old-fashioned, low-risk businesses that are often service based and unsexy. I’m talking window cleaning, car washing, self-storage, house moving and more. We’re going to discuss if you can do this as a side hustle, if you should do this over a regular software business, and what you need to do to get started with some ideas along the way.
Timestamps

00:00 Intro
01:38 What is a sweaty startup?
03:18 From window cleaning to home security
04:37 How to start a sweaty startup
06:41 Growth for a sweaty startup
07:26 Sweaty startup vs software - what is best for indie hackers?
08:45 Injecting a tech edge into old fashioned businesses
11:34 Examples of successful sweaty startup brands
13:58 Two free sweaty startup ideas
15:57 Recommendations

Recommendations

Book - $100m Leads
Podcast - My First Million
Indie Hacker - Alex Hormozi

My links

Twitter
Indie Bites Twitter
Indie Bites YouTube
Join the membership
Personal Website
2 Hour Podcast Course

Sponsor - EmailOctopus 🐙
EmailOctopus is an independently owned email marketing platform, built to support other small growing businesses. With a focus on affordability and ease of use, EmailOctopus contains all of the features you need to reach and grow your audience. You can start today, with their industry leading free plan where you can contact up to 2,500 subscribers without paying a penny.</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://indiebites.com/129</guid>
      <enclosure url="https://media.transistor.fm/c2cfbb76/733ebd84.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Indie Bites</itunes:author>
      <itunes:summary>Today I’m talking with Flo Schirmer about &quot;sweaty startups&quot;, a term for old-fashioned, low-risk businesses that are often service based and unsexy. I’m talking window cleaning, car washing, self-storage, house moving and more. We’re going to discuss if you can do this as a side hustle, if you should do this over a regular software business, and what you need to do to get started with some ideas along the way.
Timestamps

00:00 Intro
01:38 What is a sweaty startup?
03:18 From window cleaning to home security
04:37 How to start a sweaty startup
06:41 Growth for a sweaty startup
07:26 Sweaty startup vs software - what is best for indie hackers?
08:45 Injecting a tech edge into old fashioned businesses
11:34 Examples of successful sweaty startup brands
13:58 Two free sweaty startup ideas
15:57 Recommendations

Recommendations

Book - $100m Leads
Podcast - My First Million
Indie Hacker - Alex Hormozi

My links

Twitter
Indie Bites Twitter
Indie Bites YouTube
Join the membership
Personal Website
2 Hour Podcast Course

Sponsor - EmailOctopus 🐙
EmailOctopus is an independently owned email marketing platform, built to support other small growing businesses. With a focus on affordability and ease of use, EmailOctopus contains all of the features you need to reach and grow your audience. You can start today, with their industry leading free plan where you can contact up to 2,500 subscribers without paying a penny.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Peter Pistorius - Redwood SDK</title>
      <link>https://podcasters.spotify.com/pod/show/devtoolsfm/episodes/Peter-Pistorius---Redwood-SDK-e33lqf6</link>
      <description>This week we talk to Peter Pistorius, the man currently at the helm of Redwood. Redwood has undergone a lot of changes since it was first announced, pivoting to a serverless framework that leans into React Server Components. Peter has a grand vision for Redwood and the advent of personal software, and we're excited to hear about it.

https://rwsdk.com/


Episode sponsored By WorkOS (https://workos.com)
Become a paid subscriber our patreon, spotify, or apple podcasts for the full episode.

https://www.patreon.com/devtoolsfm
https://podcasters.spotify.com/pod/show/devtoolsfm/subscribe
https://podcasts.apple.com/us/podcast/devtools-fm/id1566647758
https://www.youtube.com/@devtoolsfm/membership</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/devtoolsfm/episodes/Peter-Pistorius---Redwood-SDK-e33lqf6</guid>
      <enclosure url="https://anchor.fm/s/dd6922b4/podcast/play/103524262/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-5-2%2F401400607-44100-2-b7ce6572894e6.m4a" type="audio/mpeg" length="0"/>
      <itunes:author>devtools.fm: Developer Tools, Open Source, Software Development</itunes:author>
      <itunes:summary>This week we talk to Peter Pistorius, the man currently at the helm of Redwood. Redwood has undergone a lot of changes since it was first announced, pivoting to a serverless framework that leans into React Server Components. Peter has a grand vision for Redwood and the advent of personal software, and we're excited to hear about it.

https://rwsdk.com/


Episode sponsored By WorkOS (https://workos.com)
Become a paid subscriber our patreon, spotify, or apple podcasts for the full episode.

https://www.patreon.com/devtoolsfm
https://podcasters.spotify.com/pod/show/devtoolsfm/subscribe
https://podcasts.apple.com/us/podcast/devtools-fm/id1566647758
https://www.youtube.com/@devtoolsfm/membership</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>213- Tecnologías que se creen muertas, pero siguen vivas en el 2025</title>
      <link>https://podcasters.spotify.com/pod/show/fernando-her85/episodes/213--Tecnologias-que-se-creen-muertas--pero-siguen-vivas-en-el-2025-e33svcj</link>
      <description>En este episodio repasamos algunas tecnologías que suelen considerarse en desuso, pero que todavía se utilizan en muchos entornos. Hablamos sobre los motivos por los que siguen vigentes y qué factores influyen en su permanencia en proyectos reales.</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/fernando-her85/episodes/213--Tecnologias-que-se-creen-muertas--pero-siguen-vivas-en-el-2025-e33svcj</guid>
      <enclosure url="https://anchor.fm/s/4c227378/podcast/play/103758675/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-5-6%2Ffe8cb272-15f4-2e89-2e8c-77f0e9ccecda.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>DevTalles</itunes:author>
      <itunes:summary>En este episodio repasamos algunas tecnologías que suelen considerarse en desuso, pero que todavía se utilizan en muchos entornos. Hablamos sobre los motivos por los que siguen vigentes y qué factores influyen en su permanencia en proyectos reales.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>212-Angular 20</title>
      <link>https://podcasters.spotify.com/pod/show/fernando-her85/episodes/212-Angular-20-e33hmk2</link>
      <description>En esta versión hablaremos un poco de las novedades de la versión 20 de Angular que fue liberada el 28 de mayo de 2025</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/fernando-her85/episodes/212-Angular-20-e33hmk2</guid>
      <enclosure url="https://anchor.fm/s/4c227378/podcast/play/103389250/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-4-29%2Fd98d7a08-bcaa-3855-1e70-c3913816f173.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>DevTalles</itunes:author>
      <itunes:summary>En esta versión hablaremos un poco de las novedades de la versión 20 de Angular que fue liberada el 28 de mayo de 2025</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Server functions don't exist with Jack Herrington</title>
      <link>http://podrocket.logrocket.com/server-functions-dont-exist-jack-herrington</link>
      <description>Jack Herrington, podcaster, software engineer, writer and YouTuber, joins the pod to uncover the truth behind server functions and why they don’t actually exist in the web platform. We dive into the magic behind frameworks like Next.js, TanStack Start, and Remix, breaking down how server functions work, what they simplify, what they hide, and what developers need to know to build smarter, faster, and more secure web apps.
Links
YouTube: https://www.youtube.com/@jherr
Twitter: https://x.com/jherr
Github: https://github.com/jherr
ProNextJS: https://www.pronextjs.dev
Discord: https://discord.com/invite/KRVwpJUG6p
LinkedIn: https://www.linkedin.com/in/jherr
Website: https://jackherrington.com
Resources
Server Functions Don't Exist (It Matters) (https://www.youtube.com/watch?v=FPJvlhee04E)
We want to hear from you!
How did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?
Let us know by sending an email to our producer, Em, at emily.kochanek@logrocket.com (mailto:emily.kochanek@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).
Follow us. Get free stickers.
Follow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!
What does LogRocket do?
LogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr) Special Guest: Jack Herrington.</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>http://podrocket.logrocket.com/server-functions-dont-exist-jack-herrington</guid>
      <enclosure url="https://chrt.fm/track/7F1212/aphid.fireside.fm/d/1437767933/3911462c-bca2-48c2-9103-610ba304c673/afef67b1-0487-4a36-b247-a38f5bdd4f22.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>PodRocket - A web development podcast from LogRocket</itunes:author>
      <itunes:summary>Jack Herrington, podcaster, software engineer, writer and YouTuber, joins the pod to uncover the truth behind server functions and why they don’t actually exist in the web platform. We dive into the magic behind frameworks like Next.js, TanStack Start, and Remix, breaking down how server functions work, what they simplify, what they hide, and what developers need to know to build smarter, faster, and more secure web apps.
Links
YouTube: https://www.youtube.com/@jherr
Twitter: https://x.com/jherr
Github: https://github.com/jherr
ProNextJS: https://www.pronextjs.dev
Discord: https://discord.com/invite/KRVwpJUG6p
LinkedIn: https://www.linkedin.com/in/jherr
Website: https://jackherrington.com
Resources
Server Functions Don't Exist (It Matters) (https://www.youtube.com/watch?v=FPJvlhee04E)
We want to hear from you!
How did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?
Let us know by sending an email to our producer, Em, at emily.kochanek@logrocket.com (mailto:emily.kochanek@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).
Follow us. Get free stickers.
Follow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!
What does LogRocket do?
LogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr) Special Guest: Jack Herrington.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Migrating a Legacy JavaScript Codebase to TypeScript - JSJ 680</title>
      <link>https://www.spreaker.com/episode/migrating-a-legacy-javascript-codebase-to-typescript-jsj-680--66408262</link>
      <description>In this episode, Dan and I (Steve) dove deep into what turned out to be a surprisingly complex, yet incredibly insightful topic: gradually migrating a massive legacy JavaScript project over to TypeScript. We're talking about nearly 1,000 JS files, 70,000+ lines of code, and years of developer history—all transitioning carefully to a typed, modern future.
Dan walked us through how he started by setting up the project for success before converting even one file—getting CI/CD ready, setting up tsconfig.json, sorting out test dependencies, dealing with mock leaks, and even grappling with quirks between VS Code and WebStorm debugging.
We talked tools (like TS-ESLint, concurrently, and ts-node), why strict typing actually uncovered real bugs (and made the code better!), and why it’s crucial not to touch any .js files until your TypeScript setup is rock solid.
Key Takeaways:
Gradual migration is 100% possible—and often better—than ripping the bandaid off.
TypeScript can and will catch bugs hiding in your JavaScript. Be prepared!
Use VS Code extensions or TS-Node to support your devs’ tooling preferences.
Don't underestimate the setup phase—it’s the foundation of long-term success.
Start small: Dan's team converted just one file at first to test the whole pipeline.
If you’re sitting on a legacy JS project and dreaming of TypeScript, this episode is your blueprint—and your warning sign.
Become a supporter of this podcast: https://www.spreaker.com/podcast/javascript-jabber--6102064/support.</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://www.spreaker.com/episode/migrating-a-legacy-javascript-codebase-to-typescript-jsj-680--66408262</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/api.spreaker.com/download/episode/66408262/jsj_680.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>JavaScript Jabber</itunes:author>
      <itunes:summary>In this episode, Dan and I (Steve) dove deep into what turned out to be a surprisingly complex, yet incredibly insightful topic: gradually migrating a massive legacy JavaScript project over to TypeScript. We're talking about nearly 1,000 JS files, 70,000+ lines of code, and years of developer history—all transitioning carefully to a typed, modern future.
Dan walked us through how he started by setting up the project for success before converting even one file—getting CI/CD ready, setting up tsconfig.json, sorting out test dependencies, dealing with mock leaks, and even grappling with quirks between VS Code and WebStorm debugging.
We talked tools (like TS-ESLint, concurrently, and ts-node), why strict typing actually uncovered real bugs (and made the code better!), and why it’s crucial not to touch any .js files until your TypeScript setup is rock solid.
Key Takeaways:
Gradual migration is 100% possible—and often better—than ripping the bandaid off.
TypeScript can and will catch bugs hiding in your JavaScript. Be prepared!
Use VS Code extensions or TS-Node to support your devs’ tooling preferences.
Don't underestimate the setup phase—it’s the foundation of long-term success.
Start small: Dan's team converted just one file at first to test the whole pipeline.
If you’re sitting on a legacy JS project and dreaming of TypeScript, this episode is your blueprint—and your warning sign.
Become a supporter of this podcast: https://www.spreaker.com/podcast/javascript-jabber--6102064/support.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>The History of Nuxt and NuxtLabs (with Sébastien Chopin)</title>
      <link>https://share.transistor.fm/s/aa3553d0</link>
      <description>Join Alex and Michael with special guest Sébastien Chopin, creator of Nuxt.js and CEO of NuxtLabs, to learn more about the origins and evolution of the Vue-based meta framework. Sébastien shares valuable lessons from open source, how he came to create Nuxt.js in the first place and which challenges came with it.
In the second part of the episode, they cover Sébastien's company NuxtLabs - from its inception over to taking Venture Capital and products, such as NuxtHub or Nuxt UI Pro.
Eventually, the NuxtLabs CEO also outlines how they handle sponsorships of maintainers, and what the future holds for Nuxt and NuxtLabs.
Enjoy the Episode!

Our Guest
Sébastien Chopin

NuxtLabs
Nuxt
Personal Website
Bluesky


Chapters



(00:00) - Welcome to DejaVue
(01:16) - How did you get into programming?
(04:45) - The birth of Nuxt.js
(07:43) - The Elevator Pitch for Nuxt
(10:16) - When not to use Nuxt
(11:20) - Nuxt as Multi Bundler Framework
(12:37) - How does Nuxt scale (in Enterprise)?
(16:04) - Lessons Learned from building Nuxt
(19:47) - How to compare frameworks fairly?
(23:20) - Frameworks converging
(24:22) - Nuxt.js supporting React?
(29:06) - The creation of NuxtLabs
(33:50) - Products of NuxtLabs
(37:11) - Why going all in on Cloudflare for NuxtHub 
(41:50) - Vite Environment API
(45:34) - The difference between Nuxt and NuxtLabs
(51:56) - Is Nuxt a VC-backed framework?
(53:51) - Sponsoring Core Maintainers
(56:07) - Freemium in Nuxt
(57:06) - Sneak Peek of the NuxtLabs Roadmap
(59:51) - Where can people find you?


Links and Resources


Nuxt
Intro to Nuxt Layers
Nitro
Reactivue
inclusion-vapor
DejaVue #E044 - Our Predictions for Vue and Nuxt in 2025 (with Daniel Roe)
Volta
Nuxt UI *
Nuxt Governance
Nuxt Studio
NuxtHub
Laravel Vapor
Cloudflare
DejaVue #E051 - Vite Inside Out (with Matias &quot;Patak&quot; Capeletto)
Strapi

Your Hosts

Michael Thiessen


Twitter
YouTube
Website


Alexander Lichter


Bluesky
YouTube
Website

---
Links marked with * are affiliate links. We get a small commission when you register for the service through our link. This helps us to keep the podcast running. We only include affiliate links for services mentioned in the episode or that we use ourselves.</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://share.transistor.fm/s/aa3553d0</guid>
      <enclosure url="https://media.transistor.fm/aa3553d0/f1af316c.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>DejaVue</itunes:author>
      <itunes:summary>Join Alex and Michael with special guest Sébastien Chopin, creator of Nuxt.js and CEO of NuxtLabs, to learn more about the origins and evolution of the Vue-based meta framework. Sébastien shares valuable lessons from open source, how he came to create Nuxt.js in the first place and which challenges came with it.
In the second part of the episode, they cover Sébastien's company NuxtLabs - from its inception over to taking Venture Capital and products, such as NuxtHub or Nuxt UI Pro.
Eventually, the NuxtLabs CEO also outlines how they handle sponsorships of maintainers, and what the future holds for Nuxt and NuxtLabs.
Enjoy the Episode!

Our Guest
Sébastien Chopin

NuxtLabs
Nuxt
Personal Website
Bluesky


Chapters



(00:00) - Welcome to DejaVue
(01:16) - How did you get into programming?
(04:45) - The birth of Nuxt.js
(07:43) - The Elevator Pitch for Nuxt
(10:16) - When not to use Nuxt
(11:20) - Nuxt as Multi Bundler Framework
(12:37) - How does Nuxt scale (in Enterprise)?
(16:04) - Lessons Learned from building Nuxt
(19:47) - How to compare frameworks fairly?
(23:20) - Frameworks converging
(24:22) - Nuxt.js supporting React?
(29:06) - The creation of NuxtLabs
(33:50) - Products of NuxtLabs
(37:11) - Why going all in on Cloudflare for NuxtHub 
(41:50) - Vite Environment API
(45:34) - The difference between Nuxt and NuxtLabs
(51:56) - Is Nuxt a VC-backed framework?
(53:51) - Sponsoring Core Maintainers
(56:07) - Freemium in Nuxt
(57:06) - Sneak Peek of the NuxtLabs Roadmap
(59:51) - Where can people find you?


Links and Resources


Nuxt
Intro to Nuxt Layers
Nitro
Reactivue
inclusion-vapor
DejaVue #E044 - Our Predictions for Vue and Nuxt in 2025 (with Daniel Roe)
Volta
Nuxt UI *
Nuxt Governance
Nuxt Studio
NuxtHub
Laravel Vapor
Cloudflare
DejaVue #E051 - Vite Inside Out (with Matias &quot;Patak&quot; Capeletto)
Strapi

Your Hosts

Michael Thiessen


Twitter
YouTube
Website


Alexander Lichter


Bluesky
YouTube
Website

---
Links marked with * are affiliate links. We get a small commission when you register for the service through our link. This helps us to keep the podcast running. We only include affiliate links for services mentioned in the episode or that we use ourselves.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>908: Storybook Has Evolved w/ Jeppe Reinhold</title>
      <link>https://syntax.fm/908</link>
      <description>Wes and Scott talk with Jeppe Reinhold about Storybook 9’s powerful new features—including drastically reduced bloat, seamless Vite integration, and next-level component testing. They dive into visual regression testing, accessibility, performance, and best practices for writing robust, isolated UI components developers can actually enjoy testing and documenting.
 Show Notes
  
 00:00 Welcome to Syntax!
  01:40 What is Storybook?
  03:48 How Storybook makes component design easier
  04:41 Vite integration and compatibility with other tools 
  Vite
  webpack
  RSpack
  
  06:50 Storybook’s significantly smaller bundle size 
  e18e
  polka
  
  13:31 Upgrading to Storybook 9
  17:34 Testing components with Storybook 
  Vitest
  
  19:51 How do you write a component “story”?
  24:29 Brought to you by Sentry.io
  24:54 How visual testing works
  28:38 How Storybook makes money
  29:33 Best practices for component design
  32:24 Mocking and testing strategies
  34:49 Accessibility testing
  40:51 Add-ons and future features
  44:43 Storybook’s documentation
  46:33 Sick Picks + Shameless plugs
  
 Sick Picks
  
 Jeppe: JBL Boombox 3 Wi-Fi
  
 Shameless Plugs
  
 Jeppe: chromatic
  
 Hit us up on Socials!
  Syntax: X Instagram Tiktok LinkedIn Threads
  Wes: X Instagram Tiktok LinkedIn Threads
  Scott: X Instagram Tiktok LinkedIn Threads
  Randy: X Instagram YouTube Threads</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://syntax.fm/908</guid>
      <enclosure url="https://traffic.libsyn.com/secure/syntax/Syntax_-_908.mp3?dest-id=532671" type="audio/mpeg" length="0"/>
      <itunes:author>Syntax - Tasty Web Development Treats</itunes:author>
      <itunes:summary>Wes and Scott talk with Jeppe Reinhold about Storybook 9’s powerful new features—including drastically reduced bloat, seamless Vite integration, and next-level component testing. They dive into visual regression testing, accessibility, performance, and best practices for writing robust, isolated UI components developers can actually enjoy testing and documenting.
 Show Notes
  
 00:00 Welcome to Syntax!
  01:40 What is Storybook?
  03:48 How Storybook makes component design easier
  04:41 Vite integration and compatibility with other tools 
  Vite
  webpack
  RSpack
  
  06:50 Storybook’s significantly smaller bundle size 
  e18e
  polka
  
  13:31 Upgrading to Storybook 9
  17:34 Testing components with Storybook 
  Vitest
  
  19:51 How do you write a component “story”?
  24:29 Brought to you by Sentry.io
  24:54 How visual testing works
  28:38 How Storybook makes money
  29:33 Best practices for component design
  32:24 Mocking and testing strategies
  34:49 Accessibility testing
  40:51 Add-ons and future features
  44:43 Storybook’s documentation
  46:33 Sick Picks + Shameless plugs
  
 Sick Picks
  
 Jeppe: JBL Boombox 3 Wi-Fi
  
 Shameless Plugs
  
 Jeppe: chromatic
  
 Hit us up on Socials!
  Syntax: X Instagram Tiktok LinkedIn Threads
  Wes: X Instagram Tiktok LinkedIn Threads
  Scott: X Instagram Tiktok LinkedIn Threads
  Randy: X Instagram YouTube Threads</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>907: Wes’ New Site: Gatsby → React Server Components</title>
      <link>https://syntax.fm/907</link>
      <description>Wes rebuilt his personal site from Gatsby to a modern stack using Waku, React Server Components, and Cloudflare Workers — all while keeping the same design. Scott and Wes break down the pain points with Next.js, MDX, image handling, caching, and the custom setup that now powers a blazing-fast blog.
 Show Notes
  
 00:00 Welcome to Syntax!
  01:03 Barcelona Conference.
  04:09 Brought to you by Sentry.io.
  04:33 Existing stack, goodbye to Gatsby.
  06:11 New stack, the goals for moving.
  06:56 So what is the new stack? 
  08:32 Challenges with NextJS.
  08:58 Problems with plugins.
  09:30 Problems with dynamic imports.
  10:21 Problems with Cloudflare deployment.
  
  12:37 Landing on Waku.
  13:59 Hot Tips functionality updates.
  16:30 Blog Posts + JavaScript Notes.
  17:09 Moving from Gatsby.
  19:03 Page speeds. 
  19:29 Removing nav resizing process.
  21:03 Writing custom MDX plugins.
  
  23:28 Hosting. 
  24:08 Why is the build so fast?
  
  28:01 Pricing.
  32:25 Caching.
  34:49 Migration errors.
  36:37 CSS.
  
 Hit us up on Socials!
  Syntax: X Instagram Tiktok LinkedIn Threads
  Wes: X Instagram Tiktok LinkedIn Threads
  Scott: X Instagram Tiktok LinkedIn Threads
  Randy: X Instagram YouTube Threads</description>
      <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://syntax.fm/907</guid>
      <enclosure url="https://traffic.libsyn.com/secure/syntax/Syntax_-_907.mp3?dest-id=532671" type="audio/mpeg" length="0"/>
      <itunes:author>Syntax - Tasty Web Development Treats</itunes:author>
      <itunes:summary>Wes rebuilt his personal site from Gatsby to a modern stack using Waku, React Server Components, and Cloudflare Workers — all while keeping the same design. Scott and Wes break down the pain points with Next.js, MDX, image handling, caching, and the custom setup that now powers a blazing-fast blog.
 Show Notes
  
 00:00 Welcome to Syntax!
  01:03 Barcelona Conference.
  04:09 Brought to you by Sentry.io.
  04:33 Existing stack, goodbye to Gatsby.
  06:11 New stack, the goals for moving.
  06:56 So what is the new stack? 
  08:32 Challenges with NextJS.
  08:58 Problems with plugins.
  09:30 Problems with dynamic imports.
  10:21 Problems with Cloudflare deployment.
  
  12:37 Landing on Waku.
  13:59 Hot Tips functionality updates.
  16:30 Blog Posts + JavaScript Notes.
  17:09 Moving from Gatsby.
  19:03 Page speeds. 
  19:29 Removing nav resizing process.
  21:03 Writing custom MDX plugins.
  
  23:28 Hosting. 
  24:08 Why is the build so fast?
  
  28:01 Pricing.
  32:25 Caching.
  34:49 Migration errors.
  36:37 CSS.
  
 Hit us up on Socials!
  Syntax: X Instagram Tiktok LinkedIn Threads
  Wes: X Instagram Tiktok LinkedIn Threads
  Scott: X Instagram Tiktok LinkedIn Threads
  Randy: X Instagram YouTube Threads</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
  </channel>
</rss>