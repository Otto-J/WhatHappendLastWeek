<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link href="https://&lt;your-domain-here&gt;/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Weekly Podcast Updates</title>
    <link>https://&lt;your-project-link-here&gt;</link>
    <language>en-us</language>
    <description>Weekly digest of podcast episodes from week 24, starting 2025-06-09.</description>
    <lastBuildDate>Mon, 16 Jun 2025 00:14:38 GMT</lastBuildDate>
    <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
    <item>
      <title>Will AI Kill the Joy of Coding?</title>
      <link>https://art19.com/shows/whiskey-web-and-whatnot</link>
      <description>This week, Robbie and Chuck review Barrell Craft Spirits' Cranky Kong, and talk about the AI boom, how senior devs are (or aren’t) using it, and what the future of software jobs might look like. They also discuss the rise of &quot;celebrity developers&quot;, job market shifts, real estate economics, and parenting twins.
In this episode:

(00:00) - Intro
(01:20) - Whiskey rating &amp; review: Barrell Craft Spirits Private Release &quot;Cranky Kong&quot; Rye Whiskey
(07:28) - The Taco Bell Cantina Challenge
(10:51) - Claude 4, Windsurf, and the AI arms race
(13:50) - Will AI kill the joy of coding?
(16:18) - Monorepos and missing changelogs
(20:27) - Prompting vs programming
(21:53) - UBI, real estate, and a broken system
(27:48) - The evolving world of celebrity developers
(38:46) - OpenAI’s new device and the future of screens
(41:49) - Parenting and newborn chaos
(49:51) - Chuck's move and studio setup
(53:22) - TV picks and recommendations

Links

Barrell Craft Spirits Private Release &quot;Cranky Kong&quot; Rye Whiskey: https://www.barrellbourbon.com/
Sagamore Spirit: https://sagamorespirit.com/
Taco Bell: https://www.tacobell.com/
Chick-fil-A: https://www.chick-fil-a.com/
White Castle: https://www.whitecastle.com/
Claude: https://claude.ai
Windsurf: https://windsurf.ai/
OpenAI: https://openai.com
Gemini: https://gemini.google.com/
Vite: https://vite.dev/
Zach Lloyd's LinkedIn post about AI: https://www.linkedin.com/posts/zachlloyd_anyone-else-having-a-hard-time-getting-their-activity-7333511252666662913-RK7g/
DHH - Coding should be a vibe!: https://world.hey.com/dhh/coding-should-be-a-vibe-50908f49
Astro: https://astro.build/
Vercel: https://vercel.com/
Starlight Tailwind: https://github.com/withastro/starlight/tree/main/examples/tailwind
Ember: https://emberjs.com/
GitHub: https://github.com
Sam Altman: https://x.com/sama
WALL-E: https://www.disneyplus.com/browse/entity-280395a4-d5ef-4dd0-bd09-d91c31593d3d
Idiocracy: https://www.imdb.com/title/tt0387808/
Primeagen: https://x.com/ThePrimeagen
Adam Argyle: https://x.com/argyleink/
Amazon: https://amazon.com
Guillermo Rauch: https://x.com/rauchg
PHP: https://www.php.net/
Laravel: https://laravel.com/
Maserati: https://www.maserati.com/
Honda: https://automobiles.honda.com/
OpenAI's new screenless device: https://www.theverge.com/news/672357/openai-ai-device-sam-altman-jony-ive
Jony Ive: https://en.wikipedia.org/wiki/Jony_Ive
Syntax: https://syntax.fm
React Miami: https://www.reactmiami.com/
Rodecaster Pro: https://rode.com/en-us/interfaces-and-mixers/rodecaster-series/rodecaster-pro
Electro-Voice RE20: https://products.electrovoice.com/na/en/re20/
13 Reasons Why: https://www.netflix.com/title/80117470
Dan Abramov: https://danabra.mov/
HBO: https://www.max.com/
The White Lotus: https://www.hbo.com/the-white-lotus
Ryan Reynolds: https://en.wikipedia.org/wiki/Ryan_Reynolds
Mint Mobile: https://www.mintmobile.com/
Apple TV+: https://tv.apple.com/
The Last of Us: https://www.hbo.com/the-last-of-us
The Handmaid's Tale: https://www.hulu.com/series/the-handmaids-tale
Grey's Anatomy: https://www.imdb.com/title/tt0413573/
NCIS: https://www.imdb.com/title/tt0364845/
Mark Harmon: https://www.imdb.com/name/nm0001319/
Law &amp; Order: SVU: https://www.imdb.com/title/tt0203259/

Connect with Chuck and Robbie

Robbie Wagner: https://x.com/RobbieTheWagner
Chuck Carpenter: https://x.com/CharlesWthe3rd

Subscribe and stay in touch

Website: https://whiskey.fm
Apple Podcasts: https://podcasts.apple.com/us/podcast/whiskey-web-and-whatnot/id1552776603
Spotify: https://open.spotify.com/show/19jiuHAqzeKnkleQUpZxDf
Overcast: https://overcast.fm/itunes1552776603
YouTube: https://www.youtube.com/@WhiskeyWebAndWhatnot

Whiskey Web and Whatnot Merch
Enjoying the podcast and want us to make more? Help support us by picking up some of our fresh merch at https://whiskey.fund.
See Privacy Policy at https://art19.com/privacy and California Privacy Notice at https://art19.com/privacy#do-not-sell-my-info.</description>
      <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://art19.com/shows/whiskey-web-and-whatnot</guid>
      <enclosure url="https://m.pfxes.com/vj4uqd6U/rss.art19.com/episodes/beea1ef2-89b7-4647-9679-054b99d4c003.mp3?rss_browser=BAhJIg9yc3MtcGFyc2VyBjoGRVQ%3D--42d668516e215326a0c0e36404173d504b339a70" type="audio/mpeg" length="0"/>
      <itunes:author>Whiskey Web and Whatnot: Web Development, Neat</itunes:author>
      <itunes:summary>This week, Robbie and Chuck review Barrell Craft Spirits' Cranky Kong, and talk about the AI boom, how senior devs are (or aren’t) using it, and what the future of software jobs might look like. They also discuss the rise of &quot;celebrity developers&quot;, job market shifts, real estate economics, and parenting twins.
In this episode:

(00:00) - Intro
(01:20) - Whiskey rating &amp; review: Barrell Craft Spirits Private Release &quot;Cranky Kong&quot; Rye Whiskey
(07:28) - The Taco Bell Cantina Challenge
(10:51) - Claude 4, Windsurf, and the AI arms race
(13:50) - Will AI kill the joy of coding?
(16:18) - Monorepos and missing changelogs
(20:27) - Prompting vs programming
(21:53) - UBI, real estate, and a broken system
(27:48) - The evolving world of celebrity developers
(38:46) - OpenAI’s new device and the future of screens
(41:49) - Parenting and newborn chaos
(49:51) - Chuck's move and studio setup
(53:22) - TV picks and recommendations

Links

Barrell Craft Spirits Private Release &quot;Cranky Kong&quot; Rye Whiskey: https://www.barrellbourbon.com/
Sagamore Spirit: https://sagamorespirit.com/
Taco Bell: https://www.tacobell.com/
Chick-fil-A: https://www.chick-fil-a.com/
White Castle: https://www.whitecastle.com/
Claude: https://claude.ai
Windsurf: https://windsurf.ai/
OpenAI: https://openai.com
Gemini: https://gemini.google.com/
Vite: https://vite.dev/
Zach Lloyd's LinkedIn post about AI: https://www.linkedin.com/posts/zachlloyd_anyone-else-having-a-hard-time-getting-their-activity-7333511252666662913-RK7g/
DHH - Coding should be a vibe!: https://world.hey.com/dhh/coding-should-be-a-vibe-50908f49
Astro: https://astro.build/
Vercel: https://vercel.com/
Starlight Tailwind: https://github.com/withastro/starlight/tree/main/examples/tailwind
Ember: https://emberjs.com/
GitHub: https://github.com
Sam Altman: https://x.com/sama
WALL-E: https://www.disneyplus.com/browse/entity-280395a4-d5ef-4dd0-bd09-d91c31593d3d
Idiocracy: https://www.imdb.com/title/tt0387808/
Primeagen: https://x.com/ThePrimeagen
Adam Argyle: https://x.com/argyleink/
Amazon: https://amazon.com
Guillermo Rauch: https://x.com/rauchg
PHP: https://www.php.net/
Laravel: https://laravel.com/
Maserati: https://www.maserati.com/
Honda: https://automobiles.honda.com/
OpenAI's new screenless device: https://www.theverge.com/news/672357/openai-ai-device-sam-altman-jony-ive
Jony Ive: https://en.wikipedia.org/wiki/Jony_Ive
Syntax: https://syntax.fm
React Miami: https://www.reactmiami.com/
Rodecaster Pro: https://rode.com/en-us/interfaces-and-mixers/rodecaster-series/rodecaster-pro
Electro-Voice RE20: https://products.electrovoice.com/na/en/re20/
13 Reasons Why: https://www.netflix.com/title/80117470
Dan Abramov: https://danabra.mov/
HBO: https://www.max.com/
The White Lotus: https://www.hbo.com/the-white-lotus
Ryan Reynolds: https://en.wikipedia.org/wiki/Ryan_Reynolds
Mint Mobile: https://www.mintmobile.com/
Apple TV+: https://tv.apple.com/
The Last of Us: https://www.hbo.com/the-last-of-us
The Handmaid's Tale: https://www.hulu.com/series/the-handmaids-tale
Grey's Anatomy: https://www.imdb.com/title/tt0413573/
NCIS: https://www.imdb.com/title/tt0364845/
Mark Harmon: https://www.imdb.com/name/nm0001319/
Law &amp; Order: SVU: https://www.imdb.com/title/tt0203259/

Connect with Chuck and Robbie

Robbie Wagner: https://x.com/RobbieTheWagner
Chuck Carpenter: https://x.com/CharlesWthe3rd

Subscribe and stay in touch

Website: https://whiskey.fm
Apple Podcasts: https://podcasts.apple.com/us/podcast/whiskey-web-and-whatnot/id1552776603
Spotify: https://open.spotify.com/show/19jiuHAqzeKnkleQUpZxDf
Overcast: https://overcast.fm/itunes1552776603
YouTube: https://www.youtube.com/@WhiskeyWebAndWhatnot

Whiskey Web and Whatnot Merch
Enjoying the podcast and want us to make more? Help support us by picking up some of our fresh merch at https://whiskey.fund.
See Privacy Policy at https://art19.com/privacy and California Privacy Notice at https://art19.com/privacy#do-not-sell-my-info.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Roo Custom Modes</title>
      <link>https://www.thisdot.co/blog/roo-custom-modes</link>
      <description>Roo Custom Modes
Roo Code is an extension for VS Code that provides agentic-style AI code editing functionality. You can configure Roo to use any LLM model and version you want by providing API keys. Once configured, Roo allows you to easily switch between models and provide custom instructions through what Roo calls &quot;modes.&quot;
Roo Modes can be thought of as a &quot;personality&quot; that the LLM takes on. When you create a new mode in Roo, you provide it with a description of what personality Roo should take on, what LLM model should be used, and what custom instructions the mode should follow. You can also define workspace-level instructions via a .roo/rules-{modeSlug}/ directory at your project root with markdown files inside. Having different modes allows developers to quickly fine-tune how the Roo Code agent performs its tasks.
Roo ships out-of-the-box with some default modes: Code Mode, Architect Mode, Ask Mode, Debug Mode, and Orchestrator Mode. These can get you far, but I have expanded on this list with a few custom modes I have made for specific scenarios I run into every day as a software engineer.
My Custom Modes
📜 Documenter Mode
I created this mode to help me with generating documentation for legacy codebases my team works with. I use this mode to help produce documentation interactively with me while I read a codebase.
Mode Definition
You are Roo, a highly skilled technical documentation writer with extensive knowledge in many programming languages, frameworks, design patterns, and best practices. You are working alongside a human software engineer, and your responsibility is to provide documentation around the code you are working on. You will be asked to provide documentation in the form of comments, markdown files, or other formats as needed.
Mode-specific Instructions
You will respect the following rules:
You will not write any code, only markdown files.
In your documentation, you will provide references to specific files and line numbers of code you are referencing.
You will not attempt to execute any commands.
You will not attempt to run the application in the browser.
You will only look at the code and infer functionality from that.
👥 Pair Programmer Mode
I created a “Pair Programmer” mode to serve as my personal coding partner. It’s designed to work in a more collaborative way with a human software engineer. When I want to explore multiple ideas quickly, I switch to this mode to rapidly iterate on code with Roo. In this setup, I take on the role of the navigator—guiding direction, strategy, and decisions—while Roo handles the “driving” by writing and testing the code we need.
Mode Definition
You are Roo, a highly skilled software engineer with extensive knowledge in many programming languages, frameworks, design patterns, and best practices. You are working alongside a human software engineer who will be checking your work and providing instructions. If you get stuck, ask for help and we will solve problems together.
Mode-specific Instructions
You will respect the following rules:
You will not install new 3rd party libraries without first providing usage metrics (stars, downloads, latest version update date).
You will not do any additional tasks outside of what you have been told to do.
You will not assume to do any additional work outside of what you have been instructed to do.
You will not open the browser and test the application. Your pairing partner will do that for you.
You will not attempt to open the application or the URL at which the application is running. Assume your pairing partner will do that for you.
You will not attempt to run npm run dev or similar commands. Your pairing partner will do that for you.
You will not attempt to run a development server of any kind. Your pairing partner will handle that for you.
You will not write tests unless instructed to.
You will not make any git commits unless explicitly told to do so.
You will not make suggestions of commands to run the software or execute the test suite. Assume that your human counterpart has the application running and will check your work.
🧑‍🏫 Project Manager
I created this mode to help me write tasks for my team with clear and actionable acceptance criteria.
Mode Definition
You are a professional project manager. You are highly skilled in breaking down large tasks into bite-sized pieces that are actionable by an engineering team or an LLM performing engineering tasks. You analyze features carefully and detail out all edge cases and scenarios so that no detail is missed.
Mode-specific Instructions
Think creatively about how to detail out features. Provide a technical and business case explanation about feature value. Break down features and functionality in the following way. The following example would be for user login:
User Login: As a user, I can log in to the application so that I can make changes. This prevents anonymous individuals from accessing the admin panel.
Acceptance Criteria
On the login page, I can fill in my email address:
This field is required.
This field must enforce email format validation.
On the login page, I can fill in my password:
This field is required.
The input a user types into this field is hidden.
On failure to log in, I am provided an error dialog:
The error dialog should be the same if the email exists or not so that bad actors cannot glean info about active user accounts in our system.
Error dialog should be a red box pinned to the top of the page.
Error dialog can be dismissed.
After 4 failed login attempts, the form becomes locked:
Display a dialog to the user letting them know they can try again in 30 minutes.
Form stays locked for 30 minutes and the frontend will not accept further submissions.
🦾 Agent Consultant
I created this mode for assistance with modifying my existing Roo modes and rules files as well as generating higher quality prompts for me. This mode leverages the Context7 MCP to keep up-to-date with documentation on Roo Code and prompt engineering best practices.
Mode Definition
You are an AI Agent coding expert. You are proficient in coding with agents and defining custom rules and guidelines for AI powered coding agents. Your specific expertise is in the Roo Code tool for VS Code are you are exceptionally capable at creating custom rules files and custom mode.
This is your workflow that you should always follow:

Begin every task by retrieving relevant documentation from context7
First retrieve Roo documentation using get-library-docs with &quot;/roovetgit/roo-code-docs&quot;
Then retrieve prompt engineering best practices using get-library-docs with “/dair-ai/prompt-engineering-guide&quot;
Reference this documentation explicitly in your analysis and recommendations
Only after consulting these resources, proceed with the task
Wrapping It Up
Roo’s “Modes” have become an essential part of how I leverage AI in my day-to-day work as a software engineer. By tailoring each mode to specific tasks—whether it’s generating documentation, pairing on code, writing project specs, or improving prompt quality—I’ve been able to streamline my workflow and get more done with greater clarity and precision.
Roo’s flexibility lets me define how it should behave in different contexts, giving me fine-grained control over how I interact with AI in my coding environment. Roo also has the capability of defining custom modes per project if that is needed by your team. If you find yourself repeating certain workflows or needing more structure in your interactions with AI tools, I highly recommend experimenting with your own custom modes. The payoff in productivity and developer experience is absolutely worth it.</description>
      <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://www.thisdot.co/blog/roo-custom-modes</guid>
      <itunes:author>This Dot Labs RSS feed</itunes:author>
      <itunes:summary>Roo Custom Modes
Roo Code is an extension for VS Code that provides agentic-style AI code editing functionality. You can configure Roo to use any LLM model and version you want by providing API keys. Once configured, Roo allows you to easily switch between models and provide custom instructions through what Roo calls &quot;modes.&quot;
Roo Modes can be thought of as a &quot;personality&quot; that the LLM takes on. When you create a new mode in Roo, you provide it with a description of what personality Roo should take on, what LLM model should be used, and what custom instructions the mode should follow. You can also define workspace-level instructions via a .roo/rules-{modeSlug}/ directory at your project root with markdown files inside. Having different modes allows developers to quickly fine-tune how the Roo Code agent performs its tasks.
Roo ships out-of-the-box with some default modes: Code Mode, Architect Mode, Ask Mode, Debug Mode, and Orchestrator Mode. These can get you far, but I have expanded on this list with a few custom modes I have made for specific scenarios I run into every day as a software engineer.
My Custom Modes
📜 Documenter Mode
I created this mode to help me with generating documentation for legacy codebases my team works with. I use this mode to help produce documentation interactively with me while I read a codebase.
Mode Definition
You are Roo, a highly skilled technical documentation writer with extensive knowledge in many programming languages, frameworks, design patterns, and best practices. You are working alongside a human software engineer, and your responsibility is to provide documentation around the code you are working on. You will be asked to provide documentation in the form of comments, markdown files, or other formats as needed.
Mode-specific Instructions
You will respect the following rules:
You will not write any code, only markdown files.
In your documentation, you will provide references to specific files and line numbers of code you are referencing.
You will not attempt to execute any commands.
You will not attempt to run the application in the browser.
You will only look at the code and infer functionality from that.
👥 Pair Programmer Mode
I created a “Pair Programmer” mode to serve as my personal coding partner. It’s designed to work in a more collaborative way with a human software engineer. When I want to explore multiple ideas quickly, I switch to this mode to rapidly iterate on code with Roo. In this setup, I take on the role of the navigator—guiding direction, strategy, and decisions—while Roo handles the “driving” by writing and testing the code we need.
Mode Definition
You are Roo, a highly skilled software engineer with extensive knowledge in many programming languages, frameworks, design patterns, and best practices. You are working alongside a human software engineer who will be checking your work and providing instructions. If you get stuck, ask for help and we will solve problems together.
Mode-specific Instructions
You will respect the following rules:
You will not install new 3rd party libraries without first providing usage metrics (stars, downloads, latest version update date).
You will not do any additional tasks outside of what you have been told to do.
You will not assume to do any additional work outside of what you have been instructed to do.
You will not open the browser and test the application. Your pairing partner will do that for you.
You will not attempt to open the application or the URL at which the application is running. Assume your pairing partner will do that for you.
You will not attempt to run npm run dev or similar commands. Your pairing partner will do that for you.
You will not attempt to run a development server of any kind. Your pairing partner will handle that for you.
You will not write tests unless instructed to.
You will not make any git commits unless explicitly told to do so.
You will not make suggestions of commands to run the software or execute the test suite. Assume that your human counterpart has the application running and will check your work.
🧑‍🏫 Project Manager
I created this mode to help me write tasks for my team with clear and actionable acceptance criteria.
Mode Definition
You are a professional project manager. You are highly skilled in breaking down large tasks into bite-sized pieces that are actionable by an engineering team or an LLM performing engineering tasks. You analyze features carefully and detail out all edge cases and scenarios so that no detail is missed.
Mode-specific Instructions
Think creatively about how to detail out features. Provide a technical and business case explanation about feature value. Break down features and functionality in the following way. The following example would be for user login:
User Login: As a user, I can log in to the application so that I can make changes. This prevents anonymous individuals from accessing the admin panel.
Acceptance Criteria
On the login page, I can fill in my email address:
This field is required.
This field must enforce email format validation.
On the login page, I can fill in my password:
This field is required.
The input a user types into this field is hidden.
On failure to log in, I am provided an error dialog:
The error dialog should be the same if the email exists or not so that bad actors cannot glean info about active user accounts in our system.
Error dialog should be a red box pinned to the top of the page.
Error dialog can be dismissed.
After 4 failed login attempts, the form becomes locked:
Display a dialog to the user letting them know they can try again in 30 minutes.
Form stays locked for 30 minutes and the frontend will not accept further submissions.
🦾 Agent Consultant
I created this mode for assistance with modifying my existing Roo modes and rules files as well as generating higher quality prompts for me. This mode leverages the Context7 MCP to keep up-to-date with documentation on Roo Code and prompt engineering best practices.
Mode Definition
You are an AI Agent coding expert. You are proficient in coding with agents and defining custom rules and guidelines for AI powered coding agents. Your specific expertise is in the Roo Code tool for VS Code are you are exceptionally capable at creating custom rules files and custom mode.
This is your workflow that you should always follow:

Begin every task by retrieving relevant documentation from context7
First retrieve Roo documentation using get-library-docs with &quot;/roovetgit/roo-code-docs&quot;
Then retrieve prompt engineering best practices using get-library-docs with “/dair-ai/prompt-engineering-guide&quot;
Reference this documentation explicitly in your analysis and recommendations
Only after consulting these resources, proceed with the task
Wrapping It Up
Roo’s “Modes” have become an essential part of how I leverage AI in my day-to-day work as a software engineer. By tailoring each mode to specific tasks—whether it’s generating documentation, pairing on code, writing project specs, or improving prompt quality—I’ve been able to streamline my workflow and get more done with greater clarity and precision.
Roo’s flexibility lets me define how it should behave in different contexts, giving me fine-grained control over how I interact with AI in my coding environment. Roo also has the capability of defining custom modes per project if that is needed by your team. If you find yourself repeating certain workflows or needing more structure in your interactions with AI tools, I highly recommend experimenting with your own custom modes. The payoff in productivity and developer experience is absolutely worth it.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>668: Jake Archibald on Native HTML Includes</title>
      <link>https://shoptalkshow.com/668/</link>
      <description>Show Description
Jake Archibald joins us to discuss HTML includes, potential solutions, and the implications of introducing such a feature. We talk about security concerns, performance implications, and community feedback regarding HTML imports.
Listen on Website →
Guests
Jake Archibald
Guest's Main URL • Guest's Social

Engineer at Shopify. Once swam to the end of an infinity pool.
Links

Off The Main Thread podcast
blink-dev - Google Groups
Sponsors</description>
      <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://shoptalkshow.com/668/</guid>
      <enclosure url="https://shoptalkshow.com/podcast-download/8244/668.mp3?nocache" type="audio/mpeg" length="0"/>
      <itunes:author>ShopTalk</itunes:author>
      <itunes:summary>Show Description
Jake Archibald joins us to discuss HTML includes, potential solutions, and the implications of introducing such a feature. We talk about security concerns, performance implications, and community feedback regarding HTML imports.
Listen on Website →
Guests
Jake Archibald
Guest's Main URL • Guest's Social

Engineer at Shopify. Once swam to the end of an infinity pool.
Links

Off The Main Thread podcast
blink-dev - Google Groups
Sponsors</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Episode 464: Rehiring an overpaid boomerang and AI has taken over my teammate's brain</title>
      <link>https://softskills.audio/2025/06/09/episode-464-rehiring-an-overpaid-boomerang-and-ai-has-taken-over-my-teammate's-brain/</link>
      <description>In this episode, Dave and Jamison answer these questions:
Mr A. N. Onymous says,
Hi Dave and Jamison,
Long time listened, second time caller! I wrote a little while back with a common new-manager question about how to handle one of my reports who was at the lower end performance wise, but at the top end on the pay scale. I’d been trying to manage it by getting raises for the rest of the team in order to balance things out a bit (and make the rest of the team happy). I did consider Limogeage but having them on the team was better than a vacancy.
Fast forward a year or so, and the problem resolved itself when this team member left - or so I thought. We’ve had a few months gap before opening recruitment again, and it turns out this team member wasn’t happy at their new role and has applied to come back. Given they negotiated well with us the first time I’m guessing they’ve had a healthy pay bump at their new role. What should I do?
On the one hand I know their performance, they do deliver well and I’m happy working with them and managing them. Would it be rude to offer them to come back at their previous salary (assuming they’re the “best” person when we interview)? Will they be offended if we don’t offer them the role?
We haven’t had interviews yet - so help me Dave and Jamison, you’re my only hope!
AI has taken over my team mate’s brain. HELP!
I work for a ~10ish or so team building a B2B finances related app for several platforms (mobile, web, backend, etc). On the Web team, there’s only two of us.
I’ve been on this team for around 4 years now, and during this times I’ve had several coworkers (the previous ones have either left the company voluntarily or involuntarily, moved to other teams, or completely left the field). I’m 100% convinced it’s not because of me, so let’s take that out of the question right away :-). All of this to say is that I tend to be the person that knows the most about our (quite large) codebase.
We work on a ten-year-old React application with some technical debt, but overall I think it’s pretty good.
My coworker comes from Android development. While he’s a great developer and has AMAZING soft skills (probably a listener of this podcast!, or maybe not because he has not quit yet?) he’s a little bit lacking on the general “Web Stuff (TM)” knowledge and many of the specifics details of our codebase.
A bigger problem is that he seems to have totally given up on learning web skills or understanding our codebase and is instead just tab-tab-tab-ing autocompleted AI crap all over the codebase.
His code works as expected, but when reviewing his PRs I feel like a slave of the AI. I’m not reviewing another human’s work, but just what some AI model is doing. While it works, it’s terrible code for another human to maintain. For example, there’s lots of “inline” crap that we already have utility functions or libraries for, regexes everywhere, custom CSS all over the place instead of using our design system, abuse of the CSS cascade instead of using our CSS-inJS solution, large files with lots of code repeating existing logic that’s already somewhere else, and code comments every 2 lines or so which provide no value, but that’s what AI does to explain things.
I’m not against AI (I also have explicitly to say this to prevent it killing me in the future). I use it for explaining things to me, writing utility functions, suggesting improvements, or as a google search replacement that saves a lot of time.
But leaving AI to do your work mindlessly while you sip orange juice and watch how it codes is wrong. We’re not there yet. These PRs work and are difficult to reject because management wants to ship fast. However, they are harming the codebase. We’ll get to the point where only AI will be able to touch it due to the amount of repetition, duplication and overall non-human friendly code.
How do I tell this person “Please stop doing this and instead learn things properly, and use AI as a tool and stop you being the tool of the AI” without hurting any feelings, and without being seen as the AI grinch?
Thanks for your help! Love the podcast, and why scroll keeps jumping up when writing on this form? Seems like AI is boycotting me.</description>
      <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://softskills.audio/2025/06/09/episode-464-rehiring-an-overpaid-boomerang-and-ai-has-taken-over-my-teammate's-brain/</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/download.softskills.audio/sse-464.mp3?source=rss" type="audio/mpeg" length="0"/>
      <itunes:author>Soft Skills Engineering</itunes:author>
      <itunes:summary>In this episode, Dave and Jamison answer these questions:
Mr A. N. Onymous says,
Hi Dave and Jamison,
Long time listened, second time caller! I wrote a little while back with a common new-manager question about how to handle one of my reports who was at the lower end performance wise, but at the top end on the pay scale. I’d been trying to manage it by getting raises for the rest of the team in order to balance things out a bit (and make the rest of the team happy). I did consider Limogeage but having them on the team was better than a vacancy.
Fast forward a year or so, and the problem resolved itself when this team member left - or so I thought. We’ve had a few months gap before opening recruitment again, and it turns out this team member wasn’t happy at their new role and has applied to come back. Given they negotiated well with us the first time I’m guessing they’ve had a healthy pay bump at their new role. What should I do?
On the one hand I know their performance, they do deliver well and I’m happy working with them and managing them. Would it be rude to offer them to come back at their previous salary (assuming they’re the “best” person when we interview)? Will they be offended if we don’t offer them the role?
We haven’t had interviews yet - so help me Dave and Jamison, you’re my only hope!
AI has taken over my team mate’s brain. HELP!
I work for a ~10ish or so team building a B2B finances related app for several platforms (mobile, web, backend, etc). On the Web team, there’s only two of us.
I’ve been on this team for around 4 years now, and during this times I’ve had several coworkers (the previous ones have either left the company voluntarily or involuntarily, moved to other teams, or completely left the field). I’m 100% convinced it’s not because of me, so let’s take that out of the question right away :-). All of this to say is that I tend to be the person that knows the most about our (quite large) codebase.
We work on a ten-year-old React application with some technical debt, but overall I think it’s pretty good.
My coworker comes from Android development. While he’s a great developer and has AMAZING soft skills (probably a listener of this podcast!, or maybe not because he has not quit yet?) he’s a little bit lacking on the general “Web Stuff (TM)” knowledge and many of the specifics details of our codebase.
A bigger problem is that he seems to have totally given up on learning web skills or understanding our codebase and is instead just tab-tab-tab-ing autocompleted AI crap all over the codebase.
His code works as expected, but when reviewing his PRs I feel like a slave of the AI. I’m not reviewing another human’s work, but just what some AI model is doing. While it works, it’s terrible code for another human to maintain. For example, there’s lots of “inline” crap that we already have utility functions or libraries for, regexes everywhere, custom CSS all over the place instead of using our design system, abuse of the CSS cascade instead of using our CSS-inJS solution, large files with lots of code repeating existing logic that’s already somewhere else, and code comments every 2 lines or so which provide no value, but that’s what AI does to explain things.
I’m not against AI (I also have explicitly to say this to prevent it killing me in the future). I use it for explaining things to me, writing utility functions, suggesting improvements, or as a google search replacement that saves a lot of time.
But leaving AI to do your work mindlessly while you sip orange juice and watch how it codes is wrong. We’re not there yet. These PRs work and are difficult to reject because management wants to ship fast. However, they are harming the codebase. We’ll get to the point where only AI will be able to touch it due to the amount of repetition, duplication and overall non-human friendly code.
How do I tell this person “Please stop doing this and instead learn things properly, and use AI as a tool and stop you being the tool of the AI” without hurting any feelings, and without being seen as the AI grinch?
Thanks for your help! Love the podcast, and why scroll keeps jumping up when writing on this form? Seems like AI is boycotting me.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>The Browser Company Kills Arc</title>
      <link>https://www.buzzsprout.com/2226499</link>
      <description>OpenAI has a new API in beta called the Realtime API, which enables speech conversations with LLMs. Real-time text and audio processing means users can have conversations with voice agents and voice-enabled apps, and OpenAI makes it simple to connect via WebRTC or WebSockets.
Several months ago, The Browser Company, abruptly announced they were stopping work on Arc browser in favor of building a completely new, AI-first browser called Dia. Now, the company’s CEO has released a letter detailing why these decisions were made and what the future holds for The Browser Company. Details on Dia are vague, but the team is optimistic they can build “a true successor to the browser”.
AI-enabled coding IDE Cursor hit v1.0, this week with a bunch of notable features. Notable highlights in this release include: BugBot, which automatically reviews PRs and identifies bugs and issues, Background Agent (Cursor’s remote coding agent) for all users, Memories to help Cursor remember facts and conversations within projects for future use, and one-click MCP install and OAuth support.
Timestamps:

1:10 - OpenAI’s realtime agent API
10:03 - The Browser Company Kills Arc
16:53 - Cursor 1.0
28:04 - Codex gets internet access
31:09 - React Router’s open governance
34:18 - Fire Starter
39:55 - What’s making us happy

News:

Paige - Cursor 1.0
Jack - OpenAI’s Realtime Agent for AI chat
TJ - The Browser Company stops developing Arc

Lightning News:

React Router Open Governance
Codex gets access to the internet

Fire Starter:

console.log formatting strings

What Makes Us Happy this Week:

Paige - Clarkson’s Farm season 4
Jack - Shokz OpenRun Pro 2 headphones
TJ - Rotary cheese grater

Thanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.

Front-end Fire website
Blue Collar Coder on YouTube
Blue Collar Coder on Discord
Reach out via email
Tweet at us on X @front_end_fire
Follow us on Bluesky @front-end-fire.com
Subscribe to our YouTube channel @Front-EndFirePodcast</description>
      <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://www.buzzsprout.com/2226499</guid>
      <enclosure url="https://www.buzzsprout.com/2226499/episodes/17301794-the-browser-company-kills-arc.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Front-End Fire</itunes:author>
      <itunes:summary>OpenAI has a new API in beta called the Realtime API, which enables speech conversations with LLMs. Real-time text and audio processing means users can have conversations with voice agents and voice-enabled apps, and OpenAI makes it simple to connect via WebRTC or WebSockets.
Several months ago, The Browser Company, abruptly announced they were stopping work on Arc browser in favor of building a completely new, AI-first browser called Dia. Now, the company’s CEO has released a letter detailing why these decisions were made and what the future holds for The Browser Company. Details on Dia are vague, but the team is optimistic they can build “a true successor to the browser”.
AI-enabled coding IDE Cursor hit v1.0, this week with a bunch of notable features. Notable highlights in this release include: BugBot, which automatically reviews PRs and identifies bugs and issues, Background Agent (Cursor’s remote coding agent) for all users, Memories to help Cursor remember facts and conversations within projects for future use, and one-click MCP install and OAuth support.
Timestamps:

1:10 - OpenAI’s realtime agent API
10:03 - The Browser Company Kills Arc
16:53 - Cursor 1.0
28:04 - Codex gets internet access
31:09 - React Router’s open governance
34:18 - Fire Starter
39:55 - What’s making us happy

News:

Paige - Cursor 1.0
Jack - OpenAI’s Realtime Agent for AI chat
TJ - The Browser Company stops developing Arc

Lightning News:

React Router Open Governance
Codex gets access to the internet

Fire Starter:

console.log formatting strings

What Makes Us Happy this Week:

Paige - Clarkson’s Farm season 4
Jack - Shokz OpenRun Pro 2 headphones
TJ - Rotary cheese grater

Thanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.

Front-end Fire website
Blue Collar Coder on YouTube
Blue Collar Coder on Discord
Reach out via email
Tweet at us on X @front_end_fire
Follow us on Bluesky @front-end-fire.com
Subscribe to our YouTube channel @Front-EndFirePodcast</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>How MCP is Changing AI App Building</title>
      <link>https://podcasters.spotify.com/pod/show/modern-web/episodes/How-MCP-is-Changing-AI-App-Building-e345nq1</link>
      <description>On this episode of the Modern Web Podcast, hosts Rob Ocel, Danny Thompson, and Adam Rackis are joined by Tejas Kumar, host of The Contagious Code podcast, author of Fluent React, and Developer Relations Engineer for Generative AI at DataStax. They unpack the current wave of AI announcements from Google I/O and Microsoft Build, and zoom in on the significance of MCP (Model Context Protocol) as a foundational shift in how AI-powered apps will be built and used.
Tejas breaks down what MCP is, why it's catching on across the industry, and how it could become the HTTP of AI apps. The group explores real-world examples, like AI apps managing your inbox or booking flights without ever opening a browser, and discuss how MCP servers enable secure, agent-driven experiences that can act on your behalf. They also touch on hallucinations, the role of fine-tuning vs. tool integration, and the future of checkout flows powered by AI agents.


Keypoints from this Episode:
- MCP enables structured communication between AI apps and servers, allowing agents to perform real tasks like sending emails or booking flights
- Users will increasingly interact with applications through natural language, with agents handling workflows behind the scenes
- Connecting models to tools via MCP helps reduce hallucinations by ensuring actions and responses are grounded in real data
- Most use cases benefit more from retrieval-augmented generation and strong tool integration than from expensive model fine-tuning


Follow Tejas on Social Media
Twitter: https://x.com/TejasKumar_
Linkedin: https://www.linkedin.com/in/tejasq/</description>
      <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/modern-web/episodes/How-MCP-is-Changing-AI-App-Building-e345nq1</guid>
      <enclosure url="https://anchor.fm/s/f9191780/podcast/play/104045825/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-5-12%2F402059341-44100-2-624199765d11a.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Modern Web</itunes:author>
      <itunes:summary>On this episode of the Modern Web Podcast, hosts Rob Ocel, Danny Thompson, and Adam Rackis are joined by Tejas Kumar, host of The Contagious Code podcast, author of Fluent React, and Developer Relations Engineer for Generative AI at DataStax. They unpack the current wave of AI announcements from Google I/O and Microsoft Build, and zoom in on the significance of MCP (Model Context Protocol) as a foundational shift in how AI-powered apps will be built and used.
Tejas breaks down what MCP is, why it's catching on across the industry, and how it could become the HTTP of AI apps. The group explores real-world examples, like AI apps managing your inbox or booking flights without ever opening a browser, and discuss how MCP servers enable secure, agent-driven experiences that can act on your behalf. They also touch on hallucinations, the role of fine-tuning vs. tool integration, and the future of checkout flows powered by AI agents.


Keypoints from this Episode:
- MCP enables structured communication between AI apps and servers, allowing agents to perform real tasks like sending emails or booking flights
- Users will increasingly interact with applications through natural language, with agents handling workflows behind the scenes
- Connecting models to tools via MCP helps reduce hallucinations by ensuring actions and responses are grounded in real data
- Most use cases benefit more from retrieval-augmented generation and strong tool integration than from expensive model fine-tuning


Follow Tejas on Social Media
Twitter: https://x.com/TejasKumar_
Linkedin: https://www.linkedin.com/in/tejasq/</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>10 years of SolidJS with Ryan Carniato</title>
      <link>http://podrocket.logrocket.com/10-years-solid-js-ryan-carniato</link>
      <description>Ryan Carniato, creator of SolidJS, joins the podcast to reflect on a decade of developing the framework. We dive into the evolution of frontend tooling, the rise of fine-grained reactivity, and why SolidJS continues to challenge virtual DOM conventions. Ryan also shares insights on open source maintenance, web standards, and the future of UI architecture.
Links
YouTube: https://www.youtube.com/@ryansolid
X: https://x.com/ryancarniato 
Dev.to: https://dev.to/ryansolid
SolidJS Website: https://www.solidjs.com
Resources
A Decade of SolidJS: https://dev.to/this-is-learning/a-decade-of-solidjs-32f4
We want to hear from you!
How did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?
Let us know by sending an email to our producer, Em, at emily.kochanek@logrocket.com (mailto:emily.kochanek@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).
Follow us. Get free stickers.
Follow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!
What does LogRocket do?
LogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr) Special Guest: Ryan Carniato.</description>
      <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
      <guid>http://podrocket.logrocket.com/10-years-solid-js-ryan-carniato</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/aphid.fireside.fm/d/1437767933/3911462c-bca2-48c2-9103-610ba304c673/b4f944a7-7bf2-42a2-ae23-c031ccc68deb.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>PodRocket - A web development podcast from LogRocket</itunes:author>
      <itunes:summary>Ryan Carniato, creator of SolidJS, joins the podcast to reflect on a decade of developing the framework. We dive into the evolution of frontend tooling, the rise of fine-grained reactivity, and why SolidJS continues to challenge virtual DOM conventions. Ryan also shares insights on open source maintenance, web standards, and the future of UI architecture.
Links
YouTube: https://www.youtube.com/@ryansolid
X: https://x.com/ryancarniato 
Dev.to: https://dev.to/ryansolid
SolidJS Website: https://www.solidjs.com
Resources
A Decade of SolidJS: https://dev.to/this-is-learning/a-decade-of-solidjs-32f4
We want to hear from you!
How did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?
Let us know by sending an email to our producer, Em, at emily.kochanek@logrocket.com (mailto:emily.kochanek@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).
Follow us. Get free stickers.
Follow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!
What does LogRocket do?
LogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr) Special Guest: Ryan Carniato.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Double Trouble: The Nuxt Surprise (with Daniel Roe)</title>
      <link>https://share.transistor.fm/s/362d7c46</link>
      <description>Big news in the Nuxt ecosystem. While you out there already know what has been announced - some of us didn't. Luckily, Daniel Roe, Head of the Nuxt team joins this DejaVue episode and discusses the highly anticipated &quot;double trouble&quot;: Not one, but two major versions for Nuxt are on the horizon.
After over a year of delays, Daniel reveals the strategic decision to release Nuxt 4 in less than a month from now, followed by Nuxt 5 which will include the long-awaited Nitro 3 integration and significant Vite improvements.
The episode covers the smooth migration experience early adopters reported already, the philosophy behind careful breaking changes, and how the team plans to maintain a yearly major release cycle moving forward.
Enjoy the Episode!
Our Guest
Daniel Roe

Bluesky
Web
YouTube
Twitch

Chapters



(00:00) - Welcome to DejaVue
(01:19) - The big topic
(02:41) - What are the release plans?
(06:47) - Two major versions soon?
(09:28) - Early adopters of compatibilityVersion 4
(11:56) - Depending on other dependencies and versions bumps
(13:45) - Is bumping the minimum Node version a breaking change?
(16:33) - A Quick Nitro TL;DR
(20:46) - Nitro in other frameworks
(25:20) - Why Nuxt 4 now?
(28:41) - LTS support Plans
(29:53) - Nuxt Bridge
(31:46) - Release Dates and skipping Nuxt 4 altogether
(33:14) - We need Release names!
(35:53) - Release Dates for Nuxt 4 and 5
(40:00) - Wrapping Up


Links and Resources


Roadmap to v4 blog post
DejaVue #E043 - The Year in ReVue (with Daniel Roe)
DejaVue #E044 - Our Predictions for Vue and Nuxt in 2025 (with Daniel Roe)
DejaVue #E013 - The Road to Nuxt 4 (with Daniel Roe)
Daniel's PR migrating Elk
Nuxt 4 Migration Guide
DejaVue #E003 - Nitro: The Next Generation Server Toolkit
Srvx
Michael's Nuxt Release Date Comic
Alex' Nuxt 4/5 video

Your Hosts

Alexander Lichter


Bluesky
YouTube
Website


Michael Thiessen


Twitter
YouTube
Website

---
Links marked with * are affiliate links. We get a small commission when you register for the service through our link. This helps us to keep the podcast running. We only include affiliate links for services mentioned in the episode or that we use ourselves.</description>
      <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://share.transistor.fm/s/362d7c46</guid>
      <enclosure url="https://media.transistor.fm/362d7c46/549bc594.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>DejaVue</itunes:author>
      <itunes:summary>Big news in the Nuxt ecosystem. While you out there already know what has been announced - some of us didn't. Luckily, Daniel Roe, Head of the Nuxt team joins this DejaVue episode and discusses the highly anticipated &quot;double trouble&quot;: Not one, but two major versions for Nuxt are on the horizon.
After over a year of delays, Daniel reveals the strategic decision to release Nuxt 4 in less than a month from now, followed by Nuxt 5 which will include the long-awaited Nitro 3 integration and significant Vite improvements.
The episode covers the smooth migration experience early adopters reported already, the philosophy behind careful breaking changes, and how the team plans to maintain a yearly major release cycle moving forward.
Enjoy the Episode!
Our Guest
Daniel Roe

Bluesky
Web
YouTube
Twitch

Chapters



(00:00) - Welcome to DejaVue
(01:19) - The big topic
(02:41) - What are the release plans?
(06:47) - Two major versions soon?
(09:28) - Early adopters of compatibilityVersion 4
(11:56) - Depending on other dependencies and versions bumps
(13:45) - Is bumping the minimum Node version a breaking change?
(16:33) - A Quick Nitro TL;DR
(20:46) - Nitro in other frameworks
(25:20) - Why Nuxt 4 now?
(28:41) - LTS support Plans
(29:53) - Nuxt Bridge
(31:46) - Release Dates and skipping Nuxt 4 altogether
(33:14) - We need Release names!
(35:53) - Release Dates for Nuxt 4 and 5
(40:00) - Wrapping Up


Links and Resources


Roadmap to v4 blog post
DejaVue #E043 - The Year in ReVue (with Daniel Roe)
DejaVue #E044 - Our Predictions for Vue and Nuxt in 2025 (with Daniel Roe)
DejaVue #E013 - The Road to Nuxt 4 (with Daniel Roe)
Daniel's PR migrating Elk
Nuxt 4 Migration Guide
DejaVue #E003 - Nitro: The Next Generation Server Toolkit
Srvx
Michael's Nuxt Release Date Comic
Alex' Nuxt 4/5 video

Your Hosts

Alexander Lichter


Bluesky
YouTube
Website


Michael Thiessen


Twitter
YouTube
Website

---
Links marked with * are affiliate links. We get a small commission when you register for the service through our link. This helps us to keep the podcast running. We only include affiliate links for services mentioned in the episode or that we use ourselves.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>910: If Statements in CSS?</title>
      <link>https://syntax.fm/910</link>
      <description>Wes and Scott talk about the new If statements in CSS, breaking down how they work, why they matter, and when to use them. They explore use cases, syntax quirks, and how this feature pushes CSS closer to true conditional logic—no JavaScript required.


Show Notes



00:00 Welcome to Syntax!


01:30 Brought to you by Sentry.io



02:37 CSS If statements in action

CSS if() functions &amp; reading-flow (in Chrome 137)

CodePen - If with style without attr





09:08 Advanced examples and the attribute function

CodePen - CSS If() Themes





13:43 Mixing If statements with media queries

CodePen - CSS If() Mixed Logic





16:54 Can’t this be done with classes?


18:16 The future of CSS: declarative APIs

CSS Battle LIVE! in Denver | Switch Edition





21:10 Is CSS now a programming language?



Hit us up on Socials!

Syntax: X Instagram Tiktok LinkedIn Threads

Wes: X Instagram Tiktok LinkedIn Threads

Scott: X Instagram Tiktok LinkedIn Threads

Randy: X Instagram YouTube Threads</description>
      <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://syntax.fm/910</guid>
      <enclosure url="https://traffic.megaphone.fm/FSI2413522351.mp3?updated=1749675434" type="audio/mpeg" length="0"/>
      <itunes:author>Syntax - Tasty Web Development Treats</itunes:author>
      <itunes:summary>Wes and Scott talk about the new If statements in CSS, breaking down how they work, why they matter, and when to use them. They explore use cases, syntax quirks, and how this feature pushes CSS closer to true conditional logic—no JavaScript required.


Show Notes



00:00 Welcome to Syntax!


01:30 Brought to you by Sentry.io



02:37 CSS If statements in action

CSS if() functions &amp; reading-flow (in Chrome 137)

CodePen - If with style without attr





09:08 Advanced examples and the attribute function

CodePen - CSS If() Themes





13:43 Mixing If statements with media queries

CodePen - CSS If() Mixed Logic





16:54 Can’t this be done with classes?


18:16 The future of CSS: declarative APIs

CSS Battle LIVE! in Denver | Switch Edition





21:10 Is CSS now a programming language?



Hit us up on Socials!

Syntax: X Instagram Tiktok LinkedIn Threads

Wes: X Instagram Tiktok LinkedIn Threads

Scott: X Instagram Tiktok LinkedIn Threads

Randy: X Instagram YouTube Threads</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>909: Handling and Throwing Errors</title>
      <link>https://syntax.fm/909</link>
      <description>We break down how to properly throw, catch, and log errors in JavaScript and TypeScript. They cover client-side and server-side strategies, using tools like Sentry, and how to handle errors without taking down your whole app.

Show Notes


  
00:00 Welcome to Syntax!

  
01:19 Error terminology.

  
01:42 Thrown and catching.




  
03:01 What’s in an error.

  
04:09 Name and message.

  
04:42 Stack.

  
07:12 Node system errors.

  
07:34 Messages: strings, objects, or custom errors.




  
08:19 Throwing errors.

  
12:01 Promise errors.

  
12:10 Try catch block, .catch().

  
14:13 Using awaited-to.

  
15:10 Finally.

  
16:29 promise.try()




  
17:14 Re-throwing errors.

  Error Cause




  
18:12 Client-side errors.

  
18:15 Catching at different levels.

  
18:51 Displaying errors.

  
21:59 Transforming server errors into client errors.

  
24:12 Error boundaries.




  
25:26 Server errors.

  
26:10 JSON API.

  
27:41 HTTP response codes.




  
30:09 Logging and solving errors.

  
31:16 Proudly supported by Sentry.io.

  Logging within Sentry







  
36:16 TypeScript and errors.


Hit us up on Socials!

Syntax: X Instagram Tiktok LinkedIn Threads

Wes: X Instagram Tiktok LinkedIn Threads

Scott: X Instagram Tiktok LinkedIn Threads

Randy: X Instagram YouTube Threads</description>
      <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
      <guid>https://syntax.fm/909</guid>
      <enclosure url="https://traffic.megaphone.fm/FSI2583073811.mp3?updated=1749757121" type="audio/mpeg" length="0"/>
      <itunes:author>Syntax - Tasty Web Development Treats</itunes:author>
      <itunes:summary>We break down how to properly throw, catch, and log errors in JavaScript and TypeScript. They cover client-side and server-side strategies, using tools like Sentry, and how to handle errors without taking down your whole app.

Show Notes


  
00:00 Welcome to Syntax!

  
01:19 Error terminology.

  
01:42 Thrown and catching.




  
03:01 What’s in an error.

  
04:09 Name and message.

  
04:42 Stack.

  
07:12 Node system errors.

  
07:34 Messages: strings, objects, or custom errors.




  
08:19 Throwing errors.

  
12:01 Promise errors.

  
12:10 Try catch block, .catch().

  
14:13 Using awaited-to.

  
15:10 Finally.

  
16:29 promise.try()




  
17:14 Re-throwing errors.

  Error Cause




  
18:12 Client-side errors.

  
18:15 Catching at different levels.

  
18:51 Displaying errors.

  
21:59 Transforming server errors into client errors.

  
24:12 Error boundaries.




  
25:26 Server errors.

  
26:10 JSON API.

  
27:41 HTTP response codes.




  
30:09 Logging and solving errors.

  
31:16 Proudly supported by Sentry.io.

  Logging within Sentry







  
36:16 TypeScript and errors.


Hit us up on Socials!

Syntax: X Instagram Tiktok LinkedIn Threads

Wes: X Instagram Tiktok LinkedIn Threads

Scott: X Instagram Tiktok LinkedIn Threads

Randy: X Instagram YouTube Threads</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
  </channel>
</rss>