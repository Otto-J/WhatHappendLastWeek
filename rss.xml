<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link href="https://&lt;your-domain-here&gt;/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Weekly Podcast Updates</title>
    <link>https://&lt;your-project-link-here&gt;</link>
    <language>en-us</language>
    <description>Weekly digest of podcast episodes from week 36, starting 2025-09-01.</description>
    <lastBuildDate>Mon, 08 Sep 2025 00:13:37 GMT</lastBuildDate>
    <pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate>
    <item>
      <title>Dial-Up Is Dead, Long Live Adam Argyle</title>
      <link>https://play.cdnstream1.com/s/radicalcompany/whiskey-web-and-whatnot-bda353/dial-up-is-dead-long-liv-09c534</link>
      <description>This week, Robbie and Adam talk about CascadiaJS, Adam’s new role at Shopify, and why tech interviews are so broken. They explore accessibility in front-end dev, the sameness of modern frameworks, and whether AI is the future of engineering or just another hype cycle.
In this episode:
(00:00) - Intro
(02:46) - Whiskey rating &amp; review: Jim Beam Pineapple
(07:00) - CascadiaJS preview + speaker lineup
(13:27) - Adam's new role at Shopify
(20:47) - Are React hooks officially dead?
(21:41) - The dev interview process is broken + interview tips
(31:01) - Gradient.style
(35:09) - Hot Take: no more React clones
(36:53) - Adam's OpenAI interview and NPM nightmares
(40:03) - AI and the future of web development
(52:06) - Dial-up is dead
(53:39) - Physical vs. digital media
(1:00:39) - Cracker Barrel’s makeover
Links
Jim Beam Pineapple: https://www.jimbeam.com/en-us/bourbons/jim-beam-pineapple
Taylor Swift: https://www.taylorswift.com/
Travis Kelce: https://x.com/tkelce
New Heights: https://www.youtube.com/@newheightshow
Jim Beam Pineapple: https://www.jimbeam.com/en-us/bourbons/jim-beam-pineapple
CascadiaJS: https://cascadiajs.com/
Vue.js: https://vuejs.org/
Carter Rabasa: https://carter.rabasa.com/
IBM: https://www.ibm.com/
Slack: https://www.slack.com/
Kent C. Dodds: https://kentcdodds.com/
CSS: https://www.w3.org/Style/CSS/
Kevin Whinnery: https://www.kevin.mn/
Deno: https://deno.com/
OpenAI: https://openai.com/
ChatGPT: https://chatgpt.com/
Charlie Gerard: https://charliegerard.dev/
Annie Sexton: https://bsky.app/profile/anniesexton.com
Shruti Kapoor: https://shrutikapoor.dev/
React: https://react.dev/
Big Sky Dev Con: https://bigskydevcon.com/
All Things Open: https://allthingsopen.org/
Shopify: https://www.shopify.com/
Vercel: https://vercel.com/
Ep 194: Static, Dynamic, Generative: What’s Next for the Web? w/ Guillermo Rauch: https://whiskey.fm/static-dynamic-generative-whats-next-for-the-web-w-guillermo-rauch
LeetCode: https://leetcode.com/
Michael Jackson: https://x.com/mjackson
Remix: https://remix.run/
React: https://react.dev/
Knockout: https://knockoutjs.com/
Discord: https://discord.com
HTML: https://www.w3schools.com/html/
Adam's resume: https://nerdy.dev/resume
Gradient.style: https://gradient.style/
Colorzilla: https://www.colorzilla.com/
Svelte: https://svelte.dev/
Wes Bos: https://wesbos.com/
Kiro: https://kiro.dev/
Windsurf: https://windsurf.ai/
Cursor: https://www.cursor.com/
Claude: https://claude.ai
Warp: https://www.warp.dev/
Zed: https://zed.dev/
Fireship: https://www.youtube.com/@fireship
Shepherd: https://www.shepherdjs.dev/
Tailwind CSS: https://tailwindcss.com/
Adam's LLM chat prototype: https://nerdy.dev/llm-chat-prototype
NPM: https://www.npmjs.com/
Alanis Morissette: https://alanis.com
Lex Fridman: https://lexfridman.com/
ASAP Rocky: https://en.wikipedia.org/wiki/ASAP_Rocky
Ken Wheeler: https://x.com/ken_wheeler/
Lincoln Park: https://en.wikipedia.org/wiki/Linkin_Park
Austin Powers: https://en.wikipedia.org/wiki/Austin_Powers
Sonos: https://www.sonos.com/
Google Home: https://home.google.com/welcome/
Beyond Tellerrand: https://beyondtellerrand.com/
Teenage Engineering K.O. II: https://teenage.engineering/store/ep-133
Elvis Presley: https://en.wikipedia.org/wiki/Elvis_Presley
Final Fantasy: https://en.wikipedia.org/wiki/Final_Fantasy
Cracker Barrel: https://www.crackerbarrel.com/
Logan's Roadhouse: https://logansroadhouse.com/
Connect with Adam
Website: https://nerdy.dev/
X / Twitter: https://x.com/argyleink
Connect with Chuck and Robbie
Robbie Wagner: https://x.com/RobbieTheWagner
Chuck Carpenter: https://x.com/CharlesWthe3rd
Subscribe and stay in touch
Website: https://whiskey.fm
Apple Podcasts: https://podcasts.apple.com/us/podcast/whiskey-web-and-whatnot/id1552776603
Spotify: https://open.spotify.com/show/19jiuHAqzeKnkleQUpZxDf
Overcast: https://overcast.fm/itunes1552776603
YouTube: https://www.youtube.com/@WhiskeyWebAndWhatnot
Whiskey Web and Whatnot Merch
Enjoying the podcast and want us to make more? Help support us by picking up some of our fresh merch at https://whiskey.fund.</description>
      <pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate>
      <guid>https://play.cdnstream1.com/s/radicalcompany/whiskey-web-and-whatnot-bda353/dial-up-is-dead-long-liv-09c534</guid>
      <enclosure url="https://pds.cdnstream1.com/p/radicalcompany/whiskey-web-and-whatnot-bda353/dial-up-is-dead-long-liv-09c534/audio.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Whiskey Web and Whatnot: Web Development, Neat</itunes:author>
      <itunes:summary>This week, Robbie and Adam talk about CascadiaJS, Adam’s new role at Shopify, and why tech interviews are so broken. They explore accessibility in front-end dev, the sameness of modern frameworks, and whether AI is the future of engineering or just another hype cycle.
In this episode:
(00:00) - Intro
(02:46) - Whiskey rating &amp; review: Jim Beam Pineapple
(07:00) - CascadiaJS preview + speaker lineup
(13:27) - Adam's new role at Shopify
(20:47) - Are React hooks officially dead?
(21:41) - The dev interview process is broken + interview tips
(31:01) - Gradient.style
(35:09) - Hot Take: no more React clones
(36:53) - Adam's OpenAI interview and NPM nightmares
(40:03) - AI and the future of web development
(52:06) - Dial-up is dead
(53:39) - Physical vs. digital media
(1:00:39) - Cracker Barrel’s makeover
Links
Jim Beam Pineapple: https://www.jimbeam.com/en-us/bourbons/jim-beam-pineapple
Taylor Swift: https://www.taylorswift.com/
Travis Kelce: https://x.com/tkelce
New Heights: https://www.youtube.com/@newheightshow
Jim Beam Pineapple: https://www.jimbeam.com/en-us/bourbons/jim-beam-pineapple
CascadiaJS: https://cascadiajs.com/
Vue.js: https://vuejs.org/
Carter Rabasa: https://carter.rabasa.com/
IBM: https://www.ibm.com/
Slack: https://www.slack.com/
Kent C. Dodds: https://kentcdodds.com/
CSS: https://www.w3.org/Style/CSS/
Kevin Whinnery: https://www.kevin.mn/
Deno: https://deno.com/
OpenAI: https://openai.com/
ChatGPT: https://chatgpt.com/
Charlie Gerard: https://charliegerard.dev/
Annie Sexton: https://bsky.app/profile/anniesexton.com
Shruti Kapoor: https://shrutikapoor.dev/
React: https://react.dev/
Big Sky Dev Con: https://bigskydevcon.com/
All Things Open: https://allthingsopen.org/
Shopify: https://www.shopify.com/
Vercel: https://vercel.com/
Ep 194: Static, Dynamic, Generative: What’s Next for the Web? w/ Guillermo Rauch: https://whiskey.fm/static-dynamic-generative-whats-next-for-the-web-w-guillermo-rauch
LeetCode: https://leetcode.com/
Michael Jackson: https://x.com/mjackson
Remix: https://remix.run/
React: https://react.dev/
Knockout: https://knockoutjs.com/
Discord: https://discord.com
HTML: https://www.w3schools.com/html/
Adam's resume: https://nerdy.dev/resume
Gradient.style: https://gradient.style/
Colorzilla: https://www.colorzilla.com/
Svelte: https://svelte.dev/
Wes Bos: https://wesbos.com/
Kiro: https://kiro.dev/
Windsurf: https://windsurf.ai/
Cursor: https://www.cursor.com/
Claude: https://claude.ai
Warp: https://www.warp.dev/
Zed: https://zed.dev/
Fireship: https://www.youtube.com/@fireship
Shepherd: https://www.shepherdjs.dev/
Tailwind CSS: https://tailwindcss.com/
Adam's LLM chat prototype: https://nerdy.dev/llm-chat-prototype
NPM: https://www.npmjs.com/
Alanis Morissette: https://alanis.com
Lex Fridman: https://lexfridman.com/
ASAP Rocky: https://en.wikipedia.org/wiki/ASAP_Rocky
Ken Wheeler: https://x.com/ken_wheeler/
Lincoln Park: https://en.wikipedia.org/wiki/Linkin_Park
Austin Powers: https://en.wikipedia.org/wiki/Austin_Powers
Sonos: https://www.sonos.com/
Google Home: https://home.google.com/welcome/
Beyond Tellerrand: https://beyondtellerrand.com/
Teenage Engineering K.O. II: https://teenage.engineering/store/ep-133
Elvis Presley: https://en.wikipedia.org/wiki/Elvis_Presley
Final Fantasy: https://en.wikipedia.org/wiki/Final_Fantasy
Cracker Barrel: https://www.crackerbarrel.com/
Logan's Roadhouse: https://logansroadhouse.com/
Connect with Adam
Website: https://nerdy.dev/
X / Twitter: https://x.com/argyleink
Connect with Chuck and Robbie
Robbie Wagner: https://x.com/RobbieTheWagner
Chuck Carpenter: https://x.com/CharlesWthe3rd
Subscribe and stay in touch
Website: https://whiskey.fm
Apple Podcasts: https://podcasts.apple.com/us/podcast/whiskey-web-and-whatnot/id1552776603
Spotify: https://open.spotify.com/show/19jiuHAqzeKnkleQUpZxDf
Overcast: https://overcast.fm/itunes1552776603
YouTube: https://www.youtube.com/@WhiskeyWebAndWhatnot
Whiskey Web and Whatnot Merch
Enjoying the podcast and want us to make more? Help support us by picking up some of our fresh merch at https://whiskey.fund.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>680: CSS random(), IDs in HTML, and Chris Goes Browser Shopping</title>
      <link>https://shoptalkshow.com/680/</link>
      <description>Show Description
A quick update on Dave's hair, CSS random(), view transitions in CSS, thinking about IDs in HTML, opening details elements in a new tab, Chris tries out Edge, Shift, Zen and more, how Dave is trying to kick his YouTube tab habit, and government design fails.
Listen on Website
Links

Monchhichi - Wikipedia
Rolling the Dice with CSS random() | WebKit
Cyd Stumpel | Portfolio Cyd Stumpel
Get to know Microsoft Edge on Mac | Microsoft Edge
Download Firefox for Desktop — from Mozilla
Zen Browser
Shift Browser | Drag and Drop. Build Your Custom Browser
Kagi Search - A Premium Search Engine
Limiting YouTube to a Single Tab - daverupert.com
America by Design Fail
18F - Wikipedia</description>
      <pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate>
      <guid>https://shoptalkshow.com/680/</guid>
      <enclosure url="https://cdn.simplecast.com/audio/167887a0-ac00-4cf9-bc69-b5ca845997db/episodes/audio/ea0b6cf5-ea5e-49f5-9576-8a6a6ce3a792/default_tc.mp3?nocache" type="audio/mpeg" length="0"/>
      <itunes:author>ShopTalk</itunes:author>
      <itunes:summary>Show Description
A quick update on Dave's hair, CSS random(), view transitions in CSS, thinking about IDs in HTML, opening details elements in a new tab, Chris tries out Edge, Shift, Zen and more, how Dave is trying to kick his YouTube tab habit, and government design fails.
Listen on Website
Links

Monchhichi - Wikipedia
Rolling the Dice with CSS random() | WebKit
Cyd Stumpel | Portfolio Cyd Stumpel
Get to know Microsoft Edge on Mac | Microsoft Edge
Download Firefox for Desktop — from Mozilla
Zen Browser
Shift Browser | Drag and Drop. Build Your Custom Browser
Kagi Search - A Premium Search Engine
Limiting YouTube to a Single Tab - daverupert.com
America by Design Fail
18F - Wikipedia</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Episode 476: How much help is too much help and guarding against slop</title>
      <link>https://softskills.audio/2025/09/01/episode-476-how-much-help-is-too-much-help-and-guarding-against-slop/</link>
      <description>In this episode, Dave and Jamison answer these questions:
Two junior engineers recently joined my team, and I’ve been tasked with onboarding them. This is the first time I’ve been responsible for junior devs, and I’m struggling with how to coach them up. For context, we’re a small engineering team where self-sufficiency is highly valued; processes/overhead is minimal, and we have a real bias for action. As such, when they ask me for help, my intuition is often to respond “Keep looking, figure it out!”; in my mind, walking them to the answer would be anthithetical to our culture and set the wrong expectation for how they should go about solving problems. This is especially the case when they throw their hands up and say “Help, I’m stuck, what do I do”. Though, I don’t want to be so unhelpful that it frustrates them or legitimately impedes their progress. I’ve also noticed them sometimes going “behind” me to ask others engineers for help, which makes me think that I am being too unhelpful. The number one question I ask myself is: How much help should I be giving them? How do I find the right balance here?
I’m seeing more and more AI slop in my org’s code base that I fear will have meaningful impact on the integrity and maintainability of the application we deliver to customers. Everyone talks the talk of “Ultimately, it’s the implementer’s responsibility to audit and understand the code they ship,” but few seem to walk the walk. How can I best work with my team to address this, especially in a context where leadership is prioritizing velocity?</description>
      <pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate>
      <guid>https://softskills.audio/2025/09/01/episode-476-how-much-help-is-too-much-help-and-guarding-against-slop/</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/download.softskills.audio/sse-476.mp3?source=rss" type="audio/mpeg" length="0"/>
      <itunes:author>Soft Skills Engineering</itunes:author>
      <itunes:summary>In this episode, Dave and Jamison answer these questions:
Two junior engineers recently joined my team, and I’ve been tasked with onboarding them. This is the first time I’ve been responsible for junior devs, and I’m struggling with how to coach them up. For context, we’re a small engineering team where self-sufficiency is highly valued; processes/overhead is minimal, and we have a real bias for action. As such, when they ask me for help, my intuition is often to respond “Keep looking, figure it out!”; in my mind, walking them to the answer would be anthithetical to our culture and set the wrong expectation for how they should go about solving problems. This is especially the case when they throw their hands up and say “Help, I’m stuck, what do I do”. Though, I don’t want to be so unhelpful that it frustrates them or legitimately impedes their progress. I’ve also noticed them sometimes going “behind” me to ask others engineers for help, which makes me think that I am being too unhelpful. The number one question I ask myself is: How much help should I be giving them? How do I find the right balance here?
I’m seeing more and more AI slop in my org’s code base that I fear will have meaningful impact on the integrity and maintainability of the application we deliver to customers. Everyone talks the talk of “Ultimately, it’s the implementer’s responsibility to audit and understand the code they ship,” but few seem to walk the walk. How can I best work with my team to address this, especially in a context where leadership is prioritizing velocity?</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Bun v1.2: SQL, YAML &amp; Security Scans</title>
      <link>https://www.buzzsprout.com/2226499</link>
      <description>Last episode, we lamented Claude’s lack of checkpoints to roll back code when it goes off the rails. Other devs feel the same, and this week Checkpoints for Claude Code debuted. It’s an MCP server that follows Claude Code, creating checkpoints when tasks are completed, allowing for easy reverts when needed.
The Bun team quietly pushed some nice new features in Bun v1.2. Highlights include: a unified SQL client with zero dependencies, native YAML file support, OS native credential storage for secrets, and a security scanner API that scans packages for vulnerabilities before installation.
And MCP-UI, a toolkit of interactive UI components for MCP has new features to support resources beyond text like embedded iframes and even raw HTML. Not all agents with MCP support can handle these new resources, but if they can, users can see product photos, data visualizations, and other mini sites right in their AI chat.
In the Lightning News section for this week, the folks at Deno leading the charge to get Oracle to relinquish its trademark for JavaScript need our help. Those legal bills aren’t going to pay themselves and Deno’s pockets aren’t nearly as deep as Oracle’s, so if you care about making JavaScript public domain (which it absolutely should be), please consider donating so they can keep fighting the good fight to free JS. Every little bit helps.
Timestamps:

00:48 - Claude Code thinking modes &amp; checkpoints
10:33 - Bun v1.2
17:04 - MCP-UI updates
23:06 - Claude for Chrome
28:12 - Donate to help Deno fight Oracle
30:24 - What’s making us happy

Links:

Paige - Bun v1.2
Jack - MCP-UI updates
TJ - Claude Code Thinking Modes &amp; Claude Code Checkpoints
Claude for Chrome
Donate to help Deno keep fighting Oracle in court
Paige - Zima Dental Pod
Jack - Foundation TV series
TJ - Babe Ruth commits fraud

Thanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.

Front-end Fire website
Blue Collar Coder on YouTube
Blue Collar Coder on Discord
Reach out via email
Tweet at us on X @front_end_fire
Follow us on Bluesky @front-end-fire.com
Subscribe to our YouTube channel @Front-EndFirePodcast</description>
      <pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate>
      <guid>https://www.buzzsprout.com/2226499</guid>
      <enclosure url="https://www.buzzsprout.com/2226499/episodes/17765026-bun-v1-2-sql-yaml-security-scans.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Front-End Fire</itunes:author>
      <itunes:summary>Last episode, we lamented Claude’s lack of checkpoints to roll back code when it goes off the rails. Other devs feel the same, and this week Checkpoints for Claude Code debuted. It’s an MCP server that follows Claude Code, creating checkpoints when tasks are completed, allowing for easy reverts when needed.
The Bun team quietly pushed some nice new features in Bun v1.2. Highlights include: a unified SQL client with zero dependencies, native YAML file support, OS native credential storage for secrets, and a security scanner API that scans packages for vulnerabilities before installation.
And MCP-UI, a toolkit of interactive UI components for MCP has new features to support resources beyond text like embedded iframes and even raw HTML. Not all agents with MCP support can handle these new resources, but if they can, users can see product photos, data visualizations, and other mini sites right in their AI chat.
In the Lightning News section for this week, the folks at Deno leading the charge to get Oracle to relinquish its trademark for JavaScript need our help. Those legal bills aren’t going to pay themselves and Deno’s pockets aren’t nearly as deep as Oracle’s, so if you care about making JavaScript public domain (which it absolutely should be), please consider donating so they can keep fighting the good fight to free JS. Every little bit helps.
Timestamps:

00:48 - Claude Code thinking modes &amp; checkpoints
10:33 - Bun v1.2
17:04 - MCP-UI updates
23:06 - Claude for Chrome
28:12 - Donate to help Deno fight Oracle
30:24 - What’s making us happy

Links:

Paige - Bun v1.2
Jack - MCP-UI updates
TJ - Claude Code Thinking Modes &amp; Claude Code Checkpoints
Claude for Chrome
Donate to help Deno keep fighting Oracle in court
Paige - Zima Dental Pod
Jack - Foundation TV series
TJ - Babe Ruth commits fraud

Thanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.

Front-end Fire website
Blue Collar Coder on YouTube
Blue Collar Coder on Discord
Reach out via email
Tweet at us on X @front_end_fire
Follow us on Bluesky @front-end-fire.com
Subscribe to our YouTube channel @Front-EndFirePodcast</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>The Biggest Mistakes Devs Make in Accessibility &amp; SEO</title>
      <link>https://podcasters.spotify.com/pod/show/modern-web/episodes/The-Biggest-Mistakes-Devs-Make-in-Accessibility--SEO-e37kj72</link>
      <description>In this episode, Rob Ocel and Danny Thompson enjoy a conversation with Kilian Valkhof, founder of Polypane, a browser built for developers who care deeply about their craft. The discussion explores the shifting landscape of online developer communities as conversations migrate from Twitter to Blue Sky, Mastodon, Discord, and local meetups. Kilian shares how this decentralization has shaped advocacy around accessibility, performance, and front-end principles, while Rob and Danny reflect on what developers lose and gain when there’s no longer a single central hub. They also dig into guiding principles for building quality front-end experiences, from usability and accessibility to balancing trade-offs between performance, readability, and SEO.


Key points from this episode
- Developers are finding their communities scattered across Blue Sky, Mastodon, Discord, and meetups, changing how ideas about accessibility and performance spread.
- Practical frameworks like “rule of three” and “make it run, make it right, make it fast” give developers clearer guidance than vague advice such as “don’t repeat yourself.”
- Building with craft means going beyond visual accuracy to include accessibility, usability, and small details that improve the overall user experience.
- Teams need to agree on priorities so they can navigate trade-offs between things like accessibility, performance, SEO, and readability.


Kilian Valkhof on Linkedin: https://www.linkedin.com/in/kilianvalkhof/
Rob Ocel on Linkedin: https://www.linkedin.com/in/robocel/
Danny Thompson on Linkedin: https://www.linkedin.com/in/dthompsondev/
This Dot Labs Twitter: https://x.com/ThisDotLabs
This Dot Media Twitter: https://x.com/ThisDotMedia
This Dot Labs Instagram: https://www.instagram.com/thisdotlabs/
This Dot Labs Facebook: https://www.facebook.com/thisdot/
This Dot Labs Bluesky: https://bsky.app/profile/thisdotlabs.bsky.social


Sponsored by This Dot Labs: https://ai.thisdot.co/</description>
      <pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/modern-web/episodes/The-Biggest-Mistakes-Devs-Make-in-Accessibility--SEO-e37kj72</guid>
      <enclosure url="https://anchor.fm/s/f9191780/podcast/play/107678370/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-8-3%2F406770841-44100-2-00a9fe69c04aa.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Modern Web</itunes:author>
      <itunes:summary>In this episode, Rob Ocel and Danny Thompson enjoy a conversation with Kilian Valkhof, founder of Polypane, a browser built for developers who care deeply about their craft. The discussion explores the shifting landscape of online developer communities as conversations migrate from Twitter to Blue Sky, Mastodon, Discord, and local meetups. Kilian shares how this decentralization has shaped advocacy around accessibility, performance, and front-end principles, while Rob and Danny reflect on what developers lose and gain when there’s no longer a single central hub. They also dig into guiding principles for building quality front-end experiences, from usability and accessibility to balancing trade-offs between performance, readability, and SEO.


Key points from this episode
- Developers are finding their communities scattered across Blue Sky, Mastodon, Discord, and meetups, changing how ideas about accessibility and performance spread.
- Practical frameworks like “rule of three” and “make it run, make it right, make it fast” give developers clearer guidance than vague advice such as “don’t repeat yourself.”
- Building with craft means going beyond visual accuracy to include accessibility, usability, and small details that improve the overall user experience.
- Teams need to agree on priorities so they can navigate trade-offs between things like accessibility, performance, SEO, and readability.


Kilian Valkhof on Linkedin: https://www.linkedin.com/in/kilianvalkhof/
Rob Ocel on Linkedin: https://www.linkedin.com/in/robocel/
Danny Thompson on Linkedin: https://www.linkedin.com/in/dthompsondev/
This Dot Labs Twitter: https://x.com/ThisDotLabs
This Dot Media Twitter: https://x.com/ThisDotMedia
This Dot Labs Instagram: https://www.instagram.com/thisdotlabs/
This Dot Labs Facebook: https://www.facebook.com/thisdot/
This Dot Labs Bluesky: https://bsky.app/profile/thisdotlabs.bsky.social


Sponsored by This Dot Labs: https://ai.thisdot.co/</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>François Best</title>
      <link>https://podcasters.spotify.com/pod/show/devtoolsfm/episodes/Franois-Best-e37kdcd</link>
      <description>This week we talk to Francois Best, the creator of Nuqs, a library for managing URL state in React. We talk about the origins of Nuqs, the challenges of managing URL state, and the future of the library.

https://francoisbest.com/
https://bsky.app/profile/francoisbest.com</description>
      <pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/devtoolsfm/episodes/Franois-Best-e37kdcd</guid>
      <enclosure url="https://anchor.fm/s/dd6922b4/podcast/play/107672397/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-8-2%2F406694975-44100-2-81830167b311b.m4a" type="audio/mpeg" length="0"/>
      <itunes:author>devtools.fm: Developer Tools, Open Source, Software Development</itunes:author>
      <itunes:summary>This week we talk to Francois Best, the creator of Nuqs, a library for managing URL state in React. We talk about the origins of Nuqs, the challenges of managing URL state, and the future of the library.

https://francoisbest.com/
https://bsky.app/profile/francoisbest.com</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>225-Angular - Actualización de Verano 2025</title>
      <link>https://podcasters.spotify.com/pod/show/fernando-her85/episodes/225-Angular---Actualizacion-de-Verano-2025-e37r9tb</link>
      <description>En este episodio de DevTalles repasamos las novedades del Angular Summer Update 2025, donde el equipo de Angular presentó mejoras clave como el soporte estable para aplicaciones sin Zone.js, nuevas formas de trabajar con animaciones más simples, optimizaciones en las plantillas y herramientas pensadas para integrarse con la inteligencia artificial. Además, DevTools ahora permite visualizar señales y rutas de forma más clara, se añadieron utilidades al test harness, y hasta el componente Mat Menu puede usarse como menú contextual. Todo esto apunta a un Angular más ligero, moderno y preparado para el futuro.


https://blog.angular.dev/angular-summer-update-2025-1987592a0b42</description>
      <pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/fernando-her85/episodes/225-Angular---Actualizacion-de-Verano-2025-e37r9tb</guid>
      <enclosure url="https://anchor.fm/s/4c227378/podcast/play/107898219/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-8-5%2F406973195-44100-2-9a15e54e6ed27.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>DevTalles</itunes:author>
      <itunes:summary>En este episodio de DevTalles repasamos las novedades del Angular Summer Update 2025, donde el equipo de Angular presentó mejoras clave como el soporte estable para aplicaciones sin Zone.js, nuevas formas de trabajar con animaciones más simples, optimizaciones en las plantillas y herramientas pensadas para integrarse con la inteligencia artificial. Además, DevTools ahora permite visualizar señales y rutas de forma más clara, se añadieron utilidades al test harness, y hasta el componente Mat Menu puede usarse como menú contextual. Todo esto apunta a un Angular más ligero, moderno y preparado para el futuro.


https://blog.angular.dev/angular-summer-update-2025-1987592a0b42</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>The useless useCallback: React performance myths unpacked, with Dominik Dorfmeister</title>
      <link>http://podrocket.logrocket.com/the-useless-usecallback-react-performance-myths-dominik-dorfmeister</link>
      <description>Dominik Dorfmeister unpacks the pitfalls of React’s useCallback and useMemo, revealing how these hooks often introduce more complexity than performance gains. He explores the promise of the React Compiler, the practical power of the “latest ref” pattern, and strategies to boost code readability and maintainability at scale.
Learn why overusing useEffect and manual memoization can do more harm than good, and how teams can level up their PR reviews and performance practices using tools like the ESLint React Compiler plugin.
Links
Bluesky: https://bsky.app/profile/tkdodo.eu
Github: https://github.com/tkdodo
X: https://x.com/TkDodo
Resources
The Useless useCallback: https://tkdodo.eu/blog/the-useless-use-callback
Chapters
00:00 Why talk about useCallback and useMemo
00:40 Are useCallback and useMemo actually useless?
02:00 When (if ever) memoization is worth it
07:30 Pitfalls of overusing memoization in PRs and team guidelines
12:10 Latest ref pattern as an alternative
18:40 React Compiler and ESLint support
23:30 Why self-reviews help catch unnecessary memoization
28:10 Do React docs encourage over-optimization?
33:00 Advice for React developers
We want to hear from you!
How did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?
Fill out our listener survey (https://t.co/oKVAEXipxu)! 
Let us know by sending an email to our producer, Em, at emily.kochanek@logrocket.com (mailto:emily.kochanek@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).
Follow us. Get free stickers.
Follow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!
What does LogRocket do?
LogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr) Special Guest: Dominik Dorfmeister.</description>
      <pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate>
      <guid>http://podrocket.logrocket.com/the-useless-usecallback-react-performance-myths-dominik-dorfmeister</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/aphid.fireside.fm/d/1437767933/3911462c-bca2-48c2-9103-610ba304c673/4b9f05fc-0e76-4230-ab23-0d38392844eb.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>PodRocket - A web development podcast from LogRocket</itunes:author>
      <itunes:summary>Dominik Dorfmeister unpacks the pitfalls of React’s useCallback and useMemo, revealing how these hooks often introduce more complexity than performance gains. He explores the promise of the React Compiler, the practical power of the “latest ref” pattern, and strategies to boost code readability and maintainability at scale.
Learn why overusing useEffect and manual memoization can do more harm than good, and how teams can level up their PR reviews and performance practices using tools like the ESLint React Compiler plugin.
Links
Bluesky: https://bsky.app/profile/tkdodo.eu
Github: https://github.com/tkdodo
X: https://x.com/TkDodo
Resources
The Useless useCallback: https://tkdodo.eu/blog/the-useless-use-callback
Chapters
00:00 Why talk about useCallback and useMemo
00:40 Are useCallback and useMemo actually useless?
02:00 When (if ever) memoization is worth it
07:30 Pitfalls of overusing memoization in PRs and team guidelines
12:10 Latest ref pattern as an alternative
18:40 React Compiler and ESLint support
23:30 Why self-reviews help catch unnecessary memoization
28:10 Do React docs encourage over-optimization?
33:00 Advice for React developers
We want to hear from you!
How did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?
Fill out our listener survey (https://t.co/oKVAEXipxu)! 
Let us know by sending an email to our producer, Em, at emily.kochanek@logrocket.com (mailto:emily.kochanek@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).
Follow us. Get free stickers.
Follow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!
What does LogRocket do?
LogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr) Special Guest: Dominik Dorfmeister.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>934: We Built a Real-Time, Local-Data, Competitive Coding Game</title>
      <link>https://syntax.fm</link>
      <description>Scott, Wes, and CJ dive into SynHax, Scott’s Hackweek project for code battles. They discuss live coding duels, referee controls, and the surprisingly simple tech stack that delivers instant updates and audience engagement.


Show Notes



00:00 Welcome to Syntax!


01:50 Brought to you by Sentry.io



02:30 What is SynHax?

This Button Broke Our Brains (CSS Challenge)





04:21 The Stack

SvelteKit

Postgres

Drizzle

Zero Sync

Better Auth

Syntax 931: How to make good choices when starting a coding project





07:39 How it works


15:03 The battle experience


28:28 Fun details


34:12 Creating new battles &amp; the admin dashboard



Hit us up on Socials!

Syntax: X Instagram Tiktok LinkedIn Threads

Wes: X Instagram Tiktok LinkedIn Threads

Scott: X Instagram Tiktok LinkedIn Threads

Randy: X Instagram YouTube Threads</description>
      <pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate>
      <guid>https://syntax.fm</guid>
      <enclosure url="https://traffic.megaphone.fm/FSI2874363155.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Syntax - Tasty Web Development Treats</itunes:author>
      <itunes:summary>Scott, Wes, and CJ dive into SynHax, Scott’s Hackweek project for code battles. They discuss live coding duels, referee controls, and the surprisingly simple tech stack that delivers instant updates and audience engagement.


Show Notes



00:00 Welcome to Syntax!


01:50 Brought to you by Sentry.io



02:30 What is SynHax?

This Button Broke Our Brains (CSS Challenge)





04:21 The Stack

SvelteKit

Postgres

Drizzle

Zero Sync

Better Auth

Syntax 931: How to make good choices when starting a coding project





07:39 How it works


15:03 The battle experience


28:28 Fun details


34:12 Creating new battles &amp; the admin dashboard



Hit us up on Socials!

Syntax: X Instagram Tiktok LinkedIn Threads

Wes: X Instagram Tiktok LinkedIn Threads

Scott: X Instagram Tiktok LinkedIn Threads

Randy: X Instagram YouTube Threads</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>933: Hackweek Overview - What Is It, What Did We Build</title>
      <link>https://syntax.fm/933</link>
      <description>It’s Hackweek at Syntax! Scott, Wes, and CJ break down what Hackweek is all about - how they picked their projects, what came out of them, and why it’s the best excuse to experiment, build, and have fun before the deep-dive episodes roll in.


Show Notes



00:00 Welcome to Syntax!


00:04 What is Hackweek?


01:05 Hackweek projects spark motivation.





04:05 Choosing our projects.


04:34 What we chose.





05:11 CJ’s Hackweek Project.


05:51 Using SGDK C language toolkit.


07:02 Writing to an Everdrive.


08:09 What game engine did you use?


Platformer Engine.


LDtk.





12:11 What was the end result?





14:09 Wes’ Hackweek Project.


16:15 Why hardware projects?


Watch the Video Here.





19:09 Scott’s Hackweek Project.


Watch the Video Here.


21:42 Early considerations.





25:42 AI usage.



Hit us up on Socials!

Syntax: X Instagram Tiktok LinkedIn Threads

Wes: X Instagram Tiktok LinkedIn Threads

Scott: X Instagram Tiktok LinkedIn Threads

Randy: X Instagram YouTube Threads</description>
      <pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate>
      <guid>https://syntax.fm/933</guid>
      <enclosure url="https://traffic.megaphone.fm/FSI6739948742.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Syntax - Tasty Web Development Treats</itunes:author>
      <itunes:summary>It’s Hackweek at Syntax! Scott, Wes, and CJ break down what Hackweek is all about - how they picked their projects, what came out of them, and why it’s the best excuse to experiment, build, and have fun before the deep-dive episodes roll in.


Show Notes



00:00 Welcome to Syntax!


00:04 What is Hackweek?


01:05 Hackweek projects spark motivation.





04:05 Choosing our projects.


04:34 What we chose.





05:11 CJ’s Hackweek Project.


05:51 Using SGDK C language toolkit.


07:02 Writing to an Everdrive.


08:09 What game engine did you use?


Platformer Engine.


LDtk.





12:11 What was the end result?





14:09 Wes’ Hackweek Project.


16:15 Why hardware projects?


Watch the Video Here.





19:09 Scott’s Hackweek Project.


Watch the Video Here.


21:42 Early considerations.





25:42 AI usage.



Hit us up on Socials!

Syntax: X Instagram Tiktok LinkedIn Threads

Wes: X Instagram Tiktok LinkedIn Threads

Scott: X Instagram Tiktok LinkedIn Threads

Randy: X Instagram YouTube Threads</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
  </channel>
</rss>