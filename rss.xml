<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link href="https://&lt;your-domain-here&gt;/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Weekly Podcast Updates</title>
    <link>https://&lt;your-project-link-here&gt;</link>
    <language>en-us</language>
    <description>Weekly digest of podcast episodes from week 43, starting 2025-10-20.</description>
    <lastBuildDate>Mon, 27 Oct 2025 00:15:16 GMT</lastBuildDate>
    <pubDate>Mon, 20 Oct 2025 00:00:00 GMT</pubDate>
    <item>
      <title>Rust Is Overrated w/ Naman Goel</title>
      <link>https://play.cdnstream1.com/s/radicalcompany/whiskey-web-and-whatnot-bda353/rust-is-overrated-w-nama-f4cbea</link>
      <description>This week, Robbie and Adam talk with Naman Goel about the origins and evolution of StyleX, how it integrates with React and other frameworks, and the pros and cons of different programming languages like Rust, TypeScript, and Swift. They dive into the challenges of building performant, type-safe styling systems, the surprising complexity of theme APIs, designing for developer experience, and more.
In this episode:
(00:00) - Intro
(02:26) - Whiskey rating &amp; review: Glenfiddich 12 Year Old single malt Scotch
(09:13) - South Park, spy thrillers &amp; sleeper hits you missed
(11:20) - Flow vs TypeScript
(14:59) - How CSS shaped Naman’s perspective on type systems
(18:45) - How StyleX works—and why it’s different from Tailwind
(21:02) - Tailwind Merge vs StyleX props: performance smackdown
(22:16) - Real-world use case: when and why you’d want to merge styles
(25:45) - Inside the making of StyleX and its powerful theming system
(32:56) - Robbie and Adam wrangle Vue transitions in Astro
(36:09) - GIF or JIF? SPA or “spa”?
(40:36) - Building StarPod.dev: streaming audio across pages
(42:30) - Can you reduce client-side router noise?
(46:03) - Should you spec your idea or just blog it?
(47:18) - Naman’s journey into writing web specs
(48:44) - What is link delegation?
(52:39) - Hot Take: Is Rust overrated?
(01:02:17) - The dream language Naman wishes someone would build
(01:04:57) - Are AI-generated programming languages just around the corner?
(01:05:53) - A spicy take on CSS syntax and readability
(01:06:27) - Is CSS finally catching up to StyleX?
(01:07:43) - Plugs &amp; where to follow Naman
Links
Glenfiddich 12 Year Old single malt Scotch: https://shop.us.glenfiddich.com/products/glenfiddich-12-year-old
South Park: https://en.wikipedia.org/wiki/South_Park
Dungeons &amp; Dragons: https://en.wikipedia.org/wiki/Dungeons_&amp;_Dragons
Alien Earth: https://en.wikipedia.org/wiki/Alien:_Earth
Ozark: https://en.wikipedia.org/wiki/Ozark_(TV_series)
Jason Bateman: https://en.wikipedia.org/wiki/Jason_Bateman
Black Rabbit: https://en.wikipedia.org/wiki/Black_Rabbit
Slow Horses: https://en.wikipedia.org/wiki/Slow_Horses
Slow Horses: https://en.wikipedia.org/wiki/Slow_Horses
Typescript: https://www.typescriptlang.org/
StyleX: https://stylexjs.com/
React: https://react.dev/
Tailwind CSS: https://tailwindcss.com/
SolidJS: https://www.solidjs.com/
Svelte: https://svelte.dev/
Vue: https://vuejs.org/
Astro: https://astro.build/
QuickJS: https://github.com/quickjs-ng/quickjs
Ember: https://emberjs.com/
Angular: https://angular.dev/
Vanilla Extract: https://vanilla-extract.style/
Chrome: https://www.google.com/chrome/
PHP: https://www.php.net/
Figma: https://www.figma.com/
Theme UI: https://theme-ui.com/
Stitches: https://stitches.dev/
Starpod.dev: https://starpod.dev/
Shopify: https://www.shopify.com/
Rails: https://rubyonrails.org/
Livewire: https://laravel-livewire.com/
Jason Miller - Application Holotypes: A Guide to Architecture Decisions: https://jasonformat.com/application-holotypes/
morphdom: https://github.com/patrick-steele-idem/morphdom
HTMX: https://htmx.org/
React Miami: https://www.reactmiami.com/
CSS-Tricks: https://css-tricks.com/
Swift: https://www.swift.org/
Python: https://www.python.org/
C++: https://learn.microsoft.com/en-us/cpp
Go: https://go.dev/
esbuild: https://esbuild.github.io/
OCaml: https://ocaml.org/
Prettier: https://prettier.io/
Haskell: https://www.haskell.org/
Elm: https://elm-lang.org/
CoffeeScript: http://coffeescript.org/
LightningScript: https://lightningscript.dev/
Anthropic: https://www.anthropic.com/
Chris Coyier: https://x.com/chriscoyier
React Summit: https://reactsummit.com/
Solenoid: https://github.com/nmn/solenoid
Connect with Naman
Website: https://nmn.sh/
X / Twitter: https://x.com/naman34
Bluesky: https://bsky.app/profile/nmn.bsky.social
Connect with the hosts
Robbie Wagner: https://x.com/RobbieTheWagner
Chuck Carpenter: https://x.com/CharlesWthe3rd
Adam Argyle: https://x.com/argyleink
Subscribe and stay in touch
Website: https://whiskey.fm
Apple Podcasts: https://podcasts.apple.com/us/podcast/whiskey-web-and-whatnot/id1552776603
Spotify: https://open.spotify.com/show/19jiuHAqzeKnkleQUpZxDf
Overcast: https://overcast.fm/itunes1552776603
YouTube: https://www.youtube.com/@WhiskeyWebAndWhatnot
Whiskey Web and Whatnot Merch
Enjoying the podcast and want us to make more? Help support us by picking up some of our fresh merch at https://whiskey.fund.</description>
      <pubDate>Mon, 20 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://play.cdnstream1.com/s/radicalcompany/whiskey-web-and-whatnot-bda353/rust-is-overrated-w-nama-f4cbea</guid>
      <enclosure url="https://op3.dev/e/pds.cdnstream1.com/p/radicalcompany/whiskey-web-and-whatnot-bda353/rust-is-overrated-w-nama-f4cbea/audio.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Whiskey Web and Whatnot: Web Development, Neat</itunes:author>
      <itunes:summary>This week, Robbie and Adam talk with Naman Goel about the origins and evolution of StyleX, how it integrates with React and other frameworks, and the pros and cons of different programming languages like Rust, TypeScript, and Swift. They dive into the challenges of building performant, type-safe styling systems, the surprising complexity of theme APIs, designing for developer experience, and more.
In this episode:
(00:00) - Intro
(02:26) - Whiskey rating &amp; review: Glenfiddich 12 Year Old single malt Scotch
(09:13) - South Park, spy thrillers &amp; sleeper hits you missed
(11:20) - Flow vs TypeScript
(14:59) - How CSS shaped Naman’s perspective on type systems
(18:45) - How StyleX works—and why it’s different from Tailwind
(21:02) - Tailwind Merge vs StyleX props: performance smackdown
(22:16) - Real-world use case: when and why you’d want to merge styles
(25:45) - Inside the making of StyleX and its powerful theming system
(32:56) - Robbie and Adam wrangle Vue transitions in Astro
(36:09) - GIF or JIF? SPA or “spa”?
(40:36) - Building StarPod.dev: streaming audio across pages
(42:30) - Can you reduce client-side router noise?
(46:03) - Should you spec your idea or just blog it?
(47:18) - Naman’s journey into writing web specs
(48:44) - What is link delegation?
(52:39) - Hot Take: Is Rust overrated?
(01:02:17) - The dream language Naman wishes someone would build
(01:04:57) - Are AI-generated programming languages just around the corner?
(01:05:53) - A spicy take on CSS syntax and readability
(01:06:27) - Is CSS finally catching up to StyleX?
(01:07:43) - Plugs &amp; where to follow Naman
Links
Glenfiddich 12 Year Old single malt Scotch: https://shop.us.glenfiddich.com/products/glenfiddich-12-year-old
South Park: https://en.wikipedia.org/wiki/South_Park
Dungeons &amp; Dragons: https://en.wikipedia.org/wiki/Dungeons_&amp;_Dragons
Alien Earth: https://en.wikipedia.org/wiki/Alien:_Earth
Ozark: https://en.wikipedia.org/wiki/Ozark_(TV_series)
Jason Bateman: https://en.wikipedia.org/wiki/Jason_Bateman
Black Rabbit: https://en.wikipedia.org/wiki/Black_Rabbit
Slow Horses: https://en.wikipedia.org/wiki/Slow_Horses
Slow Horses: https://en.wikipedia.org/wiki/Slow_Horses
Typescript: https://www.typescriptlang.org/
StyleX: https://stylexjs.com/
React: https://react.dev/
Tailwind CSS: https://tailwindcss.com/
SolidJS: https://www.solidjs.com/
Svelte: https://svelte.dev/
Vue: https://vuejs.org/
Astro: https://astro.build/
QuickJS: https://github.com/quickjs-ng/quickjs
Ember: https://emberjs.com/
Angular: https://angular.dev/
Vanilla Extract: https://vanilla-extract.style/
Chrome: https://www.google.com/chrome/
PHP: https://www.php.net/
Figma: https://www.figma.com/
Theme UI: https://theme-ui.com/
Stitches: https://stitches.dev/
Starpod.dev: https://starpod.dev/
Shopify: https://www.shopify.com/
Rails: https://rubyonrails.org/
Livewire: https://laravel-livewire.com/
Jason Miller - Application Holotypes: A Guide to Architecture Decisions: https://jasonformat.com/application-holotypes/
morphdom: https://github.com/patrick-steele-idem/morphdom
HTMX: https://htmx.org/
React Miami: https://www.reactmiami.com/
CSS-Tricks: https://css-tricks.com/
Swift: https://www.swift.org/
Python: https://www.python.org/
C++: https://learn.microsoft.com/en-us/cpp
Go: https://go.dev/
esbuild: https://esbuild.github.io/
OCaml: https://ocaml.org/
Prettier: https://prettier.io/
Haskell: https://www.haskell.org/
Elm: https://elm-lang.org/
CoffeeScript: http://coffeescript.org/
LightningScript: https://lightningscript.dev/
Anthropic: https://www.anthropic.com/
Chris Coyier: https://x.com/chriscoyier
React Summit: https://reactsummit.com/
Solenoid: https://github.com/nmn/solenoid
Connect with Naman
Website: https://nmn.sh/
X / Twitter: https://x.com/naman34
Bluesky: https://bsky.app/profile/nmn.bsky.social
Connect with the hosts
Robbie Wagner: https://x.com/RobbieTheWagner
Chuck Carpenter: https://x.com/CharlesWthe3rd
Adam Argyle: https://x.com/argyleink
Subscribe and stay in touch
Website: https://whiskey.fm
Apple Podcasts: https://podcasts.apple.com/us/podcast/whiskey-web-and-whatnot/id1552776603
Spotify: https://open.spotify.com/show/19jiuHAqzeKnkleQUpZxDf
Overcast: https://overcast.fm/itunes1552776603
YouTube: https://www.youtube.com/@WhiskeyWebAndWhatnot
Whiskey Web and Whatnot Merch
Enjoying the podcast and want us to make more? Help support us by picking up some of our fresh merch at https://whiskey.fund.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>687: Ben Frain on Responsive Design</title>
      <link>https://shoptalkshow.com/687/</link>
      <description>Show Description
Ben's got an updated edition of his book, Responsive Web Design with HTML5 and CSS, to chat about as well as how much AI is being inserted into writing, layers, scope, color contrast vs contrast color, shouldn't AI bots pay for data they slurp, iFrames permissions issues in Chrome, anchor positioning, and where have all the bloggers gone?
Listen on Website
Watch on YouTube
Guests
Ben Frain
Guest's Main URL • Guest's Social
I write web development books, make online courses, and publish YouTube videos.
Links

Ben Frain – author and web developer
Responsive Web Design with HTML5 and CSS available at Amazon
benfrain (GitHub)
Ben Frain - YouTube
JavaScript for Everyone - Piccalilli
BCD Watch
Sponsors
Atomic Design Certification Course
Master tokens AND atomic design to elevate your design systems game. Get access to both courses, which include hours of comprehensive video lessons, sample token architecture for Figma &amp; Code, process diagrams, exercises, and exclusive Slack!</description>
      <pubDate>Mon, 20 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://shoptalkshow.com/687/</guid>
      <enclosure url="https://cdn.simplecast.com/audio/167887a0-ac00-4cf9-bc69-b5ca845997db/episodes/290fc12f-b778-41e8-a012-adaeec6a6b5c/audio/882e4513-31d0-4ca0-9dec-8b777e3fa99a/default_tc.mp3?nocache" type="audio/mpeg" length="0"/>
      <itunes:author>ShopTalk</itunes:author>
      <itunes:summary>Show Description
Ben's got an updated edition of his book, Responsive Web Design with HTML5 and CSS, to chat about as well as how much AI is being inserted into writing, layers, scope, color contrast vs contrast color, shouldn't AI bots pay for data they slurp, iFrames permissions issues in Chrome, anchor positioning, and where have all the bloggers gone?
Listen on Website
Watch on YouTube
Guests
Ben Frain
Guest's Main URL • Guest's Social
I write web development books, make online courses, and publish YouTube videos.
Links

Ben Frain – author and web developer
Responsive Web Design with HTML5 and CSS available at Amazon
benfrain (GitHub)
Ben Frain - YouTube
JavaScript for Everyone - Piccalilli
BCD Watch
Sponsors
Atomic Design Certification Course
Master tokens AND atomic design to elevate your design systems game. Get access to both courses, which include hours of comprehensive video lessons, sample token architecture for Figma &amp; Code, process diagrams, exercises, and exclusive Slack!</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Episode 483: My team hated me from day one and should I stack PTO before my resignation</title>
      <link>https://softskills.audio/2025/10/20/episode-483-my-team-hated-me-from-day-one-and-should-i-stack-pto-before-my-resignation/</link>
      <description>In this episode, Dave and Jamison answer these questions:
How would you handle a situation where a team forms a negative opinion about you from day one — without any clear reason and without ever giving you a real chance to prove yourself?
Even when you contribute technically, your suggestions are ignored… until someone else repeats the same thing and suddenly it’s considered valid.
Is it possible to stay in that kind of environment without becoming bitter or burned out?
Can you keep contributing professionally — or is it healthier to just walk away?
You guys are awesome. Jamison, I interviewed with you and it was lots of fun and productive. Which is really rad.
Now… I just landed a 12-month contract in big tech role. It’s perfectly aligned with my long-term career goals. My current fintech FTE is perfectly opposed to my long-term career goals.
The question — how unethical / despicable would it be to start one week of PTO at my FTE on the same day as Day One at my contract role so that I can onboard without distractions and then put in my resignation upon returning to my FTE? What about two, three, or four weeks of PTO?
Also… are two-week notices still the default still in 2025?
Also also… I promise I’m not AI — I’ve been using em dashes since the 20th century.</description>
      <pubDate>Mon, 20 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://softskills.audio/2025/10/20/episode-483-my-team-hated-me-from-day-one-and-should-i-stack-pto-before-my-resignation/</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/download.softskills.audio/sse-483.mp3?source=rss" type="audio/mpeg" length="0"/>
      <itunes:author>Soft Skills Engineering</itunes:author>
      <itunes:summary>In this episode, Dave and Jamison answer these questions:
How would you handle a situation where a team forms a negative opinion about you from day one — without any clear reason and without ever giving you a real chance to prove yourself?
Even when you contribute technically, your suggestions are ignored… until someone else repeats the same thing and suddenly it’s considered valid.
Is it possible to stay in that kind of environment without becoming bitter or burned out?
Can you keep contributing professionally — or is it healthier to just walk away?
You guys are awesome. Jamison, I interviewed with you and it was lots of fun and productive. Which is really rad.
Now… I just landed a 12-month contract in big tech role. It’s perfectly aligned with my long-term career goals. My current fintech FTE is perfectly opposed to my long-term career goals.
The question — how unethical / despicable would it be to start one week of PTO at my FTE on the same day as Day One at my contract role so that I can onboard without distractions and then put in my resignation upon returning to my FTE? What about two, three, or four weeks of PTO?
Also… are two-week notices still the default still in 2025?
Also also… I promise I’m not AI — I’ve been using em dashes since the 20th century.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>118: Bun 1.3 - From Runtime to Full-Stack Powerhouse</title>
      <link>https://www.buzzsprout.com/2226499</link>
      <description>Back in May, the Remix cofounders revealed they were reimagining Remix v3 from the ground up, and this past week at Remix Jam, they gave a sneak peek of it. It’s fair to say this new framework shouldn’t be called Remix at all because it’s departed so far from its origins: devs manually update state, it uses signals, routes are defined in a TS doc, and it will ship with a component library, for starters. Will it catch on, who knows?
Not to be outdone by React v19.2 last week, Next.js 16 beta debuted (with support for React 19.2 included). In addition to the latest version of React, Next.js 16 has also declared Turbopack, RSC support, and React Compiler all stable, and improved its caching system as well.
And Bun is back in the news with the release of Bun 1.3, and it’s a doozy of a minor version release. Bun wants to be a full-stack JavaScript runtime as it now includes a full-stack dev server, built in support for MySQL and Redis DBs, routing, and the ability to package an entire project into one executable for cross-platform support. Well done, Bun team!
Chapter Markers:

01:14 - Remix v3
10:38 - Next.js 16 beta
17:35 - Bun 1.3
24:42 - Firefox 144 released w/view transition support
25:19 - HBO changes TV channel names
28:00 - W3C has a new logo
31:25 - What’s making us happy

News:

Paige - Bun 1.3
Jack - Remix v3
TJ - Next.js 16 beta

Lightning News:

Firefox 144 released w/view transition support
W3C has a new logo and the Gavin Belson signature from Silicon Valley 
HBO changes TV channel names

What Makes Us Happy this Week:

Paige - The Gilded Age TV series
Jack - KPop Demon Hunters
TJ - Madison, WI

Thanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.

Front-end Fire website
Blue Collar Coder on YouTube
Blue Collar Coder on Discord
Reach out via email
Tweet at us on X @front_end_fire
Follow us on Bluesky @front-end-fire.com</description>
      <pubDate>Mon, 20 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://www.buzzsprout.com/2226499</guid>
      <enclosure url="https://www.buzzsprout.com/2226499/episodes/18039546-118-bun-1-3-from-runtime-to-full-stack-powerhouse.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Front-End Fire</itunes:author>
      <itunes:summary>Back in May, the Remix cofounders revealed they were reimagining Remix v3 from the ground up, and this past week at Remix Jam, they gave a sneak peek of it. It’s fair to say this new framework shouldn’t be called Remix at all because it’s departed so far from its origins: devs manually update state, it uses signals, routes are defined in a TS doc, and it will ship with a component library, for starters. Will it catch on, who knows?
Not to be outdone by React v19.2 last week, Next.js 16 beta debuted (with support for React 19.2 included). In addition to the latest version of React, Next.js 16 has also declared Turbopack, RSC support, and React Compiler all stable, and improved its caching system as well.
And Bun is back in the news with the release of Bun 1.3, and it’s a doozy of a minor version release. Bun wants to be a full-stack JavaScript runtime as it now includes a full-stack dev server, built in support for MySQL and Redis DBs, routing, and the ability to package an entire project into one executable for cross-platform support. Well done, Bun team!
Chapter Markers:

01:14 - Remix v3
10:38 - Next.js 16 beta
17:35 - Bun 1.3
24:42 - Firefox 144 released w/view transition support
25:19 - HBO changes TV channel names
28:00 - W3C has a new logo
31:25 - What’s making us happy

News:

Paige - Bun 1.3
Jack - Remix v3
TJ - Next.js 16 beta

Lightning News:

Firefox 144 released w/view transition support
W3C has a new logo and the Gavin Belson signature from Silicon Valley 
HBO changes TV channel names

What Makes Us Happy this Week:

Paige - The Gilded Age TV series
Jack - KPop Demon Hunters
TJ - Madison, WI

Thanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.

Front-end Fire website
Blue Collar Coder on YouTube
Blue Collar Coder on Discord
Reach out via email
Tweet at us on X @front_end_fire
Follow us on Bluesky @front-end-fire.com</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>The One Mindset That Will 10x Your Dev Career (and Keep You Ahead of AI)</title>
      <link>https://podcasters.spotify.com/pod/show/modern-web/episodes/The-One-Mindset-That-Will-10x-Your-Dev-Career-and-Keep-You-Ahead-of-AI-e39qs53</link>
      <description>Rob Ocel and Danny Thompson go deep on intentionality, the developer “superpower” that can speed up your growth, sharpen your judgment, and keep you from getting automated away in the AI era. Rob unpacks a simple loop (state intent → act → measure → review) with real stories, including the ticket he challenged on day one that saved a team six figures, and the “it seems to work” anti-pattern that shipped a mystery bug. Together they show how being deliberate before you write a line of code changes everything: scoping tickets, estimating work, documenting decisions, reviewing PRs, and speaking up, even as a junior.What you’ll learn: • The intentionality loop: how to set a hypothesis, capture outcomes, and improve fast • The exact moment to ask “Should we even do this ticket?” and how to push back safely • Why code is the last step: design notes, edge cases, and review context first • Estimation that actually works: start naive, compare to actuals, iterate to ±10% • How to avoid DRY misuse, “tragedy of the commons” code reviews, and stealth tech debt • Where to keep your working notes (GitHub, Notion, SharePoint) so reviewers can follow your logic • How juniors can question assumptions without blocking the room or their careerRob Ocel on Linkedin: https://www.linkedin.com/in/robocel/
Danny Thompson on Linkedin: https://www.linkedin.com/in/dthompsondev/
This Dot Labs Twitter: https://x.com/ThisDotLabs
This Dot Media Twitter: https://x.com/ThisDotMediaThis Dot Labs 
Instagram: https://www.instagram.com/thisdotlabs/This Dot Labs
Facebook: https://www.facebook.com/thisdot/This Dot Labs
Bluesky: https://bsky.app/profile/thisdotlabs.bsky.socialSponsored by This Dot Labs: https://ai.thisdot.co/</description>
      <pubDate>Mon, 20 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/modern-web/episodes/The-One-Mindset-That-Will-10x-Your-Dev-Career-and-Keep-You-Ahead-of-AI-e39qs53</guid>
      <enclosure url="https://anchor.fm/s/f9191780/podcast/play/109981283/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-9-21%2F409664920-44100-2-597cf76fb59cb.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Modern Web</itunes:author>
      <itunes:summary>Rob Ocel and Danny Thompson go deep on intentionality, the developer “superpower” that can speed up your growth, sharpen your judgment, and keep you from getting automated away in the AI era. Rob unpacks a simple loop (state intent → act → measure → review) with real stories, including the ticket he challenged on day one that saved a team six figures, and the “it seems to work” anti-pattern that shipped a mystery bug. Together they show how being deliberate before you write a line of code changes everything: scoping tickets, estimating work, documenting decisions, reviewing PRs, and speaking up, even as a junior.What you’ll learn: • The intentionality loop: how to set a hypothesis, capture outcomes, and improve fast • The exact moment to ask “Should we even do this ticket?” and how to push back safely • Why code is the last step: design notes, edge cases, and review context first • Estimation that actually works: start naive, compare to actuals, iterate to ±10% • How to avoid DRY misuse, “tragedy of the commons” code reviews, and stealth tech debt • Where to keep your working notes (GitHub, Notion, SharePoint) so reviewers can follow your logic • How juniors can question assumptions without blocking the room or their careerRob Ocel on Linkedin: https://www.linkedin.com/in/robocel/
Danny Thompson on Linkedin: https://www.linkedin.com/in/dthompsondev/
This Dot Labs Twitter: https://x.com/ThisDotLabs
This Dot Media Twitter: https://x.com/ThisDotMediaThis Dot Labs 
Instagram: https://www.instagram.com/thisdotlabs/This Dot Labs
Facebook: https://www.facebook.com/thisdot/This Dot Labs
Bluesky: https://bsky.app/profile/thisdotlabs.bsky.socialSponsored by This Dot Labs: https://ai.thisdot.co/</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Oliver Medhurst - Porffor - JavaScript Ahead of Time Compiler</title>
      <link>https://podcasters.spotify.com/pod/show/devtoolsfm/episodes/Oliver-Medhurst---Porffor---JavaScript-Ahead-of-Time-Compiler-e39okc8</link>
      <description>This week we have Oliver Medhurst, the creator of Porffor. Porffor is a JavaScript ahead of time compiler that compiles JavaScript to WebAssembly. We talk about the technical details of how it works, and the future of JavaScript engines.

https://x.com/canadahonk
https://porffor.dev/
https://github.com/CanadaHonk/porffor
https://goose.icu/</description>
      <pubDate>Mon, 20 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/devtoolsfm/episodes/Oliver-Medhurst---Porffor---JavaScript-Ahead-of-Time-Compiler-e39okc8</guid>
      <enclosure url="https://anchor.fm/s/dd6922b4/podcast/play/109907784/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-9-20%2F409568837-44100-2-5038c23cc3993.m4a" type="audio/mpeg" length="0"/>
      <itunes:author>devtools.fm: Developer Tools, Open Source, Software Development</itunes:author>
      <itunes:summary>This week we have Oliver Medhurst, the creator of Porffor. Porffor is a JavaScript ahead of time compiler that compiles JavaScript to WebAssembly. We talk about the technical details of how it works, and the future of JavaScript engines.

https://x.com/canadahonk
https://porffor.dev/
https://github.com/CanadaHonk/porffor
https://goose.icu/</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>232: El día que AWS se cayó y medio internet con él</title>
      <link>https://podcasters.spotify.com/pod/show/fernando-her85/episodes/232-El-dia-que-AWS-se-cayo-y-medio-internet-con-el-e3a07sb</link>
      <description>Un fallo en el DNS de AWS dejó fuera de línea a miles de servicios y generó pérdidas millonarias. En este episodio analizamos qué pasó, qué nos enseña sobre resiliencia en la nube y cómo prepararnos para que un error así no derribe nuestras propias aplicaciones.


🔗 Mi Web Personal: https://fernando-herrera.com🎙️ Mi Podcast: https://anchor.fm/fernando-her85👥 Mi Twitter: https://twitter.com/Fernando_Her85🖼️ Mi Instagram: https://www.instagram.com/fernando_her85/👨🏻‍🏫 Perfil de instructor | Udemy: https://www.udemy.com/user/550c38655ec11/👨🏻‍💻 {d/t} DevTalles: https://cursos.devtalles.com/📺 {d/t} DevTalles YouTube: https://www.youtube.com/@DevTalles👨🏻‍🎓 {d/t} DevTalles LinkedIn: https://www.linkedin.com/company/devtalles/📱 {d/t} DevTalles Twitter: https://twitter.com/DevTalles🚀 {d/t} DevTalles Comunidad Discord: https://discord.gg/pBjEVYTC7t🎥 TikTok: https://www.tiktok.com/@devtallescorp👍 {d/t} DevTalles Facebook: https://www.facebook.com/DevTallesCorp💻 #Programacion #Development #Developer #FernandoHerrera #DevTalles #Fullstack #OnlineLearning #professor #instructor</description>
      <pubDate>Mon, 20 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/fernando-her85/episodes/232-El-dia-que-AWS-se-cayo-y-medio-internet-con-el-e3a07sb</guid>
      <enclosure url="https://anchor.fm/s/4c227378/podcast/play/110157131/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-9-24%2F409897578-44100-2-8cc23e3b143ba.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>DevTalles</itunes:author>
      <itunes:summary>Un fallo en el DNS de AWS dejó fuera de línea a miles de servicios y generó pérdidas millonarias. En este episodio analizamos qué pasó, qué nos enseña sobre resiliencia en la nube y cómo prepararnos para que un error así no derribe nuestras propias aplicaciones.


🔗 Mi Web Personal: https://fernando-herrera.com🎙️ Mi Podcast: https://anchor.fm/fernando-her85👥 Mi Twitter: https://twitter.com/Fernando_Her85🖼️ Mi Instagram: https://www.instagram.com/fernando_her85/👨🏻‍🏫 Perfil de instructor | Udemy: https://www.udemy.com/user/550c38655ec11/👨🏻‍💻 {d/t} DevTalles: https://cursos.devtalles.com/📺 {d/t} DevTalles YouTube: https://www.youtube.com/@DevTalles👨🏻‍🎓 {d/t} DevTalles LinkedIn: https://www.linkedin.com/company/devtalles/📱 {d/t} DevTalles Twitter: https://twitter.com/DevTalles🚀 {d/t} DevTalles Comunidad Discord: https://discord.gg/pBjEVYTC7t🎥 TikTok: https://www.tiktok.com/@devtallescorp👍 {d/t} DevTalles Facebook: https://www.facebook.com/DevTallesCorp💻 #Programacion #Development #Developer #FernandoHerrera #DevTalles #Fullstack #OnlineLearning #professor #instructor</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Macrodata Refinement with Ken Kunz</title>
      <link>https://share.transistor.fm/s/4c2ee27a</link>
      <description>In this episode of Svelte Radio, Ken Kunz joins the hosts to discuss his journey with Svelte, from discovering it
through Rich Harris's &quot;Rethinking Reactivity&quot; talk to building complex financial applications. Ken shares his
experience working on Trading Strategy, a decentralized finance platform, and the challenges of implementing
sophisticated charting solutions. 
The conversation also covers Ken's memorable Svelte Summit talk where he
recreated the Macrodata Refinement interface from the TV show Severance, complete with props and staying in
character throughout. The episode touches on testing philosophies, state management with his library Svelte-
FSM, and the newly launched Svelte Society Chicago chapter.
Notes

Trading Strategy
LayerChart
TradingView Lightweight Chart
xstate
svelte-fsm
Talk

Runed
Macrodata Refinement Talk
GitHub Repo
Website

Bert B's Svelte Summit Talk
Svelte Chicago

Picks

Kevin: Zen Browser
Zed
Zod

Antony: n8n
Active Pieces

Brittney: Tab Groups!
Ken: Rock Climbing!
Brene Brown</description>
      <pubDate>Mon, 20 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://share.transistor.fm/s/4c2ee27a</guid>
      <enclosure url="https://media.transistor.fm/4c2ee27a/fa587d43.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Svelte Radio</itunes:author>
      <itunes:summary>In this episode of Svelte Radio, Ken Kunz joins the hosts to discuss his journey with Svelte, from discovering it
through Rich Harris's &quot;Rethinking Reactivity&quot; talk to building complex financial applications. Ken shares his
experience working on Trading Strategy, a decentralized finance platform, and the challenges of implementing
sophisticated charting solutions. 
The conversation also covers Ken's memorable Svelte Summit talk where he
recreated the Macrodata Refinement interface from the TV show Severance, complete with props and staying in
character throughout. The episode touches on testing philosophies, state management with his library Svelte-
FSM, and the newly launched Svelte Society Chicago chapter.
Notes

Trading Strategy
LayerChart
TradingView Lightweight Chart
xstate
svelte-fsm
Talk

Runed
Macrodata Refinement Talk
GitHub Repo
Website

Bert B's Svelte Summit Talk
Svelte Chicago

Picks

Kevin: Zen Browser
Zed
Zod

Antony: n8n
Active Pieces

Brittney: Tab Groups!
Ken: Rock Climbing!
Brene Brown</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Ripple.js with Dominic Gannaway</title>
      <link>http://podrocket.logrocket.com/ripple-js-dominic-gannaway-logrocket-podrocket</link>
      <description>Dominic Gannaway joins us to talk about Ripple.js, a new TypeScript-first UI framework built with its own templating language and a focus on clarity and reactivity. We explore how Ripple.js handles fine-grained updates through its track and block system, why it avoids global state, and how context plays a key role. Dominic also walks us through the developer experience, from the language server and VS Code integration to syntax highlighting and the Prettier plugin, plus how the framework handles error boundaries, server-side rendering, future plans, and more.
Links
Twitter: https://x.com/trueadm
Github: https://github.com/trueadm
LinkedIn: https://www.linkedin.com/in/dominic-gannaway-414b7750
Resources
RippleJS GitHub: https://ripplejs.github.io
RippleJS website: https://www.ripplejs.com/
We want to hear from you!
How did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?
Fill out our listener survey (https://t.co/oKVAEXipxu)! https://t.co/oKVAEXipxu
Let us know by sending an email to our producer, Elizabeth, at elizabeth.becz@logrocket.com (mailto:elizabeth.becz@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).
Check out our newsletter (https://blog.logrocket.com/the-replay-newsletter/)! https://blog.logrocket.com/the-replay-newsletter/
Follow us. Get free stickers.
Follow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!
What does LogRocket do?
LogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr)
Chapters
00:00 – Intro &amp; What is RippleJS
01:00 – The Origins and Naming of Ripple
02:00 – A New UI Framework Built on TypeScript
03:30 – Creating a Custom Language and Templating System
05:00 – Building Ripple’s Tooling and Language Server
06:00 – The Team, Open Source Growth, and Early Feedback
07:00 – From UI Framework to Meta Framework
09:00 – Integrating AI into the Dev Server
10:30 – Handling Controversy and Changing the Status Quo
11:30 – How Ripple Was Built in a Week
13:00 – Redesigning the Reactivity System
16:00 – Why Ripple Doesn’t Use Global State
19:00 – Lessons Learned from Other Frameworks
21:00 – Naming Conventions and API Design Decisions
22:30 – Error Boundaries and Async Patterns in Ripple
24:00 – Accessibility and ByteDance Native App Integration
25:00 – The Team’s Workflow and Contributor Culture
27:00 – Building TypeScript-First from Scratch
29:00 – Language Server, Source Maps, and VS Code Integration
31:00 – Building in Public and Open Source Collaboration
32:30 – The Future of Frontend Frameworks
34:00 – How Ripple’s Ideas Might Influence Others
35:00 – AI, Security, and the Road Ahead
36:00 – Closing Thoughts &amp; How to Get Involved</description>
      <pubDate>Mon, 20 Oct 2025 00:00:00 GMT</pubDate>
      <guid>http://podrocket.logrocket.com/ripple-js-dominic-gannaway-logrocket-podrocket</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/aphid.fireside.fm/d/1437767933/3911462c-bca2-48c2-9103-610ba304c673/dfdce165-49aa-45d7-8de9-03e6ac9eb9e1.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>PodRocket</itunes:author>
      <itunes:summary>Dominic Gannaway joins us to talk about Ripple.js, a new TypeScript-first UI framework built with its own templating language and a focus on clarity and reactivity. We explore how Ripple.js handles fine-grained updates through its track and block system, why it avoids global state, and how context plays a key role. Dominic also walks us through the developer experience, from the language server and VS Code integration to syntax highlighting and the Prettier plugin, plus how the framework handles error boundaries, server-side rendering, future plans, and more.
Links
Twitter: https://x.com/trueadm
Github: https://github.com/trueadm
LinkedIn: https://www.linkedin.com/in/dominic-gannaway-414b7750
Resources
RippleJS GitHub: https://ripplejs.github.io
RippleJS website: https://www.ripplejs.com/
We want to hear from you!
How did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?
Fill out our listener survey (https://t.co/oKVAEXipxu)! https://t.co/oKVAEXipxu
Let us know by sending an email to our producer, Elizabeth, at elizabeth.becz@logrocket.com (mailto:elizabeth.becz@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).
Check out our newsletter (https://blog.logrocket.com/the-replay-newsletter/)! https://blog.logrocket.com/the-replay-newsletter/
Follow us. Get free stickers.
Follow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!
What does LogRocket do?
LogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr)
Chapters
00:00 – Intro &amp; What is RippleJS
01:00 – The Origins and Naming of Ripple
02:00 – A New UI Framework Built on TypeScript
03:30 – Creating a Custom Language and Templating System
05:00 – Building Ripple’s Tooling and Language Server
06:00 – The Team, Open Source Growth, and Early Feedback
07:00 – From UI Framework to Meta Framework
09:00 – Integrating AI into the Dev Server
10:30 – Handling Controversy and Changing the Status Quo
11:30 – How Ripple Was Built in a Week
13:00 – Redesigning the Reactivity System
16:00 – Why Ripple Doesn’t Use Global State
19:00 – Lessons Learned from Other Frameworks
21:00 – Naming Conventions and API Design Decisions
22:30 – Error Boundaries and Async Patterns in Ripple
24:00 – Accessibility and ByteDance Native App Integration
25:00 – The Team’s Workflow and Contributor Culture
27:00 – Building TypeScript-First from Scratch
29:00 – Language Server, Source Maps, and VS Code Integration
31:00 – Building in Public and Open Source Collaboration
32:30 – The Future of Frontend Frameworks
34:00 – How Ripple’s Ideas Might Influence Others
35:00 – AI, Security, and the Road Ahead
36:00 – Closing Thoughts &amp; How to Get Involved</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Source maps: how does the magic work? with Nicolo Ribaudo</title>
      <link>http://podrocket.logrocket.com/source-maps-nicolo-ribaudo</link>
      <description>Ever wondered how source maps actually work? In this episode, Nicolo Ribaudo, Babel maintainer and TC39 delegate, breaks down how source maps connect your JavaScript, TypeScript, and CSS back to the original code — making debugging, stack traces, and observability smoother in Chrome dev tools.
We dive into how source maps help in both development and production with minified code, explore tools like Webpack, Rollup, Next.js, and Svelte, and share when you should turn off source maps to avoid confusion.
Links
Website: https://nicr.dev
LinkedIn: https://www.linkedin.com/in/nicol%C3%B2-ribaudo-bb94b4187
BlueSky: https://bsky.app/profile/nicr.dev
Github: https://github.com/nicolo-ribaudo
Resources
Squiggleconf talk: https://squiggleconf.com/2025/sessions#source-maps-how-does-the-magic-work
Slide deck: https://docs.google.com/presentation/d/1lyor5xgv821I4kUWJIwrrmXBjzC_qiqIqcZxve1ybw0
We want to hear from you!
How did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?
Fill out our listener survey (https://t.co/oKVAEXipxu)! https://t.co/oKVAEXipxu
Let us know by sending an email to our producer, Elizabeth, at elizabet.becz@logrocket.com (mailto:elizabeth.becz@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).
Check out our newsletter (https://blog.logrocket.com/the-replay-newsletter/)! https://blog.logrocket.com/the-replay-newsletter/
Follow us. Get free stickers.
Follow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!
What does LogRocket do?
LogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr)
Chapters
00:00 Intro – Welcome to PodRocket + Introducing Nicolo Ribaudo
00:45 What Are Source Maps and Why They Matter for Debugging
01:20 From Babel to TC39 – Nicolo’s Path to Source Maps
02:00 Source Maps Beyond JavaScript: CSS, C, and WebAssembly
03:00 The Core Idea – Mapping Compiled Code Back to Source
04:00 How Source Maps Work Under the Hood (Encoded JSON)
05:10 File Size and Performance – Why It Doesn’t Matter in Production
06:00 Why Source Maps Are Useful Even Without Minification
07:00 Sentry and Error Monitoring – How Source Maps Are Used in Production
08:10 Two Worlds: Local Debugging vs. Remote Error Analysis
09:00 You’re Probably Using Source Maps Without Realizing It
10:00 Why Standardization Was Needed After 15+ Years of Chaos
11:00 TC39 and the Creation of the Official Source Maps Standard
12:00 Coordinating Browsers, Tools, and Vendors Under One Spec
13:00 How Chrome, Firefox, and WebKit Implement Source Maps Differently
14:00 Why the Source Maps Working Group Moves Faster Than Other Standards
15:00 A Small, Focused Group of DevTools Engineers
16:00 How Build Tools and Bundlers Feed Into the Ecosystem
17:00 Making It Easier for Tool Authors to Generate Source Maps
18:00 How Frameworks Like Next.js and Vite Handle Source Maps for You
19:00 Common Pitfalls When Chaining Build Tools
20:00 Debugging Wrong or Broken Source Maps in Browsers
21:00 Upcoming Feature: Scopes for Variables and Functions
22:00 How Scopes Improve the Live Debugging Experience
23:00 Experimental Implementations and How to Try Them
24:00 Where to Find the TC39 Source Maps Group + Get Involved
25:00 Nicolo’s Links – GitHub, BlueSky, and Talks Online
25:30 Closing Thoughts</description>
      <pubDate>Mon, 20 Oct 2025 00:00:00 GMT</pubDate>
      <guid>http://podrocket.logrocket.com/source-maps-nicolo-ribaudo</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/aphid.fireside.fm/d/1437767933/3911462c-bca2-48c2-9103-610ba304c673/f5b5a2e3-8ab0-422c-a96a-6c083c0e48c4.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>PodRocket</itunes:author>
      <itunes:summary>Ever wondered how source maps actually work? In this episode, Nicolo Ribaudo, Babel maintainer and TC39 delegate, breaks down how source maps connect your JavaScript, TypeScript, and CSS back to the original code — making debugging, stack traces, and observability smoother in Chrome dev tools.
We dive into how source maps help in both development and production with minified code, explore tools like Webpack, Rollup, Next.js, and Svelte, and share when you should turn off source maps to avoid confusion.
Links
Website: https://nicr.dev
LinkedIn: https://www.linkedin.com/in/nicol%C3%B2-ribaudo-bb94b4187
BlueSky: https://bsky.app/profile/nicr.dev
Github: https://github.com/nicolo-ribaudo
Resources
Squiggleconf talk: https://squiggleconf.com/2025/sessions#source-maps-how-does-the-magic-work
Slide deck: https://docs.google.com/presentation/d/1lyor5xgv821I4kUWJIwrrmXBjzC_qiqIqcZxve1ybw0
We want to hear from you!
How did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?
Fill out our listener survey (https://t.co/oKVAEXipxu)! https://t.co/oKVAEXipxu
Let us know by sending an email to our producer, Elizabeth, at elizabet.becz@logrocket.com (mailto:elizabeth.becz@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).
Check out our newsletter (https://blog.logrocket.com/the-replay-newsletter/)! https://blog.logrocket.com/the-replay-newsletter/
Follow us. Get free stickers.
Follow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!
What does LogRocket do?
LogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr)
Chapters
00:00 Intro – Welcome to PodRocket + Introducing Nicolo Ribaudo
00:45 What Are Source Maps and Why They Matter for Debugging
01:20 From Babel to TC39 – Nicolo’s Path to Source Maps
02:00 Source Maps Beyond JavaScript: CSS, C, and WebAssembly
03:00 The Core Idea – Mapping Compiled Code Back to Source
04:00 How Source Maps Work Under the Hood (Encoded JSON)
05:10 File Size and Performance – Why It Doesn’t Matter in Production
06:00 Why Source Maps Are Useful Even Without Minification
07:00 Sentry and Error Monitoring – How Source Maps Are Used in Production
08:10 Two Worlds: Local Debugging vs. Remote Error Analysis
09:00 You’re Probably Using Source Maps Without Realizing It
10:00 Why Standardization Was Needed After 15+ Years of Chaos
11:00 TC39 and the Creation of the Official Source Maps Standard
12:00 Coordinating Browsers, Tools, and Vendors Under One Spec
13:00 How Chrome, Firefox, and WebKit Implement Source Maps Differently
14:00 Why the Source Maps Working Group Moves Faster Than Other Standards
15:00 A Small, Focused Group of DevTools Engineers
16:00 How Build Tools and Bundlers Feed Into the Ecosystem
17:00 Making It Easier for Tool Authors to Generate Source Maps
18:00 How Frameworks Like Next.js and Vite Handle Source Maps for You
19:00 Common Pitfalls When Chaining Build Tools
20:00 Debugging Wrong or Broken Source Maps in Browsers
21:00 Upcoming Feature: Scopes for Variables and Functions
22:00 How Scopes Improve the Live Debugging Experience
23:00 Experimental Implementations and How to Try Them
24:00 Where to Find the TC39 Source Maps Group + Get Involved
25:00 Nicolo’s Links – GitHub, BlueSky, and Talks Online
25:30 Closing Thoughts</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Making Monorepos Breakproof with Anton Stoychev - JSJ 694</title>
      <link>https://www.spreaker.com/episode/making-monorepos-breakproof-with-anton-stoychev-jsj-694--68259508</link>
      <description>In this solo-hosted episode, I (Steve Edwards) dive deep into the world of modern monorepos with special guest Anton Stoychev from Yotpo. Anton shares his journey from the early days of PHP and IE6 nightmares to his current work in front-end infrastructure, performance optimization, and developer tooling.
We talk about the challenges of managing dependencies, upgrading tools without breaking your codebase, and the evolution of developer experience across teams and companies. Anton also introduces Breakproof, Yotpo’s open-source monorepo template designed to make dependency management and tool upgrades painless—even when working with multiple Node.js versions, runtimes like Bun and Deno, and complex CI environments.
If you’ve ever struggled with upgrading Jest, ESLint, or TypeScript in a large monorepo, or you’re curious how to isolate dependencies to keep your codebase maintainable over time, this episode is a must-listen.
🔗 Links &amp; Resources
🔧 Breakproof on GitHub: breakproof.dev
🧠 Yotpo LTD on GitHub: Yotpo Breakproof Base Monorepo
💬 Follow Anton Stoychev: stoychev.dev on BlueSky

Become a supporter of this podcast: https://www.spreaker.com/podcast/javascript-jabber--6102064/support.</description>
      <pubDate>Mon, 20 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://www.spreaker.com/episode/making-monorepos-breakproof-with-anton-stoychev-jsj-694--68259508</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/api.spreaker.com/download/episode/68259508/jsj_694.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>JavaScript Jabber</itunes:author>
      <itunes:summary>In this solo-hosted episode, I (Steve Edwards) dive deep into the world of modern monorepos with special guest Anton Stoychev from Yotpo. Anton shares his journey from the early days of PHP and IE6 nightmares to his current work in front-end infrastructure, performance optimization, and developer tooling.
We talk about the challenges of managing dependencies, upgrading tools without breaking your codebase, and the evolution of developer experience across teams and companies. Anton also introduces Breakproof, Yotpo’s open-source monorepo template designed to make dependency management and tool upgrades painless—even when working with multiple Node.js versions, runtimes like Bun and Deno, and complex CI environments.
If you’ve ever struggled with upgrading Jest, ESLint, or TypeScript in a large monorepo, or you’re curious how to isolate dependencies to keep your codebase maintainable over time, this episode is a must-listen.
🔗 Links &amp; Resources
🔧 Breakproof on GitHub: breakproof.dev
🧠 Yotpo LTD on GitHub: Yotpo Breakproof Base Monorepo
💬 Follow Anton Stoychev: stoychev.dev on BlueSky

Become a supporter of this podcast: https://www.spreaker.com/podcast/javascript-jabber--6102064/support.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
  </channel>
</rss>