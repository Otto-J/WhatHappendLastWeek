<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link href="https://&lt;your-domain-here&gt;/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Weekly Podcast Updates</title>
    <link>https://&lt;your-project-link-here&gt;</link>
    <language>en-us</language>
    <description>Weekly digest of podcast episodes from week 41, starting 2025-10-06.</description>
    <lastBuildDate>Mon, 13 Oct 2025 00:14:31 GMT</lastBuildDate>
    <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
    <item>
      <title>Is CSS a Programming Language? w/ Kevin Powell</title>
      <link>https://play.cdnstream1.com/s/radicalcompany/whiskey-web-and-whatnot-bda353/is-css-a-programming-lan-884758</link>
      <description>This week, Robbie and Adam talk with Kevin Powell about the quirks and complexities of CSS, from Tailwind and Flexbox to AI’s failure to write decent styles. While sipping some Crown Royal Black, they dig into weird web history, emerging CSS specs, toast milestones, and the beauty of clean code.
In this episode:
(00:00) - Intro
(02:51) - Whiskey rating &amp; review: Crown Royal Black
(07:54) - Hot Take: Is CSS a programming language?
(09:54) - Hot Take: Was CSS-in-JS a mistake?
(10:53) - Hot Take: Grid vs Flexbox
(12:31) - Hot Take: Tailwind vs vanilla CSS?
(16:05) - Kevin's favorite place to write CSS
(17:45) - What CSS feature scares Kevin the most?
(19:20) - Kevin's first CSS pre-processor
(22:40) - CSS features that are taking too long to ship
(27:22) - text-box-trim vs margin-trim
(29:53) - Why attr() is a game-changer for CSS
(31:18) - NPM package chaos and security concerns
(32:16) - The “billion laughs” CSS attack
(33:19) - Why can't AI write CSS?
(36:52) - Wake-and-bake? Kevin’s sourdough &amp; kombucha hobby
(38:42) - Kevin’s homebrewing and water shortage woes
(40:28) - Hobbies, football, and making time for fun
(42:44) - What would Kevin do if not in tech?
(44:41) - Kevin's favorite CSS typo
(45:58) - Rebuilding Tailwind from scratch
(46:53) - Vanilla CSS vs. Tailwind: Who wins a coding race?
(50:08) - Plugs
Links
Crown Royal Black: https://www.crownroyal.com/canadian-whisky/crown-royal-black
All Things Open: https://allthingsopen.org/
General Musings: https://www.youtube.com/@GeneralMusings
Frontend Masters: https://frontendmasters.com/
Shopify: https://www.shopify.com/
Ken Wheeler: https://x.com/ken_wheeler/
JavaScript: https://developer.mozilla.org/en-US/docs/Web/JavaScript
Figma: https://www.figma.com/
CSS Grid: https://www.w3schools.com/css/css_grid.asp
Flexbox: https://www.w3schools.com/css/css3_flexbox.asp
Tailwind CSS: https://tailwindcss.com/
Grok: https://grok.com/
CodePen: https://codepen.io/
VS Code: https://code.visualstudio.com
Emmet: https://emmet.io/
Vue: https://vuejs.org/
Saas: https://sass-lang.com/
Stylus: https://www.npmjs.com/package/stylus
TypeScript: https://www.typescriptlang.org/
CoffeeScript: http://coffeescript.org/
Sarah Soueidan: https://twitter.com/SaraSoueidan
Shepherd: https://www.shepherdjs.dev/
NPM: https://www.npmjs.com/
Swatch: https://swatch.dev/
Colorzilla: https://www.colorzilla.com/
TinyColor: https://bgrins.github.io/TinyColor/
CrowdStrike: https://www.crowdstrike.com/
Ember: https://emberjs.com/
GitHub: https://github.com/
Chris Coyier: https://x.com/chriscoyier
Virginia Tech: https://www.vt.edu/
The Eagles: https://www.philadelphiaeagles.com/
Saquon Barkley: https://en.wikipedia.org/wiki/Saquon_Barkley
Adam Wathan: https://x.com/adamwathan/
Kevin on YouTube: https://www.youtube.com/kevinpowell
Connect with Kevin
Website: https://www.kevinpowell.co/
Bluesky: https://bsky.app/profile/kevinpowell.co
Courses: https://www.kevinpowell.co/courses/
Connect with the hosts
Robbie Wagner: https://x.com/RobbieTheWagner
Chuck Carpenter: https://x.com/CharlesWthe3rd
Adam Argyle: https://x.com/argyleink
Subscribe and stay in touch
Website: https://whiskey.fm
Apple Podcasts: https://podcasts.apple.com/us/podcast/whiskey-web-and-whatnot/id1552776603
Spotify: https://open.spotify.com/show/19jiuHAqzeKnkleQUpZxDf
Overcast: https://overcast.fm/itunes1552776603
YouTube: https://www.youtube.com/@WhiskeyWebAndWhatnot
Whiskey Web and Whatnot Merch
Enjoying the podcast and want us to make more? Help support us by picking up some of our fresh merch at https://whiskey.fund.</description>
      <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://play.cdnstream1.com/s/radicalcompany/whiskey-web-and-whatnot-bda353/is-css-a-programming-lan-884758</guid>
      <enclosure url="https://op3.dev/e/pds.cdnstream1.com/p/radicalcompany/whiskey-web-and-whatnot-bda353/is-css-a-programming-lan-884758/audio.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Whiskey Web and Whatnot: Web Development, Neat</itunes:author>
      <itunes:summary>This week, Robbie and Adam talk with Kevin Powell about the quirks and complexities of CSS, from Tailwind and Flexbox to AI’s failure to write decent styles. While sipping some Crown Royal Black, they dig into weird web history, emerging CSS specs, toast milestones, and the beauty of clean code.
In this episode:
(00:00) - Intro
(02:51) - Whiskey rating &amp; review: Crown Royal Black
(07:54) - Hot Take: Is CSS a programming language?
(09:54) - Hot Take: Was CSS-in-JS a mistake?
(10:53) - Hot Take: Grid vs Flexbox
(12:31) - Hot Take: Tailwind vs vanilla CSS?
(16:05) - Kevin's favorite place to write CSS
(17:45) - What CSS feature scares Kevin the most?
(19:20) - Kevin's first CSS pre-processor
(22:40) - CSS features that are taking too long to ship
(27:22) - text-box-trim vs margin-trim
(29:53) - Why attr() is a game-changer for CSS
(31:18) - NPM package chaos and security concerns
(32:16) - The “billion laughs” CSS attack
(33:19) - Why can't AI write CSS?
(36:52) - Wake-and-bake? Kevin’s sourdough &amp; kombucha hobby
(38:42) - Kevin’s homebrewing and water shortage woes
(40:28) - Hobbies, football, and making time for fun
(42:44) - What would Kevin do if not in tech?
(44:41) - Kevin's favorite CSS typo
(45:58) - Rebuilding Tailwind from scratch
(46:53) - Vanilla CSS vs. Tailwind: Who wins a coding race?
(50:08) - Plugs
Links
Crown Royal Black: https://www.crownroyal.com/canadian-whisky/crown-royal-black
All Things Open: https://allthingsopen.org/
General Musings: https://www.youtube.com/@GeneralMusings
Frontend Masters: https://frontendmasters.com/
Shopify: https://www.shopify.com/
Ken Wheeler: https://x.com/ken_wheeler/
JavaScript: https://developer.mozilla.org/en-US/docs/Web/JavaScript
Figma: https://www.figma.com/
CSS Grid: https://www.w3schools.com/css/css_grid.asp
Flexbox: https://www.w3schools.com/css/css3_flexbox.asp
Tailwind CSS: https://tailwindcss.com/
Grok: https://grok.com/
CodePen: https://codepen.io/
VS Code: https://code.visualstudio.com
Emmet: https://emmet.io/
Vue: https://vuejs.org/
Saas: https://sass-lang.com/
Stylus: https://www.npmjs.com/package/stylus
TypeScript: https://www.typescriptlang.org/
CoffeeScript: http://coffeescript.org/
Sarah Soueidan: https://twitter.com/SaraSoueidan
Shepherd: https://www.shepherdjs.dev/
NPM: https://www.npmjs.com/
Swatch: https://swatch.dev/
Colorzilla: https://www.colorzilla.com/
TinyColor: https://bgrins.github.io/TinyColor/
CrowdStrike: https://www.crowdstrike.com/
Ember: https://emberjs.com/
GitHub: https://github.com/
Chris Coyier: https://x.com/chriscoyier
Virginia Tech: https://www.vt.edu/
The Eagles: https://www.philadelphiaeagles.com/
Saquon Barkley: https://en.wikipedia.org/wiki/Saquon_Barkley
Adam Wathan: https://x.com/adamwathan/
Kevin on YouTube: https://www.youtube.com/kevinpowell
Connect with Kevin
Website: https://www.kevinpowell.co/
Bluesky: https://bsky.app/profile/kevinpowell.co
Courses: https://www.kevinpowell.co/courses/
Connect with the hosts
Robbie Wagner: https://x.com/RobbieTheWagner
Chuck Carpenter: https://x.com/CharlesWthe3rd
Adam Argyle: https://x.com/argyleink
Subscribe and stay in touch
Website: https://whiskey.fm
Apple Podcasts: https://podcasts.apple.com/us/podcast/whiskey-web-and-whatnot/id1552776603
Spotify: https://open.spotify.com/show/19jiuHAqzeKnkleQUpZxDf
Overcast: https://overcast.fm/itunes1552776603
YouTube: https://www.youtube.com/@WhiskeyWebAndWhatnot
Whiskey Web and Whatnot Merch
Enjoying the podcast and want us to make more? Help support us by picking up some of our fresh merch at https://whiskey.fund.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>685: Fix My Home Tech, What’s Up with Firefox, and the MVP Car</title>
      <link>https://shoptalkshow.com/685/</link>
      <description>Show Description
Who's the person to hire when your home network isn't working as reliably as it should? And while we're at it - can you also fix Dave's Find My notifications? What's the plan with Firefox in 2025? And Dave blogs (and mouth blogs) about his struggles with the MVP car.
Listen on Website
Watch on YouTube
Links

Why I hate the MVP car - daverupert.com
TalkShop Show w/ Macho Man Randy Standards - Whiskey Web and Whatnot: Web Development, Neat - Episode 212
Sponsors
Atomic Design Certification Course
Master tokens AND atomic design to elevate your design systems game. Get access to both courses, which include hours of comprehensive video lessons, sample token architecture for Figma &amp; Code, process diagrams, exercises, and exclusive Slack!</description>
      <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://shoptalkshow.com/685/</guid>
      <enclosure url="https://cdn.simplecast.com/audio/167887a0-ac00-4cf9-bc69-b5ca845997db/episodes/5711c6a4-c20c-41d3-8f1c-a84846af4a71/audio/d7388571-0d75-4073-bbf0-0c904ab9ebf0/default_tc.mp3?nocache" type="audio/mpeg" length="0"/>
      <itunes:author>ShopTalk</itunes:author>
      <itunes:summary>Show Description
Who's the person to hire when your home network isn't working as reliably as it should? And while we're at it - can you also fix Dave's Find My notifications? What's the plan with Firefox in 2025? And Dave blogs (and mouth blogs) about his struggles with the MVP car.
Listen on Website
Watch on YouTube
Links

Why I hate the MVP car - daverupert.com
TalkShop Show w/ Macho Man Randy Standards - Whiskey Web and Whatnot: Web Development, Neat - Episode 212
Sponsors
Atomic Design Certification Course
Master tokens AND atomic design to elevate your design systems game. Get access to both courses, which include hours of comprehensive video lessons, sample token architecture for Figma &amp; Code, process diagrams, exercises, and exclusive Slack!</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Episode 481: I'm bored and will I ever find out why I was fired?</title>
      <link>https://softskills.audio/2025/10/06/episode-481-i'm-bored-and-will-i-ever-find-out-why-i-was-fired/</link>
      <description>In this episode, Dave and Jamison answer these questions:
Hi Dave and Jamison,
After fleeing a sinking ship of a startup, I became a solo developer at a medium sized college. This role has really allowed me to expand and grow in ways that I haven’t imagined, but I have encountered an interesting issue I didn’t have in the startup world: there isn’t much to do.
At my one year mark, I was promoted into a management position, but with no direct report. I will soon have an employee under me doing data integrations. My manager has been reluctant to give me data integrations work despite knowing that I want to understand what my employee will be working with.
I’ve found some of my own projects, but I’ve completed them all. I’m getting bored. I’m a competent developer, learn fast, and get things done quickly. Recently I’ve been planning an upgrade to some of our legacy code, but it will take probably a year or more to complete.
Some former colleagues reached out about working with them for a substantial pay bump, but I don’t like the idea of leaving after just over a year and a half. Do I keep riding it out here, or is it time to start looking else where?
Thank you both for this wonderful podcast. Its a joy to listen to on my walks. I’m sure I get stared at when I try to hide a laugh or grin from the amazing list of Patron names and your commentary.
I was recently terminated a few months before my 1 year vesting cliff as an IC2 for being days (not weeks) late on 3 or 4 stories. The late ones were defined incorrectly by management, or were for paying technical debt created by senior engineers, and my manager knew this. I had no IC2 or IC1 peers on my team for comparison. My performance review for the first half of 2025 was not released to me, I was fired when I would have seen it. This means the only reasoning that management has shared with me was my late work. In 1 on 1s before, my lateness has been something my manager has mentioned, but never a warning of termination (or a “pip” as some call it) and no indication that it’s anything more than an area to improve. The org has made poor decisions that left them tight on funds, and I feel the most financially responsible thing for them to do was fire me rather than give me a warning which would let me hit my cliff or lay me off where they’d give more on my way out.
Had I been pipped or laid off, I would not be asking about this. Should I go with the confusing justification that my boss was truthful in his attribution of my firing without warning to my lateness (and can you help me understand why that’s professionally justified)? Should I go with the disheartening approach and brainstorm other shortcomings that would better justify an unwarned firing, possibly spurring professional growth or a career change? Or should I say I got instafired because of penny pinching and opaque management?</description>
      <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://softskills.audio/2025/10/06/episode-481-i'm-bored-and-will-i-ever-find-out-why-i-was-fired/</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/download.softskills.audio/sse-481.mp3?source=rss" type="audio/mpeg" length="0"/>
      <itunes:author>Soft Skills Engineering</itunes:author>
      <itunes:summary>In this episode, Dave and Jamison answer these questions:
Hi Dave and Jamison,
After fleeing a sinking ship of a startup, I became a solo developer at a medium sized college. This role has really allowed me to expand and grow in ways that I haven’t imagined, but I have encountered an interesting issue I didn’t have in the startup world: there isn’t much to do.
At my one year mark, I was promoted into a management position, but with no direct report. I will soon have an employee under me doing data integrations. My manager has been reluctant to give me data integrations work despite knowing that I want to understand what my employee will be working with.
I’ve found some of my own projects, but I’ve completed them all. I’m getting bored. I’m a competent developer, learn fast, and get things done quickly. Recently I’ve been planning an upgrade to some of our legacy code, but it will take probably a year or more to complete.
Some former colleagues reached out about working with them for a substantial pay bump, but I don’t like the idea of leaving after just over a year and a half. Do I keep riding it out here, or is it time to start looking else where?
Thank you both for this wonderful podcast. Its a joy to listen to on my walks. I’m sure I get stared at when I try to hide a laugh or grin from the amazing list of Patron names and your commentary.
I was recently terminated a few months before my 1 year vesting cliff as an IC2 for being days (not weeks) late on 3 or 4 stories. The late ones were defined incorrectly by management, or were for paying technical debt created by senior engineers, and my manager knew this. I had no IC2 or IC1 peers on my team for comparison. My performance review for the first half of 2025 was not released to me, I was fired when I would have seen it. This means the only reasoning that management has shared with me was my late work. In 1 on 1s before, my lateness has been something my manager has mentioned, but never a warning of termination (or a “pip” as some call it) and no indication that it’s anything more than an area to improve. The org has made poor decisions that left them tight on funds, and I feel the most financially responsible thing for them to do was fire me rather than give me a warning which would let me hit my cliff or lay me off where they’d give more on my way out.
Had I been pipped or laid off, I would not be asking about this. Should I go with the confusing justification that my boss was truthful in his attribution of my firing without warning to my lateness (and can you help me understand why that’s professionally justified)? Should I go with the disheartening approach and brainstorm other shortcomings that would better justify an unwarned firing, possibly spurring professional growth or a career change? Or should I say I got instafired because of penny pinching and opaque management?</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Claude Code Levels Up: VS Code Extension, Checkpoints &amp; Sonnet 4.5</title>
      <link>https://www.buzzsprout.com/2226499</link>
      <description>Anthropic dropped a bunch of good Claude Code updates. There’s a new a native VS Code extension, a v2 of the terminal version of Claude, code checkpoints, and it’s all powered by Sonnet 4.5, Anthropic’s best coding model yet.
On top of Claude’s glow up, the Google Chrome team launched a Chrome DevTools MCP. AI coding assistants will be able to debug web pages directly in a Chrome browser, including using DevTools to review network requests, console output and page structure, simulate user interactions, and even automate performance audits.
In a poorly planned move, the CEO of Vercel tweeted a picture of himself meeting with the controversial Israeli Prime minister, Benjamin Netanyahu. This sparked a massive online backlash, some Vercel employees quit, and many customers are leaving the hosting site and vowing to stop using Next.js, as well. 
Timestamps:

00:46 - Claude Sonnet and Claude Code updates
7:55 - Chrome DevTools MCP
13:50 - Vercel Drama
19:03 - State of JS survey is open
20:21 - GitHub’s plan to make npm more secure
25:30 - Meta builds data center the size of 70 football fields
29:04 - What’s making us happy

Links:

Paige - Chrome DevTools MCP
Jack - Vercel’s in hot water after a selfie with Benjamin Netanyahu
TJ - Claude Code levels up
State of JS survey is open
GitHub’s got a plan to make npm more secure
Meta builds AI data center the size of 70 football fields
Paige - Star Trek: Strange New Worlds season 3
Jack - reactnorway.com

Thanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.

Front-end Fire website
Blue Collar Coder on YouTube
Blue Collar Coder on Discord
Reach out via email
Tweet at us on X @front_end_fire
Follow us on Bluesky @front-end-fire.com
Subscribe to our YouTube channel @Front-EndFirePodcast</description>
      <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://www.buzzsprout.com/2226499</guid>
      <enclosure url="https://www.buzzsprout.com/2226499/episodes/17961495-claude-code-levels-up-vs-code-extension-checkpoints-sonnet-4-5.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Front-End Fire</itunes:author>
      <itunes:summary>Anthropic dropped a bunch of good Claude Code updates. There’s a new a native VS Code extension, a v2 of the terminal version of Claude, code checkpoints, and it’s all powered by Sonnet 4.5, Anthropic’s best coding model yet.
On top of Claude’s glow up, the Google Chrome team launched a Chrome DevTools MCP. AI coding assistants will be able to debug web pages directly in a Chrome browser, including using DevTools to review network requests, console output and page structure, simulate user interactions, and even automate performance audits.
In a poorly planned move, the CEO of Vercel tweeted a picture of himself meeting with the controversial Israeli Prime minister, Benjamin Netanyahu. This sparked a massive online backlash, some Vercel employees quit, and many customers are leaving the hosting site and vowing to stop using Next.js, as well. 
Timestamps:

00:46 - Claude Sonnet and Claude Code updates
7:55 - Chrome DevTools MCP
13:50 - Vercel Drama
19:03 - State of JS survey is open
20:21 - GitHub’s plan to make npm more secure
25:30 - Meta builds data center the size of 70 football fields
29:04 - What’s making us happy

Links:

Paige - Chrome DevTools MCP
Jack - Vercel’s in hot water after a selfie with Benjamin Netanyahu
TJ - Claude Code levels up
State of JS survey is open
GitHub’s got a plan to make npm more secure
Meta builds AI data center the size of 70 football fields
Paige - Star Trek: Strange New Worlds season 3
Jack - reactnorway.com

Thanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.

Front-end Fire website
Blue Collar Coder on YouTube
Blue Collar Coder on Discord
Reach out via email
Tweet at us on X @front_end_fire
Follow us on Bluesky @front-end-fire.com
Subscribe to our YouTube channel @Front-EndFirePodcast</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>How NPM Auto-Updates &amp; Post-Install Scripts Could Hijack Your Org</title>
      <link>https://podcasters.spotify.com/pod/show/modern-web/episodes/How-NPM-Auto-Updates--Post-Install-Scripts-Could-Hijack-Your-Org-e392jm6</link>
      <description>In this Modern Web Podcast, Rob Ocel and Danny Thompson break down the recent string of NPM supply chain attacks that have shaken the JavaScript ecosystem. They cover the NX compromise, the phishing campaign that hit libraries like Chalk, and the Shy Halood exploit, showing how small changes in dependencies can have massive effects. Along the way, they share practical defenses like using package lock and npm ci, avoiding phishing links, reviewing third party code, applying least privilege, staging deployments, and maintaining incident response plans. They also highlight vendor interventions such as Vercel blocking malicious deployments and stress why companies must support open source maintainers if the ecosystem is to remain secure.


Key Points from this Episode:
- Lock down installs. Pin versions, commit package-lock.json, use npm ci in CI, and disable scripts in CI (npm config set ignore-scripts true) to neutralize post-install attacks.
- Harden people &amp; permissions. Phishing hygiene (never click-through emails), 2FA/hardware keys, least-privilege by default, and separate/purpose-scoped publishing accounts.
- Stage &amp; detect early. Canary/staged deploys, feature flags, and tight observability to catch dependency drift, suspicious network egress, or monkey-patched APIs fast.
- Practice incident response. Two-hour containment target: revoke/rotate tokens, reimage affected machines, roll back artifacts, notify vendors, and run a post-mortem playbook.


Rob Ocel on Linkedin: https://www.linkedin.com/in/robocel/
Danny Thompson on Linkedin: https://www.linkedin.com/in/dthompsondev/
This Dot Labs Twitter: https://x.com/ThisDotLabs
This Dot Media Twitter: https://x.com/ThisDotMedia
This Dot Labs Instagram: https://www.instagram.com/thisdotlabs/
This Dot Labs Facebook: https://www.facebook.com/thisdot/
This Dot Labs Bluesky: https://bsky.app/profile/thisdotlabs.bsky.social


Sponsored by This Dot Labs: https://ai.thisdot.co/</description>
      <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/modern-web/episodes/How-NPM-Auto-Updates--Post-Install-Scripts-Could-Hijack-Your-Org-e392jm6</guid>
      <enclosure url="https://anchor.fm/s/f9191780/podcast/play/109186182/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-9-3%2F408628471-44100-2-3307f18dc8017.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Modern Web</itunes:author>
      <itunes:summary>In this Modern Web Podcast, Rob Ocel and Danny Thompson break down the recent string of NPM supply chain attacks that have shaken the JavaScript ecosystem. They cover the NX compromise, the phishing campaign that hit libraries like Chalk, and the Shy Halood exploit, showing how small changes in dependencies can have massive effects. Along the way, they share practical defenses like using package lock and npm ci, avoiding phishing links, reviewing third party code, applying least privilege, staging deployments, and maintaining incident response plans. They also highlight vendor interventions such as Vercel blocking malicious deployments and stress why companies must support open source maintainers if the ecosystem is to remain secure.


Key Points from this Episode:
- Lock down installs. Pin versions, commit package-lock.json, use npm ci in CI, and disable scripts in CI (npm config set ignore-scripts true) to neutralize post-install attacks.
- Harden people &amp; permissions. Phishing hygiene (never click-through emails), 2FA/hardware keys, least-privilege by default, and separate/purpose-scoped publishing accounts.
- Stage &amp; detect early. Canary/staged deploys, feature flags, and tight observability to catch dependency drift, suspicious network egress, or monkey-patched APIs fast.
- Practice incident response. Two-hour containment target: revoke/rotate tokens, reimage affected machines, roll back artifacts, notify vendors, and run a post-mortem playbook.


Rob Ocel on Linkedin: https://www.linkedin.com/in/robocel/
Danny Thompson on Linkedin: https://www.linkedin.com/in/dthompsondev/
This Dot Labs Twitter: https://x.com/ThisDotLabs
This Dot Media Twitter: https://x.com/ThisDotMedia
This Dot Labs Instagram: https://www.instagram.com/thisdotlabs/
This Dot Labs Facebook: https://www.facebook.com/thisdot/
This Dot Labs Bluesky: https://bsky.app/profile/thisdotlabs.bsky.social


Sponsored by This Dot Labs: https://ai.thisdot.co/</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Gabriel Nordeborn - Rescript</title>
      <link>https://podcasters.spotify.com/pod/show/devtoolsfm/episodes/Gabriel-Nordeborn---Rescript-e3952di</link>
      <description>This week we talk to Gabriel Nordeborn, a core member of the Rescript team. Rescript is a langauge that compiles to JS but has some serious superpowers. Whether it is it's awesome pattern matching, or greate react integartoin there is a lot to love. Come learn about it with us.


https://rescript-lang.org/
https://github.com/zth
https://x.com/___zth___</description>
      <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/devtoolsfm/episodes/Gabriel-Nordeborn---Rescript-e3952di</guid>
      <enclosure url="https://anchor.fm/s/dd6922b4/podcast/play/109266802/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-9-6%2F408732346-44100-2-59f10999362ca.m4a" type="audio/mpeg" length="0"/>
      <itunes:author>devtools.fm: Developer Tools, Open Source, Software Development</itunes:author>
      <itunes:summary>This week we talk to Gabriel Nordeborn, a core member of the Rescript team. Rescript is a langauge that compiles to JS but has some serious superpowers. Whether it is it's awesome pattern matching, or greate react integartoin there is a lot to love. Come learn about it with us.


https://rescript-lang.org/
https://github.com/zth
https://x.com/___zth___</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>230: Angular – Nueva convención de nombres</title>
      <link>https://podcasters.spotify.com/pod/show/fernando-her85/episodes/230-Angular--Nueva-convencion-de-nombres-e39amv0</link>
      <description>En este episodio hablaremos sobre la nueva convención de nombres para componentes, directivas y servicios de Angular, que se puede sentir como un breaking change, pero no lo es.


🔗 Mi Web Personal: https://fernando-herrera.com🎙️ Mi Podcast: https://anchor.fm/fernando-her85👥 Mi Twitter: https://twitter.com/Fernando_Her85🖼️ Mi Instagram: https://www.instagram.com/fernando_her85/👨🏻‍🏫 Perfil de instructor | Udemy: https://www.udemy.com/user/550c38655ec11/👨🏻‍💻 {d/t} DevTalles: https://cursos.devtalles.com/📺 {d/t} DevTalles YouTube: https://www.youtube.com/@DevTalles👨🏻‍🎓 {d/t} DevTalles LinkedIn: https://www.linkedin.com/company/devtalles/📱 {d/t} DevTalles Twitter: https://twitter.com/DevTalles🚀 {d/t} DevTalles Comunidad Discord: https://discord.gg/pBjEVYTC7t🎥 TikTok: https://www.tiktok.com/@devtallescorp👍 {d/t} DevTalles Facebook: https://www.facebook.com/DevTallesCorp💻 #Programacion #Development #Developer #FernandoHerrera #DevTalles #Fullstack #OnlineLearning #professor #instructor</description>
      <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://podcasters.spotify.com/pod/show/fernando-her85/episodes/230-Angular--Nueva-convencion-de-nombres-e39amv0</guid>
      <enclosure url="https://anchor.fm/s/4c227378/podcast/play/109451680/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-9-9%2F408973120-44100-2-b22d85b7ccd47.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>DevTalles</itunes:author>
      <itunes:summary>En este episodio hablaremos sobre la nueva convención de nombres para componentes, directivas y servicios de Angular, que se puede sentir como un breaking change, pero no lo es.


🔗 Mi Web Personal: https://fernando-herrera.com🎙️ Mi Podcast: https://anchor.fm/fernando-her85👥 Mi Twitter: https://twitter.com/Fernando_Her85🖼️ Mi Instagram: https://www.instagram.com/fernando_her85/👨🏻‍🏫 Perfil de instructor | Udemy: https://www.udemy.com/user/550c38655ec11/👨🏻‍💻 {d/t} DevTalles: https://cursos.devtalles.com/📺 {d/t} DevTalles YouTube: https://www.youtube.com/@DevTalles👨🏻‍🎓 {d/t} DevTalles LinkedIn: https://www.linkedin.com/company/devtalles/📱 {d/t} DevTalles Twitter: https://twitter.com/DevTalles🚀 {d/t} DevTalles Comunidad Discord: https://discord.gg/pBjEVYTC7t🎥 TikTok: https://www.tiktok.com/@devtallescorp👍 {d/t} DevTalles Facebook: https://www.facebook.com/DevTallesCorp💻 #Programacion #Development #Developer #FernandoHerrera #DevTalles #Fullstack #OnlineLearning #professor #instructor</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Remote Functions with Simon Holthausen</title>
      <link>https://share.transistor.fm/s/00e6fcc4</link>
      <description>Summary
In this episode, Simon Holthausen from the Svelte team joins to discuss remote functions and async Svelte, two
experimental features that are changing how developers interact with data in SvelteKit applications. Remote
functions offer a new RPC-like approach that provides better type safety, more granular data loading, and
improved developer experience compared to traditional load functions and form actions. The conversation
covers the technical implementation, design decisions, and future possibilities including caching, streaming, and
integration with Svelte's upcoming resource API. Simon also explains how async Svelte enables top-level await
in components with coordinated loading boundaries, making asynchronous work much easier to manage in both
SSR and SPA contexts.

Links

Remote Functions Documentation
Remote Functions Video by Simon
Follow-up Video by Simon

Picks

Simon: Elgato Wave Microphone
Kevin: CalDigit Thunderbolt 5 Dock TS5 Plus</description>
      <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://share.transistor.fm/s/00e6fcc4</guid>
      <enclosure url="https://media.transistor.fm/00e6fcc4/722a9de6.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Svelte Radio</itunes:author>
      <itunes:summary>Summary
In this episode, Simon Holthausen from the Svelte team joins to discuss remote functions and async Svelte, two
experimental features that are changing how developers interact with data in SvelteKit applications. Remote
functions offer a new RPC-like approach that provides better type safety, more granular data loading, and
improved developer experience compared to traditional load functions and form actions. The conversation
covers the technical implementation, design decisions, and future possibilities including caching, streaming, and
integration with Svelte's upcoming resource API. Simon also explains how async Svelte enables top-level await
in components with coordinated loading boundaries, making asynchronous work much easier to manage in both
SSR and SPA contexts.

Links

Remote Functions Documentation
Remote Functions Video by Simon
Follow-up Video by Simon

Picks

Simon: Elgato Wave Microphone
Kevin: CalDigit Thunderbolt 5 Dock TS5 Plus</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Semantic HTML still matters with Jono Alderson</title>
      <link>http://podrocket.logrocket.com/semantic-html-still-matters-with-jono-alderson</link>
      <description>Jono Alderson joins the podcast to discuss why semantic HTML still matters today. He shares how thoughtful markup can improve accessibility and performance, from using the picture tag and responsive images to optimizing with content-visibility CSS. The conversation dives into common pitfalls like div soup, the shift toward more template-centric design, and techniques for improving the critical rendering path. Jono also discusses preloading, HTTP early hints, and the evolving role of structured data, LLMs, and Google’s trust signals in shaping a more meaningful and efficient web.
Links
Website: https://www.jonoalderson.com
X: https://x.com/jonoalderson
BlueSky: https://bsky.app/profile/jono.id
LinkedIn: https://www.linkedin.com/in/jonoalderson
Resources
Why semantic HTML still matters: https://www.jonoalderson.com/conjecture/why-semantic-html-still-matters/
Chapters
00:40 Meet Jono Alderson: SEO Consultant and Web Performance Expert
02:00 Why Semantic HTML Still Matters in 2025
05:00 Accessibility, Performance, and the 15% Market Opportunity
08:00 The Cost of Div Soup and Framework Abstraction
10:30 Finding Balance: Developer Experience vs User Experience
13:00 Template-Centric Thinking vs Component-Centric Development
16:00 What Is a Page? Rethinking How the Web Works
18:30 Structured Data, Schema.org, and Google’s Trust Signals
21:00 Quick Round: Picture Tag, Content Visibility, and Performance
23:30 The Worst HTML Anti-Patterns Developers Still Use
25:00 Will LLMs Reward Good Markup or Ignore It?
26:00 Where to Find Jono Alderson and Closing Thoughts
We want to hear from you!
How did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?
Fill out our listener survey (https://t.co/oKVAEXipxu)! 
Let us know by sending an email to our producer, Elizabeth, at elizabet.becz@logrocket.com (mailto:elizabeth.becz@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).
Follow us. Get free stickers.
Follow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!
What does LogRocket do?
LogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr)</description>
      <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
      <guid>http://podrocket.logrocket.com/semantic-html-still-matters-with-jono-alderson</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/aphid.fireside.fm/d/1437767933/3911462c-bca2-48c2-9103-610ba304c673/a0334254-1a53-4f8f-a3a8-5067b5a80c1f.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>PodRocket</itunes:author>
      <itunes:summary>Jono Alderson joins the podcast to discuss why semantic HTML still matters today. He shares how thoughtful markup can improve accessibility and performance, from using the picture tag and responsive images to optimizing with content-visibility CSS. The conversation dives into common pitfalls like div soup, the shift toward more template-centric design, and techniques for improving the critical rendering path. Jono also discusses preloading, HTTP early hints, and the evolving role of structured data, LLMs, and Google’s trust signals in shaping a more meaningful and efficient web.
Links
Website: https://www.jonoalderson.com
X: https://x.com/jonoalderson
BlueSky: https://bsky.app/profile/jono.id
LinkedIn: https://www.linkedin.com/in/jonoalderson
Resources
Why semantic HTML still matters: https://www.jonoalderson.com/conjecture/why-semantic-html-still-matters/
Chapters
00:40 Meet Jono Alderson: SEO Consultant and Web Performance Expert
02:00 Why Semantic HTML Still Matters in 2025
05:00 Accessibility, Performance, and the 15% Market Opportunity
08:00 The Cost of Div Soup and Framework Abstraction
10:30 Finding Balance: Developer Experience vs User Experience
13:00 Template-Centric Thinking vs Component-Centric Development
16:00 What Is a Page? Rethinking How the Web Works
18:30 Structured Data, Schema.org, and Google’s Trust Signals
21:00 Quick Round: Picture Tag, Content Visibility, and Performance
23:30 The Worst HTML Anti-Patterns Developers Still Use
25:00 Will LLMs Reward Good Markup or Ignore It?
26:00 Where to Find Jono Alderson and Closing Thoughts
We want to hear from you!
How did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?
Fill out our listener survey (https://t.co/oKVAEXipxu)! 
Let us know by sending an email to our producer, Elizabeth, at elizabet.becz@logrocket.com (mailto:elizabeth.becz@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).
Follow us. Get free stickers.
Follow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!
What does LogRocket do?
LogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr)</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>Spec-Driven Development and the Future of AI IDEs with AWS’s Kiro - JSJ 693</title>
      <link>https://www.spreaker.com/episode/spec-driven-development-and-the-future-of-ai-ides-with-aws-s-kiro-jsj-693--68064218</link>
      <description>In this episode of JavaScript Jabber, I sit down with AWS’s Clare Liguori and Erik Hanchett to talk about Kiro, a brand-new AI-powered IDE that’s reimagining the way developers build software. We dive into how Kiro takes “AI-assisted coding” to a new level through spec-driven development — a process that focuses on defining requirements and collaborating with AI to break projects into clear, manageable tasks.
We unpack what sets Kiro apart from tools like Cursor and Copilot, explore its supervised vs. autopilot coding modes, and even talk about how it handles UI design, planning, and complex legacy codebases. Clare and Erik share behind-the-scenes insights on how Kiro was built using Kiro itself, what’s coming next for the platform, and how developers can join the early-access community to help shape its future.
🔗 Links &amp; Resources:

🌐 Kiro Official Site
🧠 AWS Developer Advocate Team

Become a supporter of this podcast: https://www.spreaker.com/podcast/javascript-jabber--6102064/support.</description>
      <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://www.spreaker.com/episode/spec-driven-development-and-the-future-of-ai-ides-with-aws-s-kiro-jsj-693--68064218</guid>
      <enclosure url="https://dts.podtrac.com/redirect.mp3/api.spreaker.com/download/episode/68064218/jsj_693.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>JavaScript Jabber</itunes:author>
      <itunes:summary>In this episode of JavaScript Jabber, I sit down with AWS’s Clare Liguori and Erik Hanchett to talk about Kiro, a brand-new AI-powered IDE that’s reimagining the way developers build software. We dive into how Kiro takes “AI-assisted coding” to a new level through spec-driven development — a process that focuses on defining requirements and collaborating with AI to break projects into clear, manageable tasks.
We unpack what sets Kiro apart from tools like Cursor and Copilot, explore its supervised vs. autopilot coding modes, and even talk about how it handles UI design, planning, and complex legacy codebases. Clare and Erik share behind-the-scenes insights on how Kiro was built using Kiro itself, what’s coming next for the platform, and how developers can join the early-access community to help shape its future.
🔗 Links &amp; Resources:

🌐 Kiro Official Site
🧠 AWS Developer Advocate Team

Become a supporter of this podcast: https://www.spreaker.com/podcast/javascript-jabber--6102064/support.</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>944: Is Coinbase Really Writing Half Their Code With AI?</title>
      <link>https://syntax.fm</link>
      <description>Wes and Scott talk with Kyle Cesmat about how Coinbase is writing nearly half its code with AI—while keeping quality and security front and center. They dig into tools like Cursor and Claude Code, agent-driven workflows, code review challenges, and how AI is reshaping developer productivity without replacing developers.


Show Notes



00:00 Welcome to Syntax!


03:29 Defining and measuring “quality” at a large company


05:05 How AI-generated code is reviewed and shipped at Coinbase


07:35 A developer’s workflow using AI—from ticket to production


10:30 Standard vs. team-specific tools for AI development


12:55 Using MCP servers to power internal AI workflows


14:42 MCP vs. custom agent integrations


17:16 What kinds of code AI is writing at Coinbase


19:48 Which languages and tasks does AI handle best?


21:21 Getting AI to follow existing code conventions

greptile





24:36 Brought to you by Sentry.io



25:01 How AI affects hiring, velocity, and developer focus


28:16 AI’s role in speeding up code reviews


31:28 The most valuable AI tool in Coinbase’s stack


33:48 Managing AI costs and model choices


35:10 Security considerations for using external AI models


37:04 How often Coinbase tunes and adjusts its AI systems


39:26 Using AI to write code vs. embedding AI in customer-facing features


42:29 Kyle’s big-picture take on AI as a tool—not a magic bullet

Measuring the Impact of Early-2025 AI on Experienced Open-Source Developer Productivity





44:33 The future of hiring engineers with their own “backpack” of agents


45:53 Sick Picks + Shameless Plugs



Sick Picks


Kyle: UltraShelf




Hit us up on Socials!

Syntax: X Instagram Tiktok LinkedIn Threads

Wes: X Instagram Tiktok LinkedIn Threads

Scott: X Instagram Tiktok LinkedIn Threads

Randy: X Instagram YouTube Threads</description>
      <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://syntax.fm</guid>
      <enclosure url="https://traffic.megaphone.fm/FSI6816310679.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Syntax - Tasty Web Development Treats</itunes:author>
      <itunes:summary>Wes and Scott talk with Kyle Cesmat about how Coinbase is writing nearly half its code with AI—while keeping quality and security front and center. They dig into tools like Cursor and Claude Code, agent-driven workflows, code review challenges, and how AI is reshaping developer productivity without replacing developers.


Show Notes



00:00 Welcome to Syntax!


03:29 Defining and measuring “quality” at a large company


05:05 How AI-generated code is reviewed and shipped at Coinbase


07:35 A developer’s workflow using AI—from ticket to production


10:30 Standard vs. team-specific tools for AI development


12:55 Using MCP servers to power internal AI workflows


14:42 MCP vs. custom agent integrations


17:16 What kinds of code AI is writing at Coinbase


19:48 Which languages and tasks does AI handle best?


21:21 Getting AI to follow existing code conventions

greptile





24:36 Brought to you by Sentry.io



25:01 How AI affects hiring, velocity, and developer focus


28:16 AI’s role in speeding up code reviews


31:28 The most valuable AI tool in Coinbase’s stack


33:48 Managing AI costs and model choices


35:10 Security considerations for using external AI models


37:04 How often Coinbase tunes and adjusts its AI systems


39:26 Using AI to write code vs. embedding AI in customer-facing features


42:29 Kyle’s big-picture take on AI as a tool—not a magic bullet

Measuring the Impact of Early-2025 AI on Experienced Open-Source Developer Productivity





44:33 The future of hiring engineers with their own “backpack” of agents


45:53 Sick Picks + Shameless Plugs



Sick Picks


Kyle: UltraShelf




Hit us up on Socials!

Syntax: X Instagram Tiktok LinkedIn Threads

Wes: X Instagram Tiktok LinkedIn Threads

Scott: X Instagram Tiktok LinkedIn Threads

Randy: X Instagram YouTube Threads</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
    <item>
      <title>943: Modern React with Ricky Hanlon (React Core Dev)</title>
      <link>https://syntax.fm/943</link>
      <description>Scott and Wes sit down with Ricky Hanlon from the React core team at Facebook to dive into the latest features and APIs shaping modern React development. From transitions and Suspense to fetching strategies and future directions, this episode breaks down what’s next for React and how developers can take advantage of it.


Show Notes



00:00 Welcome to Syntax!


01:20 Who is Ricky Hanlon.


02:10 Setting the Stage: Modern React APIs


02:48 Brought to you by Sentry.io.


03:12 Defining Transitions in React


05:08 Practical Examples of Scheduling.


08:23 useDeferredValue.


09:30 Suspense.


11:13 Fallbacks and animations.


12:35 How do you get psychological performance data?


13:39 Are these considerations reasonable for the average dev?


15:37 useOptimistic.


17:35 Removing delayMs (referred to as maxDuration in later iterations).


19:49 How to fetch data in React.


21:58 Is React now just Nextjs?


23:23 Will React give us a Signals-based state management?


24:44 The challenges of building in public.


30:12 Making LLMs cooperate with React.


32:05 The lifting will happen at framework level.


32:59 This is not time slicing.


35:47 Sick Pick + Shameless Plug.



Sick Picks


Ricky: iPhone 17 Pro



Shameless Plugs


Ricky: https://conf.react.dev/




Hit us up on Socials!

Syntax: X Instagram Tiktok LinkedIn Threads

Wes: X Instagram Tiktok LinkedIn Threads

Scott: X Instagram Tiktok LinkedIn Threads

Randy: X Instagram YouTube Threads</description>
      <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
      <guid>https://syntax.fm/943</guid>
      <enclosure url="https://traffic.megaphone.fm/FSI1532184318.mp3" type="audio/mpeg" length="0"/>
      <itunes:author>Syntax - Tasty Web Development Treats</itunes:author>
      <itunes:summary>Scott and Wes sit down with Ricky Hanlon from the React core team at Facebook to dive into the latest features and APIs shaping modern React development. From transitions and Suspense to fetching strategies and future directions, this episode breaks down what’s next for React and how developers can take advantage of it.


Show Notes



00:00 Welcome to Syntax!


01:20 Who is Ricky Hanlon.


02:10 Setting the Stage: Modern React APIs


02:48 Brought to you by Sentry.io.


03:12 Defining Transitions in React


05:08 Practical Examples of Scheduling.


08:23 useDeferredValue.


09:30 Suspense.


11:13 Fallbacks and animations.


12:35 How do you get psychological performance data?


13:39 Are these considerations reasonable for the average dev?


15:37 useOptimistic.


17:35 Removing delayMs (referred to as maxDuration in later iterations).


19:49 How to fetch data in React.


21:58 Is React now just Nextjs?


23:23 Will React give us a Signals-based state management?


24:44 The challenges of building in public.


30:12 Making LLMs cooperate with React.


32:05 The lifting will happen at framework level.


32:59 This is not time slicing.


35:47 Sick Pick + Shameless Plug.



Sick Picks


Ricky: iPhone 17 Pro



Shameless Plugs


Ricky: https://conf.react.dev/




Hit us up on Socials!

Syntax: X Instagram Tiktok LinkedIn Threads

Wes: X Instagram Tiktok LinkedIn Threads

Scott: X Instagram Tiktok LinkedIn Threads

Randy: X Instagram YouTube Threads</itunes:summary>
      <itunes:explicit>no</itunes:explicit>
    </item>
  </channel>
</rss>