{
  "startOfWeek": "2025-05-19",
  "weekNumber": 21,
  "availableItems": 12,
  "results": [
    {
      "feedTitle": "Whiskey Web and Whatnot: Web Development, Neat",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "Should You Learn Tailwind Before CSS? w/ Bree Hall",
          "media": "https://rss.art19.com/episodes/67489203-36eb-45ea-a5a2-42af35254869.mp3?rss_browser=BAhJIg9yc3MtcGFyc2VyBjoGRVQ%3D--42d668516e215326a0c0e36404173d504b339a70",
          "showNotes": "This week, live from React Miami, Chuck, and special guest co-host Aaron Francis, talk with Bree Hall about React styling strategies, Tailwind CSS, and whether you should learn fundamentals before frameworks (spoiler: it depends). They explore the evolution of Next.js, the importance of developer momentum, and how to break into tech in today’s landscape.\nIn this episode:\n\n(00:00) - Intro\n(02:11) - Rum rating and review: Roble Viejo Extra Anejo 8yrs\n(07:25) - Hot Take: Tailwind vs vanilla CSS\n(12:54) - Bree's React Miami talk: Styles & SASSy\n(15:16) - Has Tailwind made CSS too easy?\n(17:47) - Hot Take: Why you don't need to learn CSS or PHP before jumping into Tailwind or Laravel\n(23:34) - Bree's journey into tech\n(26:49) - The strengths and weaknesses of React\n(27:29) - Where does React end and Next.js begin?\n(31:24) - Why Astro is great\n(33:04) - Using the tools that work for you\n(36:38) - Life at HubSpot\n(39:45) - Bree's favorite food spots\n(44:48) - Theme parks and tech\n(47:10) - Parenting in the internet age\n(52:06) - If not in tech, what would Bree do instead?\n(53:52) - Plugs\n\nLinks\n\nRoble Viejo Extra Anejo 8yrs: https://ronroble.com/nuestros-rones/extra-anejo/\nReact Miami: https://www.reactmiami.com/\nKent C. Dodds: https://kentcdodds.com/\nBacardi: https://www.bacardi.com/\nFlor De Cana 18: https://www.flordecana.com/\nCaptain Morgan: https://www.captainmorgan.com/\nTailwind CSS: https://tailwindcss.com/\nEmotion: https://emotion.sh/\nVanilla Extract: https://vanilla-extract.style/\nSQLite: https://www.sqlite.org/\nBootstrap: https://getbootstrap.com/\nReact: https://react.dev/\nLaravel: https://laravel.com/\njQuery: https://jquery.com/\nPhotoshop: https://www.adobe.com/products/photoshop\nKubernetes: https://kubernetes.io/\nAngular: https://angular.dev/\nTypescript: https://www.typescriptlang.org/\nAstro: https://astro.build/\nVite: https://vite.dev/\nEmber: https://emberjs.com/\nNeon: https://neon.tech/\nWeb Dev Challenge: https://www.youtube.com/playlist?list=PLz8Iz-Fnk_eTkZvSNWXW_TKZ2UwVirT2M\n4 hours to build an e-commerce app — Web Dev Challenge S1E9: https://www.youtube.com/watch?v=ICpQQxD8vc4\nRails: https://rubyonrails.org/\nHubSpot: https://hubspot.com\nGitHub: https://github.com\nIchi Koroshi Ramen: https://www.instagram.com/ichikoroshi/\nDisney World: https://disneyworld.disney.go.com/\nLego: https://lego.com\nBoston Dynamics: https://bostondynamics.com/\nUniversal: https://www.universalorlando.com/\nMinecraft: https://www.minecraft.net/\nScreencasting.com: https://screencasting.com\n\nConnect with Bree\n\nWebsite: https://www.bytesofbree.com/\nX / Twitter: https://x.com/bytesofbree\n\nConnect with Chuck and Robbie\n\nRobbie Wagner: https://x.com/RobbieTheWagner\nChuck Carpenter: https://x.com/CharlesWthe3rd\n\nSubscribe and stay in touch\n\nWebsite: https://whiskey.fm\nApple Podcasts: https://podcasts.apple.com/us/podcast/whiskey-web-and-whatnot/id1552776603\nSpotify: https://open.spotify.com/show/19jiuHAqzeKnkleQUpZxDf\nOvercast: https://overcast.fm/itunes1552776603\nYouTube: https://www.youtube.com/@WhiskeyWebAndWhatnot\n\nWhiskey Web and Whatnot Merch\nEnjoying the podcast and want us to make more? Help support us by picking up some of our fresh merch at https://whiskey.fund.\nSee Privacy Policy at https://art19.com/privacy and California Privacy Notice at https://art19.com/privacy#do-not-sell-my-info.",
          "itemLink": "https://art19.com/shows/whiskey-web-and-whatnot"
        }
      ]
    },
    {
      "feedTitle": "This Dot Labs RSS feed",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "Introduction to Vercel’s Flags SDK",
          "media": null,
          "showNotes": "Introduction to Vercel’s Flags SDK\nIn this blog, we will dig into Vercel’s Flags SDK. We'll explore how it works, highlight its key capabilities, and discuss best practices to get the most out of it.\nYou'll also understand why you might prefer this tool over other feature flag solutions out there. And, despite its strong integration with Next.js, this SDK isn't limited to just one framework—it's fully compatible with React and SvelteKit. We'll use Next.js for examples, but feel free to follow along with the framework of your choice.\nWhy should I use it?\nYou might wonder, \"Why should I care about yet another feature flag library?\" Unlike some other solutions, Vercel's Flags SDK offers unique, practical features. It offers simplicity, flexibility, and smart patterns to help you manage feature flags quickly and efficiently.\nIt’s simple\nLet's start with a basic example:\napp\n ↳flags.js\n\nimport { flag } from 'flags/next';\n\nexport const exampleFlag = flag({\n    key: 'example-flag',\n    identify() {\n        return { user: { id: '123' } };\n    },\n    decide({ entities }) {\n        return entities.user.id === '123';\n    },\n});\n\n// page.js\nconst exampleValue = await exampleFlag();\n\nThis might look simple — and it is! — but it showcases some important features. Notice how easily we can define and call our flag without repeatedly passing context or configuration.\nMany other SDKs require passing the flag's name and context every single time you check a flag, like this:\nconst exampleValue = await client.getBooleanValue('exampleFlag', context);\n\nThis can become tedious and error-prone, as you might accidentally use different contexts throughout your app. With the Flags SDK, you define everything once upfront, keeping things consistent across your entire application.\nBy \"context\", I mean the data needed to evaluate the flag, like user details or environment settings. We'll get into more detail shortly.\nIt’s flexible\nVercel’s Flags SDK is also flexible. You can integrate it with other popular feature flag providers like LaunchDarkly or Statsig using built-in adapters. And if the provider you want to use isn’t supported yet, you can easily create your own custom adapter.\nWhile we'll use Next.js for demonstration, remember that the SDK works just as well with React or SvelteKit.\nLatency solutions\nFeature flags require definitions and context evaluations to determine their values — imagine checking conditions like, \"Is the user ID equal to 12?\" Typically, these evaluations involve fetching necessary information from a server, which can introduce latency.\nThese evaluations happen through two primary functions: identify and decide. The identify function gathers the context needed for evaluation, and this context is then passed as an argument named entities to the decide function. Let's revisit our earlier example to see this clearly:\napp\n ↳flags.js\n\nimport { flag } from 'flags/next';\n\nexport const exampleFlag = flag({\n    key: 'example-flag',\n    identify() {\n        // Identify our evaluation context   \n        return { user: { id: '123' } };\n    },\n    decide({ entities }) {\n        // Evaluate or decide our value based on our condition\n        return entities.user.id === '123';\n    },\n});\n\nYou could add a custom evaluation context when reading a feature flag, but it’s not the best practice, and it’s not usually recommended.\nUsing Edge Config\nWhen loading our flags, normally, these definitions and evaluation contexts get bootstrapped by making a network request and then opening a web socket listening to changes on the server. The problem is that if you do this in Serverless Functions with a short lifespan, you would need to bootstrap the definitions not just once but multiple times, which could cause latency issues.\nTo handle latency efficiently, especially in short-lived Serverless Functions, you can use Edge Config. Edge Config stores flag definitions at the Edge, allowing super-fast retrieval via Edge Middleware or Serverless Functions, significantly reducing latency.\nCookies\nFor more complex contexts requiring network requests, avoid doing these requests directly in Edge Middleware or CDNs, as this can drastically increase latency. Edge Middleware and CDNs are fast because they avoid making network requests to the origin server. Depending on the end user’s location, accessing a distant origin can introduce significant latency. For example, a user in Tokyo might need to connect to a server in the US before the page can load.\nInstead, a good pattern that the Flags SDK offers us to avoid this is cookies. You could use cookies to store context data. The browser automatically sends cookies with each request in a standard format, providing consistent (no matter if you are in Edge Middleware, App Router or Page Router), low-latency access to evaluation context data:\nexport const exampleFlag = flag({\n    // Definition\n    key: 'example-flag',\n    // Context\n    identify({ cookies }) {\n        // We get the cookie that we need for our context\n        const userId = cookies.get('user-id')?.value;\n        return { user: userId ? { id: userId } : undefined };\n    },\n    // Evaluation\n    decide({ entities }) {\n        return entities?.user?.id === 12;\n    },\n});\n\nYou can also encrypt or sign cookies for additional security from the client side.\nDedupe\nDedupe helps you cache function results to prevent redundant evaluations. If multiple flags rely on a common context method, like checking a user's region, Dedupe ensures the method executes only once per runtime, regardless of how many times it's invoked. Additionally, similar to cookies, the Flags SDK standardizes headers, allowing easy access to them. Let's illustrate this with the following example:\napp\n ↳flags.js\n\n import { dedupe, flag } from \"flags/next\";\n\n// Simulate a fake fetch function\nasync function fakeFetch(url, options) {\n    return new Response(JSON.stringify({ region: 'EU' }), { status: 200 });\n}\n\n// Simulated function to get the user's region from the request headers.\nasync function getUserRegion(headers) {\n    // In a real-world scenario, this might involve calling an external geolocation API.\n    // So we'll use a fake API to simulate the response.\n    const response = await fakeFetch('https://api.example.com/get-region', {\n        method: 'GET',\n        headers: { 'x-country': headers.get('x-country') || '' }\n    });\n    const data = await response.json();\n    return data;\n}\n\n// Wrap the region retrieval function using dedupe so that it runs only once per request.\nconst identifyRegion = dedupe(\n    async ({ headers }) => {\n        return await getUserRegion(headers);\n    },\n);\n\n// Define the feature flag that decides the promotional discount eligibility based on the user's region.\nexport const promoDiscountFlag = flag({\n    key: 'promo-discount-flag',\n    // Use the deduped identify function for evaluation context.\n    identify: identifyRegion,\n    decide({ entities }) {\n        // If the region isn’t determined, disable the flag.\n        if (!entities?.region) return false;\n        // Only enable the promotion for users in either 'EU' or 'NA'.\n        return ['EU', 'NA'].includes(entities.region);\n    },\n});\n\napp\n ↳plans\n   ↳page.jsx\n\nimport { promoDiscountFlag } from '../flags';\n\nexport default async function PlansPage() {\n    const isPromoAvailable = await promoDiscountFlag();\n\n    return (\n        <div className=\"p-4\">\n            <h1 className=\"text-2xl font-bold mb-4\">Store</h1>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"border rounded-lg p-4\">\n                    <h2 className=\"text-xl font-semibold mb-2\">Basic Plan</h2>\n                    <p className=\"text-gray-600 mb-2\">Essential features for everyday use</p>\n                    <p className=\"text-2xl font-bold\">$9.99/month</p>\n                </div>\n\n                <div className=\"border rounded-lg p-4\">\n                    <h2 className=\"text-xl font-semibold mb-2\">Premium Plan</h2>\n                    <p className=\"text-gray-600 mb-2\">Advanced features for power users</p>\n                    { isPromoAvailable ? (\n                        <div>\n                            <p className=\"text-sm text-gray-500 line-through\">$19.99/month</p>\n                            <p className=\"text-2xl font-bold text-green-600\">$14.99/month</p>\n                            <p className=\"text-sm text-green-600\">Special regional promotion!</p>\n                        </div>\n                    ) : (\n                        <p className=\"text-2xl font-bold\">$19.99/month</p>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nServer-side patterns for static pages\nYou can use feature flags on the client side, but that will lead to unnecessary loaders/skeletons or layout shifts, which are never that great. Of course, it brings benefits, like static rendering.\nTo maintain static rendering benefits while using server-side flags, the SDK provides a method called precompute.\nPrecompute\nPrecompute lets you decide which page version to display based on feature flags and then we can cache that page to statically render it. You can precompute flag combinations in Middleware or Route Handlers:\napp\n ↳flags.js\n\nimport { flag } from \"flags/next\";\n\nexport const showNewLayout = flag({\n    // Definition\n    key: 'new-layout',\n    // Context\n    identify({ cookies }) {\n        const userId = cookies.get('user-id')?.value;\n        return { user: userId ? { id: userId } : undefined };\n    },\n    // Evaluation\n    decide({ entities }) {\n        return entities?.user?.id === '12';\n    },\n});\n\nexport const showSilksongBanner = flag({\n    key: 'silksong-banner',\n    identify({ cookies }) {\n        return { user: cookies.get('vessel')?.value ? { id: cookies.get('vessel')?.value } : undefined };\n    },\n    decide({ entities }) {\n        return entities?.user?.id === 'hornet';\n    },\n});\n\n// Export our flags in an array (it can be just one or multiple flags)\nexport const homePageFlags = [showNewLayout, showSilksongBanner];\n\nNext, inside a middleware (or route handler), we will precompute these flags and create static pages per each combination of them. \n// middleware.ts\nimport { type NextRequest, NextResponse } from 'next/server';\nimport { precompute } from 'flags/next';\nimport { homePageFlags } from './flags';\n\n// Note that we're running this middleware for / only, but\n//You could extend it to further pages you're experimenting on\nexport const config = { matcher: ['/'] };\n\nexport async function middleware(request: NextRequest) {\n  // precompute returns a string encoding each flag's returned value\n  const code = await precompute(homePageFlags);\n\n  // rewrites the request to include the precomputed code for this flag combination\n  const nextUrl = new URL(\n    `/${code}${request.nextUrl.pathname}${request.nextUrl.search}`,\n    request.url,\n  );\n\n  return NextResponse.rewrite(nextUrl, { request });\n}\n\nThe user will never notice this because, as we use “rewrite”, they will only see the original URL. \nNow, on our page, we “invoke” our flags, sending the code from the params:\napp\n ↳[code]\n   ↳page.jsx\n\nimport { Params } from \"next/dist/server/request/params\";\nimport { showSilksongBanner, homePageFlags, showNewLayout } from \"../flags\";\n\nexport default async function Page({ params }) {\n    const { code } = params;\n    const shouldShowSilksongBanner = await showSilksongBanner(code, homePageFlags);\n    const shouldShowNewLayout = await showNewLayout(code, homePageFlags);\n\n    return (\n        <div className=\"p-4\">\n            {shouldShowSilksongBanner && (\n                <div className=\"bg-blue-100 p-3 mb-4 rounded\">\n                    🎮 Silksong Available\n                </div>\n            )}\n\n            <div className=\"bg-white p-4 rounded shadow\">\n                <h1 className=\"text-xl font-bold mb-2\">Welcome to Hallownest</h1>\n\n                {shouldShowNewLayout ? (\n                    <div className=\"mt-4\">\n                        <h2 className=\"font-semibold mb-2\">Your Progress</h2>\n                        <div className=\"space-y-2\">\n                            <div>✅ 3 areas completed</div>\n                            <div>🔄 2 areas in progress</div>\n                            <div>🔒 5 areas locked</div>\n                        </div>\n                    </div>\n                ) : (\n                    <p className=\"text-gray-600\">Start your journey in the vast underground kingdom.</p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nBy sending our code, we are not really invoking the flag again but getting the value right away. Our middleware is deciding which variation of our pages to display to the user.\nFinally, after rendering our page, we can enable Incremental Static Regeneration (ISR). ISR allows us to cache the page and serve it statically for subsequent user requests:\nimport { Params } from \"next/dist/server/request/params\";\nimport { showSilksongBanner, homePageFlags, showNewLayout } from \"../flags\";\n\ninterface HomeParams extends Params {\n    code: string;\n}\n\nexport async function generateStaticParams() {\n    // returning an empty array is enough to enable ISR\n    return [];\n}\n\nexport default async function Page({ params }: { params: HomeParams }) {\n...\n}\n\nUsing precompute is particularly beneficial when enabling ISR for pages that depend on flags whose values cannot be determined at build time. Headers, geo, etc., we can’t know their value at build, so we use precompute() so the Edge can evaluate it on the fly. In these cases, we rely on Middleware to dynamically determine the flag values, generate the HTML content once, and then cache it. At build time, we simply create an initial HTML shell.\nGenerate Permutations\nIf we prefer to generate static pages at build-time instead of runtime, we can use the generatePermutations function from the Flags SDK. This method enables us to pre-generate static pages with different combinations of flags at build time. It's especially useful when the flag values are known beforehand. For example, scenarios involving A/B testing and a marketing site with a single on/off banner flag are ideal use cases.\napp\n ↳flags.js\n\nimport { flag } from 'flags/next'; \n\nexport const showSilksongBanner = flag({\n    key: 'showSilksongBanner',\n    decide() {\n        return true;\n    },\n});\n\nexport const showNewLayout = flag({\n    key: 'showNewLayout',\n    decide() {\n        return true;\n    },\n});\n\nexport const greetingStyle = flag({\n    key: 'greetingStyle',\n    options: ['classic', 'modern', 'steampunk'],\n    decide() {\n        return 'classic';\n    },\n});\n\nexport const homePageFlags = [\n  showSilksongBanner,\n  showNewLayout,\n  greetingStyle,\n];\n\nimport { generatePermutations } from 'flags/next';\nimport {\n  showSilksongBanner,\n  showNewLayout,\n  greetingStyle,\n  homePageFlags,\n} from '../flags';\nimport { Params } from 'next/dist/server/request/params';\n\n// 1) at build time, Next will run this and prerender each combo\nexport async function generateStaticParams() {\n  const codes = await generatePermutations(homePageFlags);\n  return codes.map((code) => ({ code }));\n}\n\nexport default async function Page({ params }) {\n  const { code } = params;\n\n  // 2) at request time, Next simply reads the prerendered HTML for this code\n  const showBanner = await showSilksongBanner(code, homePageFlags);\n  const useNewLayout = await showNewLayout(code, homePageFlags);\n  const style = await greetingStyle(code, homePageFlags);\n\n  return (\n    <div className=\"p-4\">\n      {showBanner && (\n        <div className=\"bg-blue-100 p-3 mb-4 rounded\">\n          🎮 Silksong Available\n        </div>\n      )}\n\n      <div className=\"bg-white p-4 rounded shadow\">\n        <h1 className=\"text-xl font-bold mb-2\">\n          {style === 'steampunk'\n            ? 'Welcome, Cog-and-Gear Explorer!'\n            : style === 'modern'\n            ? 'Welcome Back to Hallownest'\n            : 'Welcome to Hallownest'}\n        </h1>\n\n        {useNewLayout ? (\n          <div className=\"mt-4\">\n            <h2 className=\"font-semibold mb-2\">Your Progress</h2>\n            <div className=\"space-y-2\">\n              <div>✅ 3 areas completed</div>\n              <div>🔄 2 areas in progress</div>\n              <div>🔒 5 areas locked</div>\n            </div>\n          </div>\n        ) : (\n          <p className=\"text-gray-600\">\n            Start your journey in the vast underground kingdom.\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nConclusion\nVercel’s Flags SDK stands out as a powerful yet straightforward solution for managing feature flags efficiently. With its ease of use, remarkable flexibility, and effective patterns for reducing latency, this SDK streamlines the development process and enhances your app’s performance. Whether you're building a Next.js, React, or SvelteKit application, the Flags SDK provides intuitive tools that keep your application consistent, responsive, and maintainable. Give it a try, and see firsthand how it can simplify your feature management workflow!",
          "itemLink": "https://www.thisdot.co/blog/introduction-to-vercels-flags-sdk"
        }
      ]
    },
    {
      "feedTitle": "ShopTalk",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "665: JavaScript Educator and Twitch Streamer Mat Marquis",
          "media": "https://shoptalkshow.com/podcast-download/8218/665.mp3?nocache",
          "showNotes": "Show Description\nFresh off his Megaman Streamathon, Mat Marquis joins us to talk about becoming a professional Twitch streamer, creating a JavaScript course, his thoughts on the design and content of said course, a brief moment on Linux in 2025, and attempts to make the web weird and fun again.\nListen on Website →\nGuests\nMat Marquis\nGuest's Main URL • Guest's Social\n\nMy goal is to ensure that your content can reach any user, in any browsing context—regardless of the size of their screen, the speed of their internet connection, the age of their device, or the combination of browsers and assistive technologies they use to experience the web.\nLinks\n\nI’m Mat. I make websites.\nWilto (Mat Marquis) · GitHub\nMat “Wilto” Marquis (@Wilto@front-end.social) - Front-End Social\nMat “Wilto” Marquis (@wil.to) — Bluesky\nWiltoStreams - Live Streaming\nJavaScript for Web Designers\nLearn JavaScript\nCodeMirror Text Editor\nJavaScript Playground\nJavaScript for Everyone\nPremium Courses\nPaul Irish Profile\nRobin Sloan\nFramework Laptop 16 DIY\nJohnny Mnemonic\nJohnny Mnemonic Trailer #1\nSponsors",
          "itemLink": "https://shoptalkshow.com/665/"
        }
      ]
    },
    {
      "feedTitle": "Soft Skills Engineering",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "Episode 461: How to do side projects with a family and demanding job and my company promised me a raise, but didn't give it",
          "media": "https://dts.podtrac.com/redirect.mp3/download.softskills.audio/sse-461.mp3?source=rss",
          "showNotes": "In this episode, Dave and Jamison answer these questions:\nHey, long-time listener, listened to almost all episodes now and have been loving it since day 1!!\nI am a senior engineer at FAANG and work 45-50 hours a week and have a lot of cross-org responsibilities. I am lucky to have a beautiful wife and two wonderful young children. I guess, you can imagine how difficult it already is to manage work/life; especially because I am working remote from a different timezone with large dilation.\nI did lots of side projects before I had a family. But I was totally okay leaving all that behind for a great family life. Now, I have been struck by a really cool idea for an AI-based product that intersects with static analysis and my day-to-day work, which I cannot stop thinking about. I am sure that this project would be more than I could handle at the moment without cutting back on anything else.\nThe question now really is, how do people with families and FAANG jobs do side projects? Or do they even? Do they have more than 24 hours in one day?\nHello! Love the show, one-time contributor :p\nI’m in agony about my recent compensation change regarding my promotion and I am looking for some wise guidance (and if not that, some funny jokes will do).\nContext: I work at a big tech company. I got promoted to a senior engineer, but. I didn’t get a bump to my salary. Instead, the company “indicated” that the raise would happen in six months, at the next performance review, which happened last week.\nWhat did I end up getting? Nothing :)\nWhy? Apparently they have not been giving salary bumps to people who get promoted, and it has enraged people.\nIt hurts my pride. I consistently get good performance reviews & peer feedback. People go out of their way to say how good my work is. I have every evidence to say I am a strong performer.\nMy manager is very supportive and tried escalating my case. But the company didn’t budge. They did say that “there’s a chance” to “make it right” in 6 months.\nOn the one hand it feels petty to leave a company because I didn’t get the raise I wanted, especially when I do really enjoy working here. On the other hand…I am very disappointed.\nWhat do I do? Do I stick it out for another six months and see what happens? Are there options left other than start prepping myself for interviews?\nYou are amazing people. Cheers.",
          "itemLink": "https://softskills.audio/2025/05/19/episode-461-how-to-do-side-projects-with-a-family-and-demanding-job-and-my-company-promised-me-a-raise,-but-didn't-give-it/"
        }
      ]
    },
    {
      "feedTitle": "Front-End Fire",
      "updateStatus": 2,
      "data": [
        {
          "itemTitle": "GraphQL and AI with Apollo CTO Matt DeBergalis",
          "media": "https://www.buzzsprout.com/2226499/episodes/17202365-graphql-and-ai-with-apollo-cto-matt-debergalis.mp3",
          "showNotes": "CTO and co-founder of Apollo, Matt DeBergalis, joins us on this episode to talk about how GraphQL has continued to evolve over time, and how Apollo is focused on making it more accessible for developers and AI agents than ever before.\nFor those less familiar with Apollo and GraphQL, Matt shares the history of both, including lessons he learned from founding the company Meteor that helped him while building Apollo.\nWe discuss how even though GraphQL is making less headlines than it was a few years ago, it’s really begun to find its niche within larger organizations that have hundreds or even thousands of APIs and databases underpinning their many applications, and how Apollo has continued to evolve so that it can support APIs, serverless functions, and SQL- or no SQL-databases, with little extra code needed to make these different data sources work together.\nMatt also highlights the benefits of a GraphQL schema for AI agents and MCP servers, sharing how the agents are generally very good at parsing the schemas and understanding how to leverage queries against the interface to retrieve the data they need. While we’ve had tech stacks in the past like LAMP and MERN, this new addition of AI to the development mix provides a unique opportunity to redefine the stack once more, and GraphQL could be a very good piece to include.\nSpecial Guest\n\nMatt DeBergalis, CTO and co-founder of Apollo\n\nRelevant Links:\n\nApollo GraphQL website\nApollo GraphQL YouTube\nApollo GraphQL LinkedIn\nApollo GraphQL on X\nMatt on GitHub\nMatt on X\nMatt on Medium\nMatt on LinkedIn\n\nWhat Makes Us Happy this Week:\n\nPaige - The Pitt TV series\nTJ - I Think I Was Murdered\nMatt - Teaching my daughter to ride a bike\n\nThanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.\n\nFront-end Fire website\nBlue Collar Coder on YouTube\nBlue Collar Coder on Discord\nReach out via email\nTweet at us on X @front_end_fire\nFollow us on Bluesky @front-end-fire.com\nSubscribe to our YouTube channel @Front-EndFirePodcast",
          "itemLink": "https://www.buzzsprout.com/2226499"
        },
        {
          "itemTitle": "TanStack DB & The Rise of the Tannerverse",
          "media": "https://www.buzzsprout.com/2226499/episodes/17185531-tanstack-db-the-rise-of-the-tannerverse.mp3",
          "showNotes": "TanStack, a collection of popular open-source software libraries, is back in the news cycle this week with the announcement of TanStack DB. TanStack DB extends TanStack Query with collections, live queries, and optimistic UI mutations to keep UIs reactive, consistent, and lightning fast.\nVS Code marks its 100th release of v1 with updates like: enabling Next Edit Suggestions (NES) be default, adding custom instructions and reusable prompts for a chat agent inside a project’s .github folder, and new tools at the AI agent’s disposal for better results.\nThere’s a new component library available called Basecoat UI that claims to bring the magic of shadcn/ui with no React required. No matter if a website’s built using HTML, Flask, Rails, or another JS framework, Basecoat uses HTML and Tailwind, and a hint of Alpine.js when needed, to provide accessible, modern components that are also compatible with shadcn/ui themes.\nNews:\n\nPaige - Basecoat UI - framework agnostic component library\nJack - TanStack DB\nTJ - VS Code 1.100\n\nBonus News:\n\nApparently we should all just f’ing use HTML\nParcel v2.15 jumps on the Rust bandwagon\nGoogle is testing a new “AI Mode”\nGoogle’s logo change\nMax once again becomes HBO Max\n\nWhat Makes Us Happy this Week:\n\nPaige - House of Earth and Blood (#1 in Crescent City series) \nJack -  Grand Sumo May 2025 Tournament\nTJ - Coast of Michigan\n\nThanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.\n\nFront-end Fire website\nBlue Collar Coder on YouTube\nBlue Collar Coder on Discord\nReach out via email\nTweet at us on X @front_end_fire\nFollow us on Bluesky @front-end-fire.com\nSubscribe to our YouTube channel @Front-EndFirePodcast",
          "itemLink": "https://www.buzzsprout.com/2226499"
        }
      ]
    },
    {
      "feedTitle": "Modern Web",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "What’s New About Heroku in 2025? AI Platform as a Service + What are MCPs?",
          "media": "https://anchor.fm/s/f9191780/podcast/play/102998107/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-4-21%2F400739590-44100-2-de2e15f4aa4ea.mp3",
          "showNotes": "In this episode of the Modern Web Podcast, Rob Ocel and Danny Thompson sit down with Julián Duque, Principal Developer Advocate at Heroku, to talk about Heroku’s evolution into an AI Platform-as-a-Service. Julián breaks down Heroku’s new Managed Inference and Agents (MIA) platform, how they’re supporting Claude, Cohere, and Stable Diffusion, and what makes their developer experience stand out.\nThey also get into Model Context Protocols (MCPs)—what they are, why they matter, and how they’re quickly becoming the USB-C for AI. From internal tooling to agentic infrastructure and secure AI deployments, this episode explores how MCPs, trusted environments, and better AI dev tools are reshaping how we build modern software.\n\n\nKey Points from this episode:\n- Heroku is evolving into an AI Platform-as-a-Service with its new MIA (Managed Inference and Agents) platform, supporting models like Claude, Cohere, and Stable Diffusion while maintaining a strong developer experience.\n- MCPs (Model Context Protocols) are becoming a key standard for extending AI capabilities—offering a structured, secure way for LLMs to access tools, run code, and interact with resources.\n- Heroku's AI agents can perform advanced operations like scaling dynos, analyzing logs, and self-healing failed deployments using grounded MCP integrations tied to the Heroku CLI.\n- Despite rapid adoption, MCPs still have rough edges—developer experience, tooling, and security protocols are actively improving, and a centralized registry for MCPs is seen as a missing piece.\n\n\nChapters\n0:00 – What is MCP and why it matters\n3:00 – Heroku’s pivot to AI Platform-as-a-Service\n6:45 – Agentic apps, model hosting, and tool execution\n10:50 – Why REST isn’t ideal for LLMs\n14:10 – Developer experience challenges with MCP\n18:00 – Hosting secure MCPs on Heroku\n23:00 – Real-world use cases: scaling, healing, recommendations\n30:00 – Common scaling challenges and hallucination risks\n34:30 – Testing, security, and architecture tips\n36:00 – Where to start and final advice on using AI tools effectively\nFollow Julián Duque on Social MediaTwitter/X: https://x.com/julian_duque\nLinkedin: https://www.linkedin.com/in/juliandavidduque/\n\n\nSponsored by This Dot: thisdotlabs.com",
          "itemLink": "https://podcasters.spotify.com/pod/show/modern-web/episodes/Whats-New-About-Heroku-in-2025--AI-Platform-as-a-Service--What-are-MCPs-e335okr"
        }
      ]
    },
    {
      "feedTitle": "Indie Bites",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "How Tally grew to $150k MRR in 5 years - Marie Martens",
          "media": "https://media.transistor.fm/39b7fe62/fb7e64ea.mp3",
          "showNotes": "Marie Martens is the co-founder of Tally, a form builder she started with her partner Filip, now used by half a million people and are over $150k MRR. Marie was on the pod 3 years ago when they’d scaled to 16,000 users and $8k MRR in 1 year. In that episode we discussed the origin story, getting their first 100 users and how they’d grown so quickly. Today, we’re going to be finding out how they’ve built such a robust business over the past 3 years and 15x’d their revenue.\nListen to Marie's first episode:\nhttps://indiebites.com/43\nTimestamps\n\n00:00 Intro\n02:09 From small lifestyle business to larger sustainable business\n04:50 Retaining the fun in the business\n06:02 Struggles in hiring a remote team\n07:32 Building an in-person team in Belgium vs remote\n08:17 Running a startup as a parent\n10:06 How Tally has grown to $150k MRR\n13:07 The pros and cons of building in public\n15:08 Growing the product while keeping it simple\n15:49 The future of Tally\n16:43 Recommendations\n\nRecommendations\n\nBook - First Round Capital\nPodcast - Lenny's Podcast\nIndie Hacker - Olly Meakings\n\nMy links\n\nTwitter\nIndie Bites Twitter\nIndie Bites YouTube\nJoin the membership\nPersonal Website\n2 Hour Podcast Course\n\nSponsor - EmailOctopus 🐙\nEmailOctopus is an independently owned email marketing platform, built to support other small growing businesses. With a focus on affordability and ease of use, EmailOctopus contains all of the features you need to reach and grow your audience. You can start today, with their industry leading free plan where you can contact up to 2,500 subscribers without paying a penny.",
          "itemLink": "https://indiebites.com/128"
        }
      ]
    },
    {
      "feedTitle": "devtools.fm: Developer Tools, Open Source, Software Development",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "Stepan Parunashvili - InstantDB",
          "media": "https://anchor.fm/s/dd6922b4/podcast/play/102854756/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-4-19%2F400543405-44100-2-cf3197c1845d9.mp3",
          "showNotes": "This week we're joined by Stepan Parunashvili, co-creator of InstantDB, a new database that's designed to make it easier to build local-first apps. Instant is a replacement for Firebase, and it's designed to be a more modern, more flexible, and more powerful database for the modern web. Join us as we dive into the details of InstantDB, the challenges of building a new database, and the future of local-first development.This episode is sponsored by WorkOS (https://workos.com)https://www.linkedin.com/in/stepan-parunashvili-65698932/https://www.instantdb.com/https://github.com/instantdb/instanthttps://github.com/stopachka",
          "itemLink": "https://podcasters.spotify.com/pod/show/devtoolsfm/episodes/Stepan-Parunashvili---InstantDB-e331cl4"
        }
      ]
    },
    {
      "feedTitle": "DevTalles",
      "updateStatus": 2,
      "data": [
        {
          "itemTitle": "211- Google Jules (Beta)",
          "media": "https://anchor.fm/s/4c227378/podcast/play/103104432/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-4-23%2Fb7d43aa3-b5da-9afa-eb50-fc1a0315c084.mp3",
          "showNotes": "En este episodio hablaremos un poco sobre una nueva herramienta para coordinar, mantener y ejecutar acciones sobre repositorios, llamado Jules.",
          "itemLink": "https://podcasters.spotify.com/pod/show/fernando-her85/episodes/211--Google-Jules-Beta-e3390fg"
        },
        {
          "itemTitle": "210- ¿Vale la pena usar Server Components",
          "media": "https://anchor.fm/s/4c227378/podcast/play/102768716/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-4-16%2F3e1d57b3-1fb4-4119-94f9-41addf5eafe6.mp3",
          "showNotes": "¿Vale la pena usar Server Components?\nEn este episodio hablamos sobre qué son los React Server Components, cómo funcionan y en qué casos realmente aportan valor. Exploramos sus ventajas, las limitaciones actuales y situaciones donde quizás no conviene usarlos. Ideal si estás considerando usarlos en tu próximo proyecto con Next.js.",
          "itemLink": "https://podcasters.spotify.com/pod/show/fernando-her85/episodes/210--Vale-la-pena-usar-Server-Components-e32uokc"
        }
      ]
    },
    {
      "feedTitle": "HTTP 203",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "Frontend First",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "Svelte Radio",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "JS Party: JavaScript, CSS, Web Development",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "PodRocket - A web development podcast from LogRocket",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "The design of web design with Miriam Suzanne",
          "media": "https://chrt.fm/track/7F1212/aphid.fireside.fm/d/1437767933/3911462c-bca2-48c2-9103-610ba304c673/f1fc1d62-df05-4ced-8c95-155c1e1aeff0.mp3",
          "showNotes": "Miriam Suzanne, web developer, artist, and co-founder of OddBird, talks about the philosophy and evolution of web design. We explore CSS origins, the cascade, accessibility, and how the balance between user control and brand expression defines the spirit of the web.\nLinks\nWebsite: https://www.miriamsuzanne.com\nMastodon: https://front-end.social/@mia\nGitHub: https://github.com/mirisuzanne\nBluesky: https://bsky.app/profile/miriam.codes\nCodePen: https://codepen.io/miriamsuzanne\nLinkedIn: https://www.linkedin.com/in/terriblemia\nResources\nCERN: https://info.cern.ch\nCascading HTML style sheets proposal: https://www.w3.org/People/howcome/p/cascade.html\nAxe Accessibility Testing Tools: https://www.deque.com/axe\nThe Design of Web Design talk: https://www.youtube.com/watch?v=th1qORyvBcc\nWe want to hear from you!\nHow did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?\nLet us know by sending an email to our producer, Em, at emily.kochanek@logrocket.com (mailto:emily.kochanek@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).\nFollow us. Get free stickers.\nFollow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!\nWhat does LogRocket do?\nLogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr)",
          "itemLink": "http://podrocket.logrocket.com/design-of-web-design-miriam-suzanne"
        }
      ]
    },
    {
      "feedTitle": "Web Rush",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "Jamstack Radio",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "https://www.spreaker.com/show/6102064/episodes/feed",
      "updateStatus": -1,
      "data": []
    },
    {
      "feedTitle": "DejaVue",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "https://feed.syntax.fm/",
      "updateStatus": -1,
      "data": []
    },
    {
      "feedTitle": "Rust Review",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "Front End Happy Hour",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "Off The Main Thread",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "The CSS Podcast",
      "updateStatus": 0,
      "data": []
    }
  ]
}