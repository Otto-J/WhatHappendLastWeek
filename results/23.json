{
  "startOfWeek": "2025-06-02",
  "weekNumber": 23,
  "availableItems": 15,
  "results": [
    {
      "feedTitle": "Whiskey Web and Whatnot: Web Development, Neat",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "Stop Fixing Things That Aren't Broken",
          "media": "https://rss.art19.com/episodes/9c513363-4c77-482e-898b-270fd8d986b8.mp3?rss_browser=BAhJIg9yc3MtcGFyc2VyBjoGRVQ%3D--42d668516e215326a0c0e36404173d504b339a70",
          "showNotes": "This week, Robbie and Chuck talk about the unintended chaos of “move fast and break things” in both software and startups. From Riverside glitches to Tesla’s overengineered wipers, they explore how updates can derail otherwise stable experiences. They unpack the economics of getting laid off, the pressure to build a personal brand in tech, and the strange fate of dev tools. Plus, Robbie shares his latest app ideas.\nIn this episode:\n\n(00:00) - Intro\n(00:36) - When updates break what worked\n(07:30) - Are devs prioritizing personal brands?\n(10:22) - The strange economics of getting laid off\n(15:48) - Is GitLab trash?\n(17:34) - Robbie's ADHD app and vibe coding plans\n(21:14) - Debt, 401k, and emergency funds\n(22:39) - Prepping for Big Sky Dev Con\n(25:35) - UPS shipping woes\n(31:19) - React Miami and difficulties taking a podcast on the road\n(36:07) - Whiskey + Girl Scout cookies (and other pairings)\n(41:14) - Should open source have a franchise model?\n(42:37) - Work, paternity leave, and the IBM acquisition\n(44:24) - Tesla shopping for a family of five\n(48:17) - Movies and TV\n\nLinks\n\nRiverside: https://riverside.fm/\nTesla: https://www.tesla.com/\nArc: https://arc.net/\nSilicon Valley: https://en.wikipedia.org/wiki/Silicon_Valley_(TV_series)\nChrome: https://www.google.com/chrome/\nShark Tank: https://en.wikipedia.org/wiki/Shark_Tank\nGitHub: https://github.com\nMicrosoft: https://www.microsoft.com/\nTypescript: https://www.typescriptlang.org/\nRust: https://www.rust-lang.org/\nVS Code: https://code.visualstudio.com/\nOpenAI: https://openai.com\nCursor: https://www.cursor.com/\nWindsurf: https://windsurf.ai/\nCopilot: https://github.com/features/copilot\nDeno: https://deno.com/\nNode: https://nodejs.org/\nGitLab: https://gitlab.com/\nBitbucket: https://bitbucket.org/\nFresca: https://www.coca-cola.com/us/en/brands/fresca-sparkling-soda\nShepherd: https://www.shepherdjs.dev/\nChatGPT: https://chatgpt.com/\nClaude: https://claude.ai\nWarp: https://www.warp.dev/\nBig Sky Dev Con: https://bigskydevcon.com/\nAdam Argyle: https://x.com/argyleink/\nHTMX: https://htmx.org/\nCarson Gross: https://x.com/htmx_org/\nRuby: https://www.ruby-lang.org/\nUPS: https://www.ups.com\nAmazon: https://amazon.com\nReact Miami: https://www.reactmiami.com/\nTypecraft: https://typecraft.dev/\nJason Lengstorf: https://x.com/jlengstorf\nWeb Dev Challenge: https://www.youtube.com/playlist?list=PLz8Iz-Fnk_eTkZvSNWXW_TKZ2UwVirT2M\nMux: https://www.mux.com/\nAaron Francis: https://x.com/aarondfrancis\nTerminal Coffee: https://www.terminal.shop/\nSyntax: https://syntax.fm\nSentry: https://Sentry.io/\nDavid Cramer: https://x.com/zeeg\nGirl Scouts: https://www.girlscouts.org/\nCarlyle House: https://en.wikipedia.org/wiki/Carlyle_House\nKen Wheeler: https://x.com/ken_wheeler/\nWhiskey Library: https://mwlpdx.com/\nJack Rose: https://www.jackrosediningsaloon.com/\nGumroad: https://gumroad.com\nSupabase: https://supabase.com/\nMcDonald's: https://www.mcdonalds.com/\nHashiCorp: https://www.hashicorp.com/\nIBM: https://www.ibm.com/\nModel X: https://www.tesla.com/modelx\nElon Musk: https://x.com/elonmusk\nRivian: https://rivian.com/\nWhy Women Kill: https://en.wikipedia.org/wiki/Why_Women_Kill\nLucy Liu: https://en.wikipedia.org/wiki/Lucy_Liu\nAmerican Psycho: https://en.wikipedia.org/wiki/American_Psycho_(film)\nParamount Plus: https://www.paramountplus.com/\nYellowstone: https://en.wikipedia.org/wiki/Yellowstone_(American_TV_series)\n1883: https://en.wikipedia.org/wiki/1883_(TV_series)\nFaith Hill: https://en.wikipedia.org/wiki/Faith_Hill\nTim McGraw: https://en.wikipedia.org/wiki/Tim_McGraw\nGame of Thrones: https://www.hbo.com/game-of-thrones\n\nConnect with Chuck and Robbie\n\nRobbie Wagner: https://x.com/RobbieTheWagner\nChuck Carpenter: https://x.com/CharlesWthe3rd\n\nSubscribe and stay in touch\n\nWebsite: https://whiskey.fm\nApple Podcasts: https://podcasts.apple.com/us/podcast/whiskey-web-and-whatnot/id1552776603\nSpotify: https://open.spotify.com/show/19jiuHAqzeKnkleQUpZxDf\nOvercast: https://overcast.fm/itunes1552776603\nYouTube: https://www.youtube.com/@WhiskeyWebAndWhatnot\n\nWhiskey Web and Whatnot Merch\nEnjoying the podcast and want us to make more? Help support us by picking up some of our fresh merch at https://whiskey.fund.\nSee Privacy Policy at https://art19.com/privacy and California Privacy Notice at https://art19.com/privacy#do-not-sell-my-info.",
          "itemLink": "https://art19.com/shows/whiskey-web-and-whatnot"
        }
      ]
    },
    {
      "feedTitle": "This Dot Labs RSS feed",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "What Sets the Best Autonomous Coding Agents Apart?",
          "media": null,
          "showNotes": "Must-have Features of Coding Agents\nAutonomous coding agents are no longer experimental, they are becoming an integral part of modern development workflows, redefining how software is built and maintained.  As models become more capable, agents have become easier to produce, leading to an explosion of options with varying depth and utility. Drawing insights from our experience using many agents, let's delve into the features that you'll absolutely want to get the best results.\n1. Customizable System Prompts\nCustom agent modes, or roles, allow engineers to tailor the outputs to the desired results of their task. For instance, an agent can be set to operate in a \"planning mode\" focused on outlining development steps and gathering requirements, a \"coding mode\" optimized for generating and testing code, or a \"documentation mode\" emphasizing clarity and completeness of written artifacts. You might start with the off-the-shelf planning prompt, but you'll quickly want your own tailored version. Regardless of which modes are included out of the box, the ability to customize and extend them is critical. Agents must adapt to your unique workflows and prioritize what's important to your project. Without this flexibility, even well-designed defaults can fall short in real-world use.\nEngineers have preferences, and projects contain existing work. The best agents offer ways to communicate these preferences and decisions effectively. For example, 'pnpm' instead of 'npm' for package management, requiring the agent to seek root causes rather than offer temporary workarounds, or mandating that tests and linting must pass before a task is marked complete. Rules are a layer of control to accomplish this. Rules reinforce technical standards but also shape agent behavior to reflect project priorities and cultural norms. They inform the agent across contexts, think constraints, preferences, or directives that apply regardless of the task. Rules can encode things like style guidelines, risk tolerances, or communication boundaries. By shaping how the agent reasons and responds, rules ensure consistent alignment with desired outcomes. \nRoo code is an agent that makes great use of custom modes, and rules are ubiquitous across coding agents. These features form a meta-agent framework that allows engineers to construct the most effective agent for their unique project and workflow details.\n2. Usage-based Pricing\nThe best agents provide as much relevant information as possible to the model. They give transparency and control over what information is sent. This allows engineers to leverage their knowledge of the project to improve results. Being liberal with relevant information to the models is more expensive however, it also significantly improves results. \nThe pricing model of some agents prioritizes fixed, predictable costs that include model fees. This creates an incentive to minimize the amount of information sent to the model in order to control costs. To get the most out of these tools, you’ve got to get the most out of models, which typically implies usage-based pricing. \n3. Autonomous Workflows\nThe way we accomplish work has phases. For example, creating tests and then making them pass, creating diagrams or plans, or reviewing work before submitting PRs. The best agents have mechanisms to facilitate these phases in an autonomous way. For the best results, each phase should have full use of a context window without watering down the main session's context. This should leverage your custom modes, which excel at each phase of your workflow.\n4. Working in the Background\nThe best agents are more effective at producing desired results and thus are able to be more autonomous. As agents become more autonomous, the ability to work in the background or work on multiple tasks at once becomes increasingly necessary to unlock their full potential. Agents that leverage local or cloud containers to perform work independently of IDEs or working copies on an engineer's machine further increase their utility. This allows engineers to focus on drafting plans and reviewing proposed changes, ultimately to work toward managing multiple tasks at once, overseeing their agent-powered workflows as if guiding a team.\n5. Integrations with your Tools\nThe Model Context Protocol (MCP) serves as a standardized interface, allowing agents to interact with your tools and data sources. The best agents seamlessly integrate with the platforms that engineers rely on, such as Confluence for documentation, Jira for tasks, and GitHub for source control and pull requests.\nThese integrations ensure the agent can participate meaningfully across the full software development lifecycle.\n6. Support for Multiple Model Providers\nReliance on a single AI provider can be limiting. Top-tier agents support multiple providers, allowing teams to choose the best models for specific tasks. This flexibility enhances performance, the ability to use the latest and greatest, and also safeguards against potential downtimes or vendor-specific issues.\nFinal Thoughts\nSelecting the right autonomous coding agent is a strategic decision. By prioritizing the features mentioned, technology leaders can adopt agents that can be tuned for their team's success. Tuning agents to projects and teams takes time, as does configuring the plumbing to integrate well with other systems. However, unlocking massive productivity gains is worth the squeeze. Models will become better and better, and the best agents capitalize on these improvements with little to no added effort. Set your organization and teams up to tap into the power of AI-enhanced engineering, and be more effective and more competitive.",
          "itemLink": "https://www.thisdot.co/blog/what-sets-the-best-autonomous-coding-agents-apart"
        }
      ]
    },
    {
      "feedTitle": "ShopTalk",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "667: Jen Simmons on Declarative Web Push, Form Control Styling, & More",
          "media": "https://shoptalkshow.com/podcast-download/8236/667.mp3?nocache",
          "showNotes": "Show Description\nJen Simmons stops by to talk about new CSS and Safari features like Form Control Styling, Declarative Web Push, Typography, contrast-color(), and more.\nListen on Website →\nGuests\nJen Simmons\nGuest's Main URL • Guest's Social\n\nSafari & WebKit Evangelist. Member of the CSS Working Group. Webmaster since 1996.\nLinks\n\nwebkit.org\nSafari Release Notes\nWCAG 2.0\ncontrast-color() function\nAPCA Color Contrast Tool\nColor.js Release\nLea Verou’s page on color contrast\nDeclarative Web Push\nWeb Push for Web Apps on iOS and iPadOS\nCSS Forms Level 1 Specification in Progress\n<input type=\"color\" colorspace=\"display-p3\" alpha>\nline-height units\nHome | Open UI\ntext-wrap: pretty\nmargin-trim\nCSS shape() function\nTwo Lines of Cross-Document View Transitions Code\nSponsors",
          "itemLink": "https://shoptalkshow.com/667/"
        }
      ]
    },
    {
      "feedTitle": "Soft Skills Engineering",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "Episode 463: CTO w/ weak resume and I tried management and it was TERRIBLE",
          "media": "https://dts.podtrac.com/redirect.mp3/download.softskills.audio/sse-463.mp3?source=rss",
          "showNotes": "In this episode, Dave and Jamison answer these questions:\nAlbert Nonymous asks,\nI am the CTO at a small (5 engineers) tech start-up with non-technical founders. I was their first full-time employee and as such have been able to fully form this company the way I want. I’ve worked here for 9 years now and own 10% of the company. I enjoy the tech and the job itself. The pay is ok, not crazy Silicon Valley numbers but pretty good for a country with free health care.\nHowever, I started here while still in university. This is still the only job I’ve ever had. I am afraid that my resume will become less valuable the longer I stay here. I still keep up with current trends with hobby projects, but I’m worried that my resume will become less valuable if I ever need to look for another job.\nAlso, I don’t believe this company will succeed in the long run. I am still the only person on the board who knows how our tech even works and I have found myself slacking off quite a bit during the last year since having my first child. In the meantime, I also feel like I can’t just quit this job since that will almost certainly spell the end for this company and all its employees (some of which I count among my friends after all these years). What do I do? Am I overthinking things? Can I just keep working here until it eventually goes under? Or do I absolutely need to bite the bullet and pull the Jamison and Dave Time-Honoured Special™ and quit my job before I become totally un-hirable?\nFor much of my 9 years as a software engineer, I wanted to be a leader.  I just really enjoyed mentoring, training, improving workflows, working with stakeholders and co-ordinating on projects. Leadership seemed like a natural fit and so I was super psyched to be finally made a team leader last year.\nIt has been hell.\nIt has been like falling backwards out of a tree and hitting every branch on the way down, meanwhile it’s literally raining anvils and sabre toothed tigers. The constant pressure to have work lined up for the team and be able to report on the activities of the team at a moment’s notice is unbearable. I can’t stand being responsible for the delivery of other people’s work, writing up reports that no one reads or painstakingly de-noising pointless metrics. I dread having to pull eager young developers out of refactoring rabbit holes.\nFortunately, as I took this ‘promotion’ with no raise, I’ve easily been able to get myself busted back down to IC. Happy days 😎\nThe problem now is that I have no idea what to do with my career. My core experience is with dot net as a mid level engineer but honestly I’m what I would call a ‘hyphen’ shaped developer - I’ve seen and done a lot things but not to an expert level. Front end, back end, BI, and everything in between. That felt ok when I was aiming for leadership but now I feel lost. I honestly feel ready to go full goose farmer 🪿.\nWhat do I do next?",
          "itemLink": "https://softskills.audio/2025/06/02/episode-463-cto-w-weak-resume-and-i-tried-management-and-it-was-terrible/"
        }
      ]
    },
    {
      "feedTitle": "Front-End Fire",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "Zod v4: Prettier, Better, Faster, Smaller",
          "media": "https://www.buzzsprout.com/2226499/episodes/17264441-zod-v4-prettier-better-faster-smaller.mp3",
          "showNotes": "It’s been 4 years since TypeScript schema validation library Zod released v3, but the new v4 release makes it worth the wait. Expect faster parsing times across the board, built in error pretty-printing, and even a tree-shakeable API called Zod Mini for constrained environments like edge runtimes.\nThere’s a new npm-based CLI tool for managing and sharing AI rules across different editors and tools called vibe-rules. In addition to saving favorite prompts so they can be applied to any supported editor, vibe-rules can also automatically install prompts shared in a project’s NPM packages into an editor’s configuration. It’s early days yet, but a great idea to make prompts easier for anyone to use.\nAngular v20 is out with some much anticipated highlights. Stabilized signal-based APIs, incremental hydration, custom Angular reporting directly in Chrome DevTools, GenAI development advancements, and, last but not least, a RFC for an official Angular mascot. Not to bias you, but we favor the pink, dice-shaped mascot around here.\nIn this episode:\n\n1:10 - Zod v4\n5:50 - vibe-rules\n15:12 - Angular 20\n27:03 - Remix v3\n31:32 - Stack Overflow’s Annual Dev Survey\n38:02 - Firefox and Temporal\n39:15 - Bolt’s hackathon status\n\nNews:\n\nPaige - Zod v4\nJack - vibe-rules\nTJ - Angular 20\n\nLightning News:\n\nRemix v3 updates\nFirefox is the first browser to support Temporal (Temporal on MDN)\nStackOverflow’s Annual Dev Survey is out now\nBolt’s hackathon starts\n\nWhat Makes Us Happy this Week:\n\nPaige - Annual Gloucestershire cheese rolling race and Wiki history\nJack - The Portland Pickles baseball game\nTJ - StoryGraph and The God of the Woods\n\nThanks as always to our sponsor, the Blue Collar Coder channel on YouTube. You can join us in our Discord channel, explore our website and reach us via email, or talk to us on X, Bluesky, or YouTube.\n\nFront-end Fire website\nBlue Collar Coder on YouTube\nBlue Collar Coder on Discord\nReach out via email\nTweet at us on X @front_end_fire\nFollow us on Bluesky @front-end-fire.com\nSubscribe to our YouTube channel @Front-EndFirePodcast",
          "itemLink": "https://www.buzzsprout.com/2226499"
        }
      ]
    },
    {
      "feedTitle": "Modern Web",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "Building AI Agents That Build AI Agents: Inside Chai.new",
          "media": "https://anchor.fm/s/f9191780/podcast/play/103660374/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-5-4%2F401575062-44100-2-8ada640559a51.mp3",
          "showNotes": "In this episode of the Modern Web Podcast, Rob Ocel, Danny Thompson, and Adam Rackis sit down with Ahmad Awais, CEO and founder of LangBase, to talk about agents, context, and the future of AI-assisted software development. Ahmad shares the origin story of Chai.new, an agent that builds agents, and why he believes context, not code, is the true value layer in the AI era. The group unpacks how \"vibe coding\" is reshaping who can build software, why Chai isn’t just another AI assistant, and how agents might evolve into personalized, production-grade tools for everyone, technical or not. Plus: Tailwind analogies, Stanford lectures, sports nutrition agents, and a CLI that went viral in a hospital.Key points from this episode:- Ahmad Awais explains that AI agents aren't magic; they're just a new paradigm for writing software. What makes them powerful is their ability to act autonomously with relevant context, not just generate text.- Chai.new helps developers (and non-developers) create purpose-built agents without needing deep ML expertise. It abstracts complex concepts like memory, retrieval, and orchestration into an approachable interface.- Ahmad emphasizes that the real opportunity lies in agents tailored to individual users and use cases. Personal agents with custom context outperform generic ones, much like small teams beat massive frameworks for specific problems.- Chai and LangBase aim to bring AI development to the millions of engineers who aren't AI researchers. With tools like Chai, you don’t need a PhD to build powerful, production-ready AI agents.Follow Ahmad Awais on Social MediaTwitter: https://x.com/MrAhmadAwaisLinkedin: https://www.linkedin.com/in/mrahmadawais/Sponsored by This Dot: thisdot.co",
          "itemLink": "https://podcasters.spotify.com/pod/show/modern-web/episodes/Building-AI-Agents-That-Build-AI-Agents-Inside-Chai-new-e33pvcm"
        }
      ]
    },
    {
      "feedTitle": "Indie Bites",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "Why you should build a sweaty startup instead of an indie SaaS - Flo Schirmer",
          "media": "https://media.transistor.fm/c2cfbb76/733ebd84.mp3",
          "showNotes": "Today I’m talking with Flo Schirmer about \"sweaty startups\", a term for old-fashioned, low-risk businesses that are often service based and unsexy. I’m talking window cleaning, car washing, self-storage, house moving and more. We’re going to discuss if you can do this as a side hustle, if you should do this over a regular software business, and what you need to do to get started with some ideas along the way.\nTimestamps\n\n00:00 Intro\n01:38 What is a sweaty startup?\n03:18 From window cleaning to home security\n04:37 How to start a sweaty startup\n06:41 Growth for a sweaty startup\n07:26 Sweaty startup vs software - what is best for indie hackers?\n08:45 Injecting a tech edge into old fashioned businesses\n11:34 Examples of successful sweaty startup brands\n13:58 Two free sweaty startup ideas\n15:57 Recommendations\n\nRecommendations\n\nBook - $100m Leads\nPodcast - My First Million\nIndie Hacker - Alex Hormozi\n\nMy links\n\nTwitter\nIndie Bites Twitter\nIndie Bites YouTube\nJoin the membership\nPersonal Website\n2 Hour Podcast Course\n\nSponsor - EmailOctopus 🐙\nEmailOctopus is an independently owned email marketing platform, built to support other small growing businesses. With a focus on affordability and ease of use, EmailOctopus contains all of the features you need to reach and grow your audience. You can start today, with their industry leading free plan where you can contact up to 2,500 subscribers without paying a penny.",
          "itemLink": "https://indiebites.com/129"
        }
      ]
    },
    {
      "feedTitle": "devtools.fm: Developer Tools, Open Source, Software Development",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "Peter Pistorius - Redwood SDK",
          "media": "https://anchor.fm/s/dd6922b4/podcast/play/103524262/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-5-2%2F401400607-44100-2-b7ce6572894e6.m4a",
          "showNotes": "This week we talk to Peter Pistorius, the man currently at the helm of Redwood. Redwood has undergone a lot of changes since it was first announced, pivoting to a serverless framework that leans into React Server Components. Peter has a grand vision for Redwood and the advent of personal software, and we're excited to hear about it.\n\nhttps://rwsdk.com/\n\n\nEpisode sponsored By WorkOS (https://workos.com)\nBecome a paid subscriber our patreon, spotify, or apple podcasts for the full episode.\n\nhttps://www.patreon.com/devtoolsfm\nhttps://podcasters.spotify.com/pod/show/devtoolsfm/subscribe\nhttps://podcasts.apple.com/us/podcast/devtools-fm/id1566647758\nhttps://www.youtube.com/@devtoolsfm/membership",
          "itemLink": "https://podcasters.spotify.com/pod/show/devtoolsfm/episodes/Peter-Pistorius---Redwood-SDK-e33lqf6"
        }
      ]
    },
    {
      "feedTitle": "DevTalles",
      "updateStatus": 2,
      "data": [
        {
          "itemTitle": "213- Tecnologías que se creen muertas, pero siguen vivas en el 2025",
          "media": "https://anchor.fm/s/4c227378/podcast/play/103758675/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-5-6%2Ffe8cb272-15f4-2e89-2e8c-77f0e9ccecda.mp3",
          "showNotes": "En este episodio repasamos algunas tecnologías que suelen considerarse en desuso, pero que todavía se utilizan en muchos entornos. Hablamos sobre los motivos por los que siguen vigentes y qué factores influyen en su permanencia en proyectos reales.",
          "itemLink": "https://podcasters.spotify.com/pod/show/fernando-her85/episodes/213--Tecnologias-que-se-creen-muertas--pero-siguen-vivas-en-el-2025-e33svcj"
        },
        {
          "itemTitle": "212-Angular 20",
          "media": "https://anchor.fm/s/4c227378/podcast/play/103389250/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2025-4-29%2Fd98d7a08-bcaa-3855-1e70-c3913816f173.mp3",
          "showNotes": "En esta versión hablaremos un poco de las novedades de la versión 20 de Angular que fue liberada el 28 de mayo de 2025",
          "itemLink": "https://podcasters.spotify.com/pod/show/fernando-her85/episodes/212-Angular-20-e33hmk2"
        }
      ]
    },
    {
      "feedTitle": "HTTP 203",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "Frontend First",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "Svelte Radio",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "JS Party: JavaScript, CSS, Web Development",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "PodRocket - A web development podcast from LogRocket",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "Server functions don't exist with Jack Herrington",
          "media": "https://chrt.fm/track/7F1212/aphid.fireside.fm/d/1437767933/3911462c-bca2-48c2-9103-610ba304c673/afef67b1-0487-4a36-b247-a38f5bdd4f22.mp3",
          "showNotes": "Jack Herrington, podcaster, software engineer, writer and YouTuber, joins the pod to uncover the truth behind server functions and why they don’t actually exist in the web platform. We dive into the magic behind frameworks like Next.js, TanStack Start, and Remix, breaking down how server functions work, what they simplify, what they hide, and what developers need to know to build smarter, faster, and more secure web apps.\nLinks\nYouTube: https://www.youtube.com/@jherr\nTwitter: https://x.com/jherr\nGithub: https://github.com/jherr\nProNextJS: https://www.pronextjs.dev\nDiscord: https://discord.com/invite/KRVwpJUG6p\nLinkedIn: https://www.linkedin.com/in/jherr\nWebsite: https://jackherrington.com\nResources\nServer Functions Don't Exist (It Matters) (https://www.youtube.com/watch?v=FPJvlhee04E)\nWe want to hear from you!\nHow did you find us? Did you see us on Twitter? In a newsletter? Or maybe we were recommended by a friend?\nLet us know by sending an email to our producer, Em, at emily.kochanek@logrocket.com (mailto:emily.kochanek@logrocket.com), or tweet at us at PodRocketPod (https://twitter.com/PodRocketpod).\nFollow us. Get free stickers.\nFollow us on Apple Podcasts, fill out this form (https://podrocket.logrocket.com/get-podrocket-stickers), and we’ll send you free PodRocket stickers!\nWhat does LogRocket do?\nLogRocket provides AI-first session replay and analytics that surfaces the UX and technical issues impacting user experiences. Start understanding where your users are struggling by trying it for free at LogRocket.com. Try LogRocket for free today. (https://logrocket.com/signup/?pdr) Special Guest: Jack Herrington.",
          "itemLink": "http://podrocket.logrocket.com/server-functions-dont-exist-jack-herrington"
        }
      ]
    },
    {
      "feedTitle": "Web Rush",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "Jamstack Radio",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "JavaScript Jabber",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "Migrating a Legacy JavaScript Codebase to TypeScript - JSJ 680",
          "media": "https://dts.podtrac.com/redirect.mp3/api.spreaker.com/download/episode/66408262/jsj_680.mp3",
          "showNotes": "In this episode, Dan and I (Steve) dove deep into what turned out to be a surprisingly complex, yet incredibly insightful topic: gradually migrating a massive legacy JavaScript project over to TypeScript. We're talking about nearly 1,000 JS files, 70,000+ lines of code, and years of developer history—all transitioning carefully to a typed, modern future.\nDan walked us through how he started by setting up the project for success before converting even one file—getting CI/CD ready, setting up tsconfig.json, sorting out test dependencies, dealing with mock leaks, and even grappling with quirks between VS Code and WebStorm debugging.\nWe talked tools (like TS-ESLint, concurrently, and ts-node), why strict typing actually uncovered real bugs (and made the code better!), and why it’s crucial not to touch any .js files until your TypeScript setup is rock solid.\nKey Takeaways:\nGradual migration is 100% possible—and often better—than ripping the bandaid off.\nTypeScript can and will catch bugs hiding in your JavaScript. Be prepared!\nUse VS Code extensions or TS-Node to support your devs’ tooling preferences.\nDon't underestimate the setup phase—it’s the foundation of long-term success.\nStart small: Dan's team converted just one file at first to test the whole pipeline.\nIf you’re sitting on a legacy JS project and dreaming of TypeScript, this episode is your blueprint—and your warning sign.\nBecome a supporter of this podcast: https://www.spreaker.com/podcast/javascript-jabber--6102064/support.",
          "itemLink": "https://www.spreaker.com/episode/migrating-a-legacy-javascript-codebase-to-typescript-jsj-680--66408262"
        }
      ]
    },
    {
      "feedTitle": "DejaVue",
      "updateStatus": 1,
      "data": [
        {
          "itemTitle": "The History of Nuxt and NuxtLabs (with Sébastien Chopin)",
          "media": "https://media.transistor.fm/aa3553d0/f1af316c.mp3",
          "showNotes": "Join Alex and Michael with special guest Sébastien Chopin, creator of Nuxt.js and CEO of NuxtLabs, to learn more about the origins and evolution of the Vue-based meta framework. Sébastien shares valuable lessons from open source, how he came to create Nuxt.js in the first place and which challenges came with it.\nIn the second part of the episode, they cover Sébastien's company NuxtLabs - from its inception over to taking Venture Capital and products, such as NuxtHub or Nuxt UI Pro.\nEventually, the NuxtLabs CEO also outlines how they handle sponsorships of maintainers, and what the future holds for Nuxt and NuxtLabs.\nEnjoy the Episode!\n\nOur Guest\nSébastien Chopin\n\nNuxtLabs\nNuxt\nPersonal Website\nBluesky\n\n\nChapters\n\n\n\n(00:00) - Welcome to DejaVue\r\n(01:16) - How did you get into programming?\r\n(04:45) - The birth of Nuxt.js\r\n(07:43) - The Elevator Pitch for Nuxt\r\n(10:16) - When not to use Nuxt\r\n(11:20) - Nuxt as Multi Bundler Framework\r\n(12:37) - How does Nuxt scale (in Enterprise)?\r\n(16:04) - Lessons Learned from building Nuxt\r\n(19:47) - How to compare frameworks fairly?\r\n(23:20) - Frameworks converging\r\n(24:22) - Nuxt.js supporting React?\r\n(29:06) - The creation of NuxtLabs\r\n(33:50) - Products of NuxtLabs\r\n(37:11) - Why going all in on Cloudflare for NuxtHub \r\n(41:50) - Vite Environment API\r\n(45:34) - The difference between Nuxt and NuxtLabs\r\n(51:56) - Is Nuxt a VC-backed framework?\r\n(53:51) - Sponsoring Core Maintainers\r\n(56:07) - Freemium in Nuxt\r\n(57:06) - Sneak Peek of the NuxtLabs Roadmap\r\n(59:51) - Where can people find you?\n\n\nLinks and Resources\n\n\nNuxt\nIntro to Nuxt Layers\nNitro\nReactivue\ninclusion-vapor\nDejaVue #E044 - Our Predictions for Vue and Nuxt in 2025 (with Daniel Roe)\nVolta\nNuxt UI *\nNuxt Governance\nNuxt Studio\nNuxtHub\nLaravel Vapor\nCloudflare\nDejaVue #E051 - Vite Inside Out (with Matias \"Patak\" Capeletto)\nStrapi\n\nYour Hosts\n\nMichael Thiessen\n\n\nTwitter\nYouTube\nWebsite\n\n\nAlexander Lichter\n\n\nBluesky\nYouTube\nWebsite\n\n---\nLinks marked with * are affiliate links. We get a small commission when you register for the service through our link. This helps us to keep the podcast running. We only include affiliate links for services mentioned in the episode or that we use ourselves.",
          "itemLink": "https://share.transistor.fm/s/aa3553d0"
        }
      ]
    },
    {
      "feedTitle": "Syntax - Tasty Web Development Treats",
      "updateStatus": 2,
      "data": [
        {
          "itemTitle": "908: Storybook Has Evolved w/ Jeppe Reinhold",
          "media": "https://traffic.libsyn.com/secure/syntax/Syntax_-_908.mp3?dest-id=532671",
          "showNotes": "Wes and Scott talk with Jeppe Reinhold about Storybook 9’s powerful new features—including drastically reduced bloat, seamless Vite integration, and next-level component testing. They dive into visual regression testing, accessibility, performance, and best practices for writing robust, isolated UI components developers can actually enjoy testing and documenting.\n Show Notes\n  \n 00:00 Welcome to Syntax!\n  01:40 What is Storybook?\n  03:48 How Storybook makes component design easier\n  04:41 Vite integration and compatibility with other tools \n  Vite\n  webpack\n  RSpack\n  \n  06:50 Storybook’s significantly smaller bundle size \n  e18e\n  polka\n  \n  13:31 Upgrading to Storybook 9\n  17:34 Testing components with Storybook \n  Vitest\n  \n  19:51 How do you write a component “story”?\n  24:29 Brought to you by Sentry.io\n  24:54 How visual testing works\n  28:38 How Storybook makes money\n  29:33 Best practices for component design\n  32:24 Mocking and testing strategies\n  34:49 Accessibility testing\n  40:51 Add-ons and future features\n  44:43 Storybook’s documentation\n  46:33 Sick Picks + Shameless plugs\n  \n Sick Picks\n  \n Jeppe: JBL Boombox 3 Wi-Fi\n  \n Shameless Plugs\n  \n Jeppe: chromatic\n  \n Hit us up on Socials!\n  Syntax: X Instagram Tiktok LinkedIn Threads\n  Wes: X Instagram Tiktok LinkedIn Threads\n  Scott: X Instagram Tiktok LinkedIn Threads\n  Randy: X Instagram YouTube Threads",
          "itemLink": "https://syntax.fm/908"
        },
        {
          "itemTitle": "907: Wes’ New Site: Gatsby → React Server Components",
          "media": "https://traffic.libsyn.com/secure/syntax/Syntax_-_907.mp3?dest-id=532671",
          "showNotes": "Wes rebuilt his personal site from Gatsby to a modern stack using Waku, React Server Components, and Cloudflare Workers — all while keeping the same design. Scott and Wes break down the pain points with Next.js, MDX, image handling, caching, and the custom setup that now powers a blazing-fast blog.\n Show Notes\n  \n 00:00 Welcome to Syntax!\n  01:03 Barcelona Conference.\n  04:09 Brought to you by Sentry.io.\n  04:33 Existing stack, goodbye to Gatsby.\n  06:11 New stack, the goals for moving.\n  06:56 So what is the new stack? \n  08:32 Challenges with NextJS.\n  08:58 Problems with plugins.\n  09:30 Problems with dynamic imports.\n  10:21 Problems with Cloudflare deployment.\n  \n  12:37 Landing on Waku.\n  13:59 Hot Tips functionality updates.\n  16:30 Blog Posts + JavaScript Notes.\n  17:09 Moving from Gatsby.\n  19:03 Page speeds. \n  19:29 Removing nav resizing process.\n  21:03 Writing custom MDX plugins.\n  \n  23:28 Hosting. \n  24:08 Why is the build so fast?\n  \n  28:01 Pricing.\n  32:25 Caching.\n  34:49 Migration errors.\n  36:37 CSS.\n  \n Hit us up on Socials!\n  Syntax: X Instagram Tiktok LinkedIn Threads\n  Wes: X Instagram Tiktok LinkedIn Threads\n  Scott: X Instagram Tiktok LinkedIn Threads\n  Randy: X Instagram YouTube Threads",
          "itemLink": "https://syntax.fm/907"
        }
      ]
    },
    {
      "feedTitle": "Rust Review",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "Front End Happy Hour",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "Off The Main Thread",
      "updateStatus": 0,
      "data": []
    },
    {
      "feedTitle": "The CSS Podcast",
      "updateStatus": 0,
      "data": []
    }
  ]
}